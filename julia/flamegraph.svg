<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="257"><g><title>[unknown] (5 samples, 1.95%)</title><rect x="0.0000%" y="869" width="1.9455%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="879.50">[..</text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="1.5564%" y="853" width="0.3891%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="1.8064%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="1.5564%" y="837" width="0.3891%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="1.8064%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="1.5564%" y="821" width="0.3891%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="1.8064%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="1.5564%" y="805" width="0.3891%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="1.8064%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="1.9455%" y="853" width="0.3891%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="2.1955%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="1.9455%" y="837" width="0.3891%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="2.1955%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.39%)</title><rect x="2.3346%" y="597" width="0.3891%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="2.5846%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.39%)</title><rect x="2.3346%" y="581" width="0.3891%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="2.5846%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.39%)</title><rect x="2.3346%" y="565" width="0.3891%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="1"/><text x="2.5846%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.39%)</title><rect x="2.3346%" y="549" width="0.3891%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1"/><text x="2.5846%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.39%)</title><rect x="2.3346%" y="533" width="0.3891%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="1"/><text x="2.5846%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.39%)</title><rect x="2.3346%" y="517" width="0.3891%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="1"/><text x="2.5846%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.39%)</title><rect x="2.3346%" y="501" width="0.3891%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="1"/><text x="2.5846%" y="511.50"></text></g><g><title>deflate::compress::flush_to_bitstream (1 samples, 0.39%)</title><rect x="2.7237%" y="437" width="0.3891%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="2.9737%" y="447.50"></text></g><g><title>deflate::encoder_state::EncoderState::write_lzvalue (1 samples, 0.39%)</title><rect x="2.7237%" y="421" width="0.3891%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1"/><text x="2.9737%" y="431.50"></text></g><g><title>deflate::bitstream::LsbWriter::write_bits (1 samples, 0.39%)</title><rect x="2.7237%" y="405" width="0.3891%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="2.9737%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.39%)</title><rect x="3.1128%" y="373" width="0.3891%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="3.3628%" y="383.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.39%)</title><rect x="3.1128%" y="357" width="0.3891%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="1"/><text x="3.3628%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.39%)</title><rect x="3.1128%" y="341" width="0.3891%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1"/><text x="3.3628%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.39%)</title><rect x="3.1128%" y="325" width="0.3891%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="1"/><text x="3.3628%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.39%)</title><rect x="3.1128%" y="309" width="0.3891%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="3.3628%" y="319.50"></text></g><g><title>deflate::lz77::add_to_hash_table (2 samples, 0.78%)</title><rect x="3.1128%" y="389" width="0.7782%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="2"/><text x="3.3628%" y="399.50"></text></g><g><title>deflate::chained_hash_table::ChainedHashTable::add_with_hash (1 samples, 0.39%)</title><rect x="3.5019%" y="373" width="0.3891%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="1"/><text x="3.7519%" y="383.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::save (6 samples, 2.33%)</title><rect x="2.7237%" y="597" width="2.3346%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="6"/><text x="2.9737%" y="607.50">i..</text></g><g><title>image::dynimage::save_buffer (6 samples, 2.33%)</title><rect x="2.7237%" y="581" width="2.3346%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="6"/><text x="2.9737%" y="591.50">i..</text></g><g><title>image::io::free_functions::save_buffer_impl (6 samples, 2.33%)</title><rect x="2.7237%" y="565" width="2.3346%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="6"/><text x="2.9737%" y="575.50">i..</text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (6 samples, 2.33%)</title><rect x="2.7237%" y="549" width="2.3346%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="6"/><text x="2.9737%" y="559.50">i..</text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (6 samples, 2.33%)</title><rect x="2.7237%" y="533" width="2.3346%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="6"/><text x="2.9737%" y="543.50">&lt;..</text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode (6 samples, 2.33%)</title><rect x="2.7237%" y="517" width="2.3346%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="6"/><text x="2.9737%" y="527.50">i..</text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (6 samples, 2.33%)</title><rect x="2.7237%" y="501" width="2.3346%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="6"/><text x="2.9737%" y="511.50">p..</text></g><g><title>std::io::Write::write_all (6 samples, 2.33%)</title><rect x="2.7237%" y="485" width="2.3346%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="6"/><text x="2.9737%" y="495.50">s..</text></g><g><title>&lt;deflate::writer::ZlibEncoder&lt;W&gt; as std::io::Write&gt;::write (6 samples, 2.33%)</title><rect x="2.7237%" y="469" width="2.3346%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="6"/><text x="2.9737%" y="479.50">&lt;..</text></g><g><title>deflate::compress::compress_data_dynamic_n (6 samples, 2.33%)</title><rect x="2.7237%" y="453" width="2.3346%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="6"/><text x="2.9737%" y="463.50">d..</text></g><g><title>deflate::lz77::lz77_compress_block (5 samples, 1.95%)</title><rect x="3.1128%" y="437" width="1.9455%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="5"/><text x="3.3628%" y="447.50">d..</text></g><g><title>deflate::lz77::process_chunk (5 samples, 1.95%)</title><rect x="3.1128%" y="421" width="1.9455%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="5"/><text x="3.3628%" y="431.50">d..</text></g><g><title>deflate::lz77::process_chunk_greedy (5 samples, 1.95%)</title><rect x="3.1128%" y="405" width="1.9455%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="5"/><text x="3.3628%" y="415.50">d..</text></g><g><title>deflate::matching::longest_match (3 samples, 1.17%)</title><rect x="3.8911%" y="389" width="1.1673%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="3"/><text x="4.1411%" y="399.50"></text></g><g><title>deflate::matching::get_match_length (3 samples, 1.17%)</title><rect x="3.8911%" y="373" width="1.1673%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="3"/><text x="4.1411%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (3 samples, 1.17%)</title><rect x="3.8911%" y="357" width="1.1673%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="3"/><text x="4.1411%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 1.17%)</title><rect x="3.8911%" y="341" width="1.1673%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="3"/><text x="4.1411%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 1.17%)</title><rect x="3.8911%" y="325" width="1.1673%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="3"/><text x="4.1411%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 1.17%)</title><rect x="3.8911%" y="309" width="1.1673%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="3"/><text x="4.1411%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 1.17%)</title><rect x="3.8911%" y="293" width="1.1673%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="3"/><text x="4.1411%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (3 samples, 1.17%)</title><rect x="3.8911%" y="277" width="1.1673%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="3"/><text x="4.1411%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (3 samples, 1.17%)</title><rect x="3.8911%" y="261" width="1.1673%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="3"/><text x="4.1411%" y="271.50"></text></g><g><title>deflate::matching::get_match_length::_{{closure}} (1 samples, 0.39%)</title><rect x="4.6693%" y="245" width="0.3891%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="1"/><text x="4.9193%" y="255.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (8 samples, 3.11%)</title><rect x="2.3346%" y="853" width="3.1128%" height="15" fill="rgb(250,191,14)" fg:x="6" fg:w="8"/><text x="2.5846%" y="863.50">__l..</text></g><g><title>__libc_start_call_main (8 samples, 3.11%)</title><rect x="2.3346%" y="837" width="3.1128%" height="15" fill="rgb(239,60,40)" fg:x="6" fg:w="8"/><text x="2.5846%" y="847.50">__l..</text></g><g><title>main (8 samples, 3.11%)</title><rect x="2.3346%" y="821" width="3.1128%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="8"/><text x="2.5846%" y="831.50">main</text></g><g><title>std::rt::lang_start_internal (8 samples, 3.11%)</title><rect x="2.3346%" y="805" width="3.1128%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="8"/><text x="2.5846%" y="815.50">std..</text></g><g><title>std::panic::catch_unwind (8 samples, 3.11%)</title><rect x="2.3346%" y="789" width="3.1128%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="8"/><text x="2.5846%" y="799.50">std..</text></g><g><title>std::panicking::try (8 samples, 3.11%)</title><rect x="2.3346%" y="773" width="3.1128%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="8"/><text x="2.5846%" y="783.50">std..</text></g><g><title>std::panicking::try::do_call (8 samples, 3.11%)</title><rect x="2.3346%" y="757" width="3.1128%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="8"/><text x="2.5846%" y="767.50">std..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (8 samples, 3.11%)</title><rect x="2.3346%" y="741" width="3.1128%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="8"/><text x="2.5846%" y="751.50">std..</text></g><g><title>std::panic::catch_unwind (8 samples, 3.11%)</title><rect x="2.3346%" y="725" width="3.1128%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="8"/><text x="2.5846%" y="735.50">std..</text></g><g><title>std::panicking::try (8 samples, 3.11%)</title><rect x="2.3346%" y="709" width="3.1128%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="8"/><text x="2.5846%" y="719.50">std..</text></g><g><title>std::panicking::try::do_call (8 samples, 3.11%)</title><rect x="2.3346%" y="693" width="3.1128%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="8"/><text x="2.5846%" y="703.50">std..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8 samples, 3.11%)</title><rect x="2.3346%" y="677" width="3.1128%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="8"/><text x="2.5846%" y="687.50">cor..</text></g><g><title>std::rt::lang_start::_{{closure}} (8 samples, 3.11%)</title><rect x="2.3346%" y="661" width="3.1128%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="8"/><text x="2.5846%" y="671.50">std..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 3.11%)</title><rect x="2.3346%" y="645" width="3.1128%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="8"/><text x="2.5846%" y="655.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once (8 samples, 3.11%)</title><rect x="2.3346%" y="629" width="3.1128%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="8"/><text x="2.5846%" y="639.50">cor..</text></g><g><title>julia::main (8 samples, 3.11%)</title><rect x="2.3346%" y="613" width="3.1128%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="8"/><text x="2.5846%" y="623.50">jul..</text></g><g><title>julia::generate_image_buffer (1 samples, 0.39%)</title><rect x="5.0584%" y="597" width="0.3891%" height="15" fill="rgb(222,148,37)" fg:x="13" fg:w="1"/><text x="5.3084%" y="607.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::put_pixel (1 samples, 0.39%)</title><rect x="5.0584%" y="581" width="0.3891%" height="15" fill="rgb(234,67,33)" fg:x="13" fg:w="1"/><text x="5.3084%" y="591.50"></text></g><g><title>[unknown] (3 samples, 1.17%)</title><rect x="5.8366%" y="837" width="1.1673%" height="15" fill="rgb(247,98,35)" fg:x="15" fg:w="3"/><text x="6.0866%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.78%)</title><rect x="6.2257%" y="821" width="0.7782%" height="15" fill="rgb(247,138,52)" fg:x="16" fg:w="2"/><text x="6.4757%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="6.6148%" y="805" width="0.3891%" height="15" fill="rgb(213,79,30)" fg:x="17" fg:w="1"/><text x="6.8648%" y="815.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.39%)</title><rect x="7.0039%" y="805" width="0.3891%" height="15" fill="rgb(246,177,23)" fg:x="18" fg:w="1"/><text x="7.2539%" y="815.50"></text></g><g><title>_dl_start_final (2 samples, 0.78%)</title><rect x="7.0039%" y="837" width="0.7782%" height="15" fill="rgb(230,62,27)" fg:x="18" fg:w="2"/><text x="7.2539%" y="847.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.78%)</title><rect x="7.0039%" y="821" width="0.7782%" height="15" fill="rgb(216,154,8)" fg:x="18" fg:w="2"/><text x="7.2539%" y="831.50"></text></g><g><title>dl_main (1 samples, 0.39%)</title><rect x="7.3930%" y="805" width="0.3891%" height="15" fill="rgb(244,35,45)" fg:x="19" fg:w="1"/><text x="7.6430%" y="815.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.39%)</title><rect x="7.3930%" y="789" width="0.3891%" height="15" fill="rgb(251,115,12)" fg:x="19" fg:w="1"/><text x="7.6430%" y="799.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.39%)</title><rect x="7.3930%" y="773" width="0.3891%" height="15" fill="rgb(240,54,50)" fg:x="19" fg:w="1"/><text x="7.6430%" y="783.50"></text></g><g><title>do_lookup_x (1 samples, 0.39%)</title><rect x="7.3930%" y="757" width="0.3891%" height="15" fill="rgb(233,84,52)" fg:x="19" fg:w="1"/><text x="7.6430%" y="767.50"></text></g><g><title>_start (16 samples, 6.23%)</title><rect x="1.9455%" y="869" width="6.2257%" height="15" fill="rgb(207,117,47)" fg:x="5" fg:w="16"/><text x="2.1955%" y="879.50">_start</text></g><g><title>_dl_start (7 samples, 2.72%)</title><rect x="5.4475%" y="853" width="2.7237%" height="15" fill="rgb(249,43,39)" fg:x="14" fg:w="7"/><text x="5.6975%" y="863.50">_d..</text></g><g><title>elf_get_dynamic_info (1 samples, 0.39%)</title><rect x="7.7821%" y="837" width="0.3891%" height="15" fill="rgb(209,38,44)" fg:x="20" fg:w="1"/><text x="8.0321%" y="847.50"></text></g><g><title>[unknown] (10 samples, 3.89%)</title><rect x="8.1712%" y="837" width="3.8911%" height="15" fill="rgb(236,212,23)" fg:x="21" fg:w="10"/><text x="8.4212%" y="847.50">[unk..</text></g><g><title>[unknown] (10 samples, 3.89%)</title><rect x="8.1712%" y="821" width="3.8911%" height="15" fill="rgb(242,79,21)" fg:x="21" fg:w="10"/><text x="8.4212%" y="831.50">[unk..</text></g><g><title>[unknown] (9 samples, 3.50%)</title><rect x="8.5603%" y="805" width="3.5019%" height="15" fill="rgb(211,96,35)" fg:x="22" fg:w="9"/><text x="8.8103%" y="815.50">[un..</text></g><g><title>[unknown] (5 samples, 1.95%)</title><rect x="10.1167%" y="789" width="1.9455%" height="15" fill="rgb(253,215,40)" fg:x="26" fg:w="5"/><text x="10.3667%" y="799.50">[..</text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="11.6732%" y="773" width="0.3891%" height="15" fill="rgb(211,81,21)" fg:x="30" fg:w="1"/><text x="11.9232%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="11.6732%" y="757" width="0.3891%" height="15" fill="rgb(208,190,38)" fg:x="30" fg:w="1"/><text x="11.9232%" y="767.50"></text></g><g><title>__sigsetjmp (1 samples, 0.39%)</title><rect x="12.0623%" y="837" width="0.3891%" height="15" fill="rgb(235,213,38)" fg:x="31" fg:w="1"/><text x="12.3123%" y="847.50"></text></g><g><title>_setjmp (2 samples, 0.78%)</title><rect x="12.4514%" y="837" width="0.7782%" height="15" fill="rgb(237,122,38)" fg:x="32" fg:w="2"/><text x="12.7014%" y="847.50"></text></g><g><title>&lt;rayon_core::latch::CountLatch as rayon_core::latch::Latch&gt;::set (7 samples, 2.72%)</title><rect x="15.5642%" y="469" width="2.7237%" height="15" fill="rgb(244,218,35)" fg:x="40" fg:w="7"/><text x="15.8142%" y="479.50">&lt;r..</text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.39%)</title><rect x="18.2879%" y="421" width="0.3891%" height="15" fill="rgb(240,68,47)" fg:x="47" fg:w="1"/><text x="18.5379%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;julia::generate_image_buffer::{{closure}}::{{closure}}&gt; (5 samples, 1.95%)</title><rect x="19.4553%" y="357" width="1.9455%" height="15" fill="rgb(210,16,53)" fg:x="50" fg:w="5"/><text x="19.7053%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;image::color::Rgb&lt;u8&gt;&gt;&gt;&gt;&gt;&gt; (5 samples, 1.95%)</title><rect x="19.4553%" y="341" width="1.9455%" height="15" fill="rgb(235,124,12)" fg:x="50" fg:w="5"/><text x="19.7053%" y="351.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 1.95%)</title><rect x="19.4553%" y="325" width="1.9455%" height="15" fill="rgb(224,169,11)" fg:x="50" fg:w="5"/><text x="19.7053%" y="335.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;image::color::Rgb&lt;u8&gt;&gt;&gt;&gt;&gt; (2 samples, 0.78%)</title><rect x="21.4008%" y="357" width="0.7782%" height="15" fill="rgb(250,166,2)" fg:x="55" fg:w="2"/><text x="21.6508%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.78%)</title><rect x="21.4008%" y="341" width="0.7782%" height="15" fill="rgb(242,216,29)" fg:x="55" fg:w="2"/><text x="21.6508%" y="351.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (2 samples, 0.78%)</title><rect x="21.4008%" y="325" width="0.7782%" height="15" fill="rgb(230,116,27)" fg:x="55" fg:w="2"/><text x="21.6508%" y="335.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (1 samples, 0.39%)</title><rect x="25.6809%" y="341" width="0.3891%" height="15" fill="rgb(228,99,48)" fg:x="66" fg:w="1"/><text x="25.9309%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.39%)</title><rect x="25.6809%" y="325" width="0.3891%" height="15" fill="rgb(253,11,6)" fg:x="66" fg:w="1"/><text x="25.9309%" y="335.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::norm (15 samples, 5.84%)</title><rect x="26.0700%" y="341" width="5.8366%" height="15" fill="rgb(247,143,39)" fg:x="67" fg:w="15"/><text x="26.3200%" y="351.50">num_com..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::hypot (15 samples, 5.84%)</title><rect x="26.0700%" y="325" width="5.8366%" height="15" fill="rgb(236,97,10)" fg:x="67" fg:w="15"/><text x="26.3200%" y="335.50">&lt;f64 as..</text></g><g><title>std::f64::&lt;impl f64&gt;::hypot (15 samples, 5.84%)</title><rect x="26.0700%" y="309" width="5.8366%" height="15" fill="rgb(233,208,19)" fg:x="67" fg:w="15"/><text x="26.3200%" y="319.50">std::f6..</text></g><g><title>hypot (15 samples, 5.84%)</title><rect x="26.0700%" y="293" width="5.8366%" height="15" fill="rgb(216,164,2)" fg:x="67" fg:w="15"/><text x="26.3200%" y="303.50">hypot</text></g><g><title>julia::color_generator (31 samples, 12.06%)</title><rect x="22.1790%" y="357" width="12.0623%" height="15" fill="rgb(220,129,5)" fg:x="57" fg:w="31"/><text x="22.4290%" y="367.50">julia::color_gener..</text></g><g><title>std::f64::&lt;impl f64&gt;::powf (6 samples, 2.33%)</title><rect x="31.9066%" y="341" width="2.3346%" height="15" fill="rgb(242,17,10)" fg:x="82" fg:w="6"/><text x="32.1566%" y="351.50">s..</text></g><g><title>pow (6 samples, 2.33%)</title><rect x="31.9066%" y="325" width="2.3346%" height="15" fill="rgb(242,107,0)" fg:x="82" fg:w="6"/><text x="32.1566%" y="335.50">p..</text></g><g><title>[libm.so.6] (4 samples, 1.56%)</title><rect x="32.6848%" y="309" width="1.5564%" height="15" fill="rgb(251,28,31)" fg:x="84" fg:w="4"/><text x="32.9348%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (5 samples, 1.95%)</title><rect x="34.6304%" y="325" width="1.9455%" height="15" fill="rgb(233,223,10)" fg:x="89" fg:w="5"/><text x="34.8804%" y="335.50">c..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (5 samples, 1.95%)</title><rect x="34.6304%" y="309" width="1.9455%" height="15" fill="rgb(215,21,27)" fg:x="89" fg:w="5"/><text x="34.8804%" y="319.50">c..</text></g><g><title>std::sys::pal::unix::futex::futex_wait (2 samples, 0.78%)</title><rect x="36.9650%" y="309" width="0.7782%" height="15" fill="rgb(232,23,21)" fg:x="95" fg:w="2"/><text x="37.2150%" y="319.50"></text></g><g><title>syscall (2 samples, 0.78%)</title><rect x="36.9650%" y="293" width="0.7782%" height="15" fill="rgb(244,5,23)" fg:x="95" fg:w="2"/><text x="37.2150%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.78%)</title><rect x="36.9650%" y="277" width="0.7782%" height="15" fill="rgb(226,81,46)" fg:x="95" fg:w="2"/><text x="37.2150%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="37.3541%" y="261" width="0.3891%" height="15" fill="rgb(247,70,30)" fg:x="96" fg:w="1"/><text x="37.6041%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="37.3541%" y="245" width="0.3891%" height="15" fill="rgb(212,68,19)" fg:x="96" fg:w="1"/><text x="37.6041%" y="255.50"></text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (65 samples, 25.29%)</title><rect x="14.0078%" y="533" width="25.2918%" height="15" fill="rgb(240,187,13)" fg:x="36" fg:w="65"/><text x="14.2578%" y="543.50">&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon..</text></g><g><title>rayon_core::scope::Scope::spawn::_{{closure}} (61 samples, 23.74%)</title><rect x="15.5642%" y="517" width="23.7354%" height="15" fill="rgb(223,113,26)" fg:x="40" fg:w="61"/><text x="15.8142%" y="527.50">rayon_core::scope::Scope::spawn::_{{cl..</text></g><g><title>rayon_core::scope::ScopeBase::execute_job (61 samples, 23.74%)</title><rect x="15.5642%" y="501" width="23.7354%" height="15" fill="rgb(206,192,2)" fg:x="40" fg:w="61"/><text x="15.8142%" y="511.50">rayon_core::scope::ScopeBase::execute_..</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (61 samples, 23.74%)</title><rect x="15.5642%" y="485" width="23.7354%" height="15" fill="rgb(241,108,4)" fg:x="40" fg:w="61"/><text x="15.8142%" y="495.50">rayon_core::scope::ScopeBase::execute_..</text></g><g><title>rayon_core::unwind::halt_unwinding (54 samples, 21.01%)</title><rect x="18.2879%" y="469" width="21.0117%" height="15" fill="rgb(247,173,49)" fg:x="47" fg:w="54"/><text x="18.5379%" y="479.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (54 samples, 21.01%)</title><rect x="18.2879%" y="453" width="21.0117%" height="15" fill="rgb(224,114,35)" fg:x="47" fg:w="54"/><text x="18.5379%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (54 samples, 21.01%)</title><rect x="18.2879%" y="437" width="21.0117%" height="15" fill="rgb(245,159,27)" fg:x="47" fg:w="54"/><text x="18.5379%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (53 samples, 20.62%)</title><rect x="18.6770%" y="421" width="20.6226%" height="15" fill="rgb(245,172,44)" fg:x="48" fg:w="53"/><text x="18.9270%" y="431.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (53 samples, 20.62%)</title><rect x="18.6770%" y="405" width="20.6226%" height="15" fill="rgb(236,23,11)" fg:x="48" fg:w="53"/><text x="18.9270%" y="415.50">&lt;core::panic::unwind_safe::Asser..</text></g><g><title>rayon_core::scope::Scope::spawn::_{{closure}}::_{{closure}} (53 samples, 20.62%)</title><rect x="18.6770%" y="389" width="20.6226%" height="15" fill="rgb(205,117,38)" fg:x="48" fg:w="53"/><text x="18.9270%" y="399.50">rayon_core::scope::Scope::spawn:..</text></g><g><title>julia::generate_image_buffer::_{{closure}}::_{{closure}} (53 samples, 20.62%)</title><rect x="18.6770%" y="373" width="20.6226%" height="15" fill="rgb(237,72,25)" fg:x="48" fg:w="53"/><text x="18.9270%" y="383.50">julia::generate_image_buffer::_{..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (13 samples, 5.06%)</title><rect x="34.2412%" y="357" width="5.0584%" height="15" fill="rgb(244,70,9)" fg:x="88" fg:w="13"/><text x="34.4912%" y="367.50">std::s..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (13 samples, 5.06%)</title><rect x="34.2412%" y="341" width="5.0584%" height="15" fill="rgb(217,125,39)" fg:x="88" fg:w="13"/><text x="34.4912%" y="351.50">std::s..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (7 samples, 2.72%)</title><rect x="36.5759%" y="325" width="2.7237%" height="15" fill="rgb(235,36,10)" fg:x="94" fg:w="7"/><text x="36.8259%" y="335.50">st..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::spin (4 samples, 1.56%)</title><rect x="37.7432%" y="309" width="1.5564%" height="15" fill="rgb(251,123,47)" fg:x="97" fg:w="4"/><text x="37.9932%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 3.11%)</title><rect x="41.2451%" y="165" width="3.1128%" height="15" fill="rgb(221,13,13)" fg:x="106" fg:w="8"/><text x="41.4951%" y="175.50">&lt;al..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 2.33%)</title><rect x="46.6926%" y="149" width="2.3346%" height="15" fill="rgb(238,131,9)" fg:x="120" fg:w="6"/><text x="46.9426%" y="159.50">&lt;..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (6 samples, 2.33%)</title><rect x="46.6926%" y="133" width="2.3346%" height="15" fill="rgb(211,50,8)" fg:x="120" fg:w="6"/><text x="46.9426%" y="143.50">a..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (6 samples, 2.33%)</title><rect x="46.6926%" y="117" width="2.3346%" height="15" fill="rgb(245,182,24)" fg:x="120" fg:w="6"/><text x="46.9426%" y="127.50">c..</text></g><g><title>rayon_core::job::HeapJob&lt;BODY&gt;::new (10 samples, 3.89%)</title><rect x="49.0272%" y="149" width="3.8911%" height="15" fill="rgb(242,14,37)" fg:x="126" fg:w="10"/><text x="49.2772%" y="159.50">rayo..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (10 samples, 3.89%)</title><rect x="49.0272%" y="133" width="3.8911%" height="15" fill="rgb(246,228,12)" fg:x="126" fg:w="10"/><text x="49.2772%" y="143.50">allo..</text></g><g><title>alloc::alloc::exchange_malloc (10 samples, 3.89%)</title><rect x="49.0272%" y="117" width="3.8911%" height="15" fill="rgb(213,55,15)" fg:x="126" fg:w="10"/><text x="49.2772%" y="127.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 3.89%)</title><rect x="49.0272%" y="101" width="3.8911%" height="15" fill="rgb(209,9,3)" fg:x="126" fg:w="10"/><text x="49.2772%" y="111.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 3.89%)</title><rect x="49.0272%" y="85" width="3.8911%" height="15" fill="rgb(230,59,30)" fg:x="126" fg:w="10"/><text x="49.2772%" y="95.50">allo..</text></g><g><title>alloc::alloc::alloc (10 samples, 3.89%)</title><rect x="49.0272%" y="69" width="3.8911%" height="15" fill="rgb(209,121,21)" fg:x="126" fg:w="10"/><text x="49.2772%" y="79.50">allo..</text></g><g><title>malloc (10 samples, 3.89%)</title><rect x="49.0272%" y="53" width="3.8911%" height="15" fill="rgb(220,109,13)" fg:x="126" fg:w="10"/><text x="49.2772%" y="63.50">mall..</text></g><g><title>_int_malloc (9 samples, 3.50%)</title><rect x="49.4163%" y="37" width="3.5019%" height="15" fill="rgb(232,18,1)" fg:x="127" fg:w="9"/><text x="49.6663%" y="47.50">_in..</text></g><g><title>&lt;rayon_core::registry::RegistryId as core::cmp::PartialEq&gt;::eq (1 samples, 0.39%)</title><rect x="52.9183%" y="133" width="0.3891%" height="15" fill="rgb(215,41,42)" fg:x="136" fg:w="1"/><text x="53.1683%" y="143.50"></text></g><g><title>rayon_core::registry::Registry::id (1 samples, 0.39%)</title><rect x="53.3074%" y="133" width="0.3891%" height="15" fill="rgb(224,123,36)" fg:x="137" fg:w="1"/><text x="53.5574%" y="143.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::is_empty (3 samples, 1.17%)</title><rect x="53.6965%" y="117" width="1.1673%" height="15" fill="rgb(240,125,3)" fg:x="138" fg:w="3"/><text x="53.9465%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (3 samples, 1.17%)</title><rect x="53.6965%" y="101" width="1.1673%" height="15" fill="rgb(205,98,50)" fg:x="138" fg:w="3"/><text x="53.9465%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 1.17%)</title><rect x="53.6965%" y="85" width="1.1673%" height="15" fill="rgb(205,185,37)" fg:x="138" fg:w="3"/><text x="53.9465%" y="95.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.39%)</title><rect x="54.8638%" y="101" width="0.3891%" height="15" fill="rgb(238,207,15)" fg:x="141" fg:w="1"/><text x="55.1138%" y="111.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.39%)</title><rect x="54.8638%" y="85" width="0.3891%" height="15" fill="rgb(213,199,42)" fg:x="141" fg:w="1"/><text x="55.1138%" y="95.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.39%)</title><rect x="54.8638%" y="69" width="0.3891%" height="15" fill="rgb(235,201,11)" fg:x="141" fg:w="1"/><text x="55.1138%" y="79.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::push (2 samples, 0.78%)</title><rect x="54.8638%" y="117" width="0.7782%" height="15" fill="rgb(207,46,11)" fg:x="141" fg:w="2"/><text x="55.1138%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (1 samples, 0.39%)</title><rect x="55.2529%" y="101" width="0.3891%" height="15" fill="rgb(241,35,35)" fg:x="142" fg:w="1"/><text x="55.5029%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.39%)</title><rect x="55.2529%" y="85" width="0.3891%" height="15" fill="rgb(243,32,47)" fg:x="142" fg:w="1"/><text x="55.5029%" y="95.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (44 samples, 17.12%)</title><rect x="39.2996%" y="533" width="17.1206%" height="15" fill="rgb(247,202,23)" fg:x="101" fg:w="44"/><text x="39.5496%" y="543.50">&lt;rayon_core::job::StackJob&lt;..</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (44 samples, 17.12%)</title><rect x="39.2996%" y="517" width="17.1206%" height="15" fill="rgb(219,102,11)" fg:x="101" fg:w="44"/><text x="39.5496%" y="527.50">rayon_core::job::JobResult&lt;..</text></g><g><title>rayon_core::unwind::halt_unwinding (44 samples, 17.12%)</title><rect x="39.2996%" y="501" width="17.1206%" height="15" fill="rgb(243,110,44)" fg:x="101" fg:w="44"/><text x="39.5496%" y="511.50">rayon_core::unwind::halt_un..</text></g><g><title>std::panic::catch_unwind (44 samples, 17.12%)</title><rect x="39.2996%" y="485" width="17.1206%" height="15" fill="rgb(222,74,54)" fg:x="101" fg:w="44"/><text x="39.5496%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (44 samples, 17.12%)</title><rect x="39.2996%" y="469" width="17.1206%" height="15" fill="rgb(216,99,12)" fg:x="101" fg:w="44"/><text x="39.5496%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (44 samples, 17.12%)</title><rect x="39.2996%" y="453" width="17.1206%" height="15" fill="rgb(226,22,26)" fg:x="101" fg:w="44"/><text x="39.5496%" y="463.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (44 samples, 17.12%)</title><rect x="39.2996%" y="437" width="17.1206%" height="15" fill="rgb(217,163,10)" fg:x="101" fg:w="44"/><text x="39.5496%" y="447.50">&lt;core::panic::unwind_safe::..</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::_{{closure}} (44 samples, 17.12%)</title><rect x="39.2996%" y="421" width="17.1206%" height="15" fill="rgb(213,25,53)" fg:x="101" fg:w="44"/><text x="39.5496%" y="431.50">rayon_core::job::JobResult&lt;..</text></g><g><title>rayon_core::registry::Registry::in_worker_cold::_{{closure}}::_{{closure}} (44 samples, 17.12%)</title><rect x="39.2996%" y="405" width="17.1206%" height="15" fill="rgb(252,105,26)" fg:x="101" fg:w="44"/><text x="39.5496%" y="415.50">rayon_core::registry::Regis..</text></g><g><title>rayon_core::thread_pool::ThreadPool::install::_{{closure}} (44 samples, 17.12%)</title><rect x="39.2996%" y="389" width="17.1206%" height="15" fill="rgb(220,39,43)" fg:x="101" fg:w="44"/><text x="39.5496%" y="399.50">rayon_core::thread_pool::Th..</text></g><g><title>rayon_core::thread_pool::ThreadPool::scope::_{{closure}} (44 samples, 17.12%)</title><rect x="39.2996%" y="373" width="17.1206%" height="15" fill="rgb(229,68,48)" fg:x="101" fg:w="44"/><text x="39.5496%" y="383.50">rayon_core::thread_pool::Th..</text></g><g><title>rayon_core::scope::scope (44 samples, 17.12%)</title><rect x="39.2996%" y="357" width="17.1206%" height="15" fill="rgb(252,8,32)" fg:x="101" fg:w="44"/><text x="39.5496%" y="367.50">rayon_core::scope::scope</text></g><g><title>rayon_core::registry::in_worker (44 samples, 17.12%)</title><rect x="39.2996%" y="341" width="17.1206%" height="15" fill="rgb(223,20,43)" fg:x="101" fg:w="44"/><text x="39.5496%" y="351.50">rayon_core::registry::in_wo..</text></g><g><title>rayon_core::scope::scope::_{{closure}} (44 samples, 17.12%)</title><rect x="39.2996%" y="325" width="17.1206%" height="15" fill="rgb(229,81,49)" fg:x="101" fg:w="44"/><text x="39.5496%" y="335.50">rayon_core::scope::scope::_..</text></g><g><title>rayon_core::scope::ScopeBase::complete (44 samples, 17.12%)</title><rect x="39.2996%" y="309" width="17.1206%" height="15" fill="rgb(236,28,36)" fg:x="101" fg:w="44"/><text x="39.5496%" y="319.50">rayon_core::scope::ScopeBas..</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (44 samples, 17.12%)</title><rect x="39.2996%" y="293" width="17.1206%" height="15" fill="rgb(249,185,26)" fg:x="101" fg:w="44"/><text x="39.5496%" y="303.50">rayon_core::scope::ScopeBas..</text></g><g><title>rayon_core::unwind::halt_unwinding (44 samples, 17.12%)</title><rect x="39.2996%" y="277" width="17.1206%" height="15" fill="rgb(249,174,33)" fg:x="101" fg:w="44"/><text x="39.5496%" y="287.50">rayon_core::unwind::halt_un..</text></g><g><title>std::panic::catch_unwind (44 samples, 17.12%)</title><rect x="39.2996%" y="261" width="17.1206%" height="15" fill="rgb(233,201,37)" fg:x="101" fg:w="44"/><text x="39.5496%" y="271.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (44 samples, 17.12%)</title><rect x="39.2996%" y="245" width="17.1206%" height="15" fill="rgb(221,78,26)" fg:x="101" fg:w="44"/><text x="39.5496%" y="255.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (44 samples, 17.12%)</title><rect x="39.2996%" y="229" width="17.1206%" height="15" fill="rgb(250,127,30)" fg:x="101" fg:w="44"/><text x="39.5496%" y="239.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (44 samples, 17.12%)</title><rect x="39.2996%" y="213" width="17.1206%" height="15" fill="rgb(230,49,44)" fg:x="101" fg:w="44"/><text x="39.5496%" y="223.50">&lt;core::panic::unwind_safe::..</text></g><g><title>rayon_core::scope::scope::_{{closure}}::_{{closure}} (44 samples, 17.12%)</title><rect x="39.2996%" y="197" width="17.1206%" height="15" fill="rgb(229,67,23)" fg:x="101" fg:w="44"/><text x="39.5496%" y="207.50">rayon_core::scope::scope::_..</text></g><g><title>julia::generate_image_buffer::_{{closure}} (44 samples, 17.12%)</title><rect x="39.2996%" y="181" width="17.1206%" height="15" fill="rgb(249,83,47)" fg:x="101" fg:w="44"/><text x="39.5496%" y="191.50">julia::generate_image_buffe..</text></g><g><title>rayon_core::scope::Scope::spawn (31 samples, 12.06%)</title><rect x="44.3580%" y="165" width="12.0623%" height="15" fill="rgb(215,43,3)" fg:x="114" fg:w="31"/><text x="44.6080%" y="175.50">rayon_core::scope:..</text></g><g><title>rayon_core::registry::Registry::inject_or_push (9 samples, 3.50%)</title><rect x="52.9183%" y="149" width="3.5019%" height="15" fill="rgb(238,154,13)" fg:x="136" fg:w="9"/><text x="53.1683%" y="159.50">ray..</text></g><g><title>rayon_core::registry::WorkerThread::push (7 samples, 2.72%)</title><rect x="53.6965%" y="133" width="2.7237%" height="15" fill="rgb(219,56,2)" fg:x="138" fg:w="7"/><text x="53.9465%" y="143.50">ra..</text></g><g><title>rayon_core::sleep::Sleep::new_internal_jobs (2 samples, 0.78%)</title><rect x="55.6420%" y="117" width="0.7782%" height="15" fill="rgb(233,0,4)" fg:x="143" fg:w="2"/><text x="55.8920%" y="127.50"></text></g><g><title>rayon_core::sleep::Sleep::new_jobs (2 samples, 0.78%)</title><rect x="55.6420%" y="101" width="0.7782%" height="15" fill="rgb(235,30,7)" fg:x="143" fg:w="2"/><text x="55.8920%" y="111.50"></text></g><g><title>rayon_core::sleep::counters::AtomicCounters::increment_jobs_event_counter_if (2 samples, 0.78%)</title><rect x="55.6420%" y="85" width="0.7782%" height="15" fill="rgb(250,79,13)" fg:x="143" fg:w="2"/><text x="55.8920%" y="95.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.39%)</title><rect x="56.0311%" y="69" width="0.3891%" height="15" fill="rgb(211,146,34)" fg:x="144" fg:w="1"/><text x="56.2811%" y="79.50"></text></g><g><title>rayon_core::sleep::counters::JobsEventCounter::is_sleepy (1 samples, 0.39%)</title><rect x="56.0311%" y="53" width="0.3891%" height="15" fill="rgb(228,22,38)" fg:x="144" fg:w="1"/><text x="56.2811%" y="63.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.39%)</title><rect x="56.4202%" y="533" width="0.3891%" height="15" fill="rgb(235,168,5)" fg:x="145" fg:w="1"/><text x="56.6702%" y="543.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.39%)</title><rect x="56.4202%" y="517" width="0.3891%" height="15" fill="rgb(221,155,16)" fg:x="145" fg:w="1"/><text x="56.6702%" y="527.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (123 samples, 47.86%)</title><rect x="14.0078%" y="565" width="47.8599%" height="15" fill="rgb(215,215,53)" fg:x="36" fg:w="123"/><text x="14.2578%" y="575.50">rayon_core::registry::WorkerThread::execute</text></g><g><title>rayon_core::job::JobRef::execute (123 samples, 47.86%)</title><rect x="14.0078%" y="549" width="47.8599%" height="15" fill="rgb(223,4,10)" fg:x="36" fg:w="123"/><text x="14.2578%" y="559.50">rayon_core::job::JobRef::execute</text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 5.06%)</title><rect x="56.8093%" y="533" width="5.0584%" height="15" fill="rgb(234,103,6)" fg:x="146" fg:w="13"/><text x="57.0593%" y="543.50">cfree@..</text></g><g><title>_int_free (12 samples, 4.67%)</title><rect x="57.1984%" y="517" width="4.6693%" height="15" fill="rgb(227,97,0)" fg:x="147" fg:w="12"/><text x="57.4484%" y="527.50">_int_..</text></g><g><title>rayon_core::registry::Registry::pop_injected_job (2 samples, 0.78%)</title><rect x="61.8677%" y="517" width="0.7782%" height="15" fill="rgb(234,150,53)" fg:x="159" fg:w="2"/><text x="62.1177%" y="527.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (2 samples, 0.78%)</title><rect x="61.8677%" y="501" width="0.7782%" height="15" fill="rgb(228,201,54)" fg:x="159" fg:w="2"/><text x="62.1177%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.78%)</title><rect x="61.8677%" y="485" width="0.7782%" height="15" fill="rgb(222,22,37)" fg:x="159" fg:w="2"/><text x="62.1177%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.78%)</title><rect x="61.8677%" y="469" width="0.7782%" height="15" fill="rgb(237,53,32)" fg:x="159" fg:w="2"/><text x="62.1177%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::guard::Guard&gt; (1 samples, 0.39%)</title><rect x="63.4241%" y="373" width="0.3891%" height="15" fill="rgb(233,25,53)" fg:x="163" fg:w="1"/><text x="63.6741%" y="383.50"></text></g><g><title>&lt;crossbeam_epoch::guard::Guard as core::ops::drop::Drop&gt;::drop (1 samples, 0.39%)</title><rect x="63.4241%" y="357" width="0.3891%" height="15" fill="rgb(210,40,34)" fg:x="163" fg:w="1"/><text x="63.6741%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::as_ref (1 samples, 0.39%)</title><rect x="63.4241%" y="341" width="0.3891%" height="15" fill="rgb(241,220,44)" fg:x="163" fg:w="1"/><text x="63.6741%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (13 samples, 5.06%)</title><rect x="63.8132%" y="373" width="5.0584%" height="15" fill="rgb(235,28,35)" fg:x="164" fg:w="13"/><text x="64.0632%" y="383.50">core::..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (13 samples, 5.06%)</title><rect x="63.8132%" y="357" width="5.0584%" height="15" fill="rgb(210,56,17)" fg:x="164" fg:w="13"/><text x="64.0632%" y="367.50">core::..</text></g><g><title>crossbeam_deque::deque::Buffer&lt;T&gt;::read (4 samples, 1.56%)</title><rect x="68.8716%" y="373" width="1.5564%" height="15" fill="rgb(224,130,29)" fg:x="177" fg:w="4"/><text x="69.1216%" y="383.50"></text></g><g><title>core::ptr::read_volatile (4 samples, 1.56%)</title><rect x="68.8716%" y="357" width="1.5564%" height="15" fill="rgb(235,212,8)" fg:x="177" fg:w="4"/><text x="69.1216%" y="367.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (2 samples, 0.78%)</title><rect x="70.4280%" y="373" width="0.7782%" height="15" fill="rgb(223,33,50)" fg:x="181" fg:w="2"/><text x="70.6780%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.78%)</title><rect x="70.4280%" y="357" width="0.7782%" height="15" fill="rgb(219,149,13)" fg:x="181" fg:w="2"/><text x="70.6780%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.78%)</title><rect x="70.4280%" y="341" width="0.7782%" height="15" fill="rgb(250,156,29)" fg:x="181" fg:w="2"/><text x="70.6780%" y="351.50"></text></g><g><title>crossbeam_epoch::atomic::Shared&lt;T&gt;::deref (1 samples, 0.39%)</title><rect x="71.2062%" y="373" width="0.3891%" height="15" fill="rgb(216,193,19)" fg:x="183" fg:w="1"/><text x="71.4562%" y="383.50"></text></g><g><title>crossbeam_epoch::atomic::decompose_tag (1 samples, 0.39%)</title><rect x="71.2062%" y="357" width="0.3891%" height="15" fill="rgb(216,135,14)" fg:x="183" fg:w="1"/><text x="71.4562%" y="367.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (9 samples, 3.50%)</title><rect x="71.5953%" y="373" width="3.5019%" height="15" fill="rgb(241,47,5)" fg:x="184" fg:w="9"/><text x="71.8453%" y="383.50">cro..</text></g><g><title>crossbeam_epoch::default::with_handle (9 samples, 3.50%)</title><rect x="71.5953%" y="357" width="3.5019%" height="15" fill="rgb(233,42,35)" fg:x="184" fg:w="9"/><text x="71.8453%" y="367.50">cro..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9 samples, 3.50%)</title><rect x="71.5953%" y="341" width="3.5019%" height="15" fill="rgb(231,13,6)" fg:x="184" fg:w="9"/><text x="71.8453%" y="351.50">std..</text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (9 samples, 3.50%)</title><rect x="71.5953%" y="325" width="3.5019%" height="15" fill="rgb(207,181,40)" fg:x="184" fg:w="9"/><text x="71.8453%" y="335.50">cro..</text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (9 samples, 3.50%)</title><rect x="71.5953%" y="309" width="3.5019%" height="15" fill="rgb(254,173,49)" fg:x="184" fg:w="9"/><text x="71.8453%" y="319.50">std..</text></g><g><title>std::sys::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (9 samples, 3.50%)</title><rect x="71.5953%" y="293" width="3.5019%" height="15" fill="rgb(221,1,38)" fg:x="184" fg:w="9"/><text x="71.8453%" y="303.50">std..</text></g><g><title>core::option::Option&lt;T&gt;::as_ref (9 samples, 3.50%)</title><rect x="71.5953%" y="277" width="3.5019%" height="15" fill="rgb(206,124,46)" fg:x="184" fg:w="9"/><text x="71.8453%" y="287.50">cor..</text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.39%)</title><rect x="75.0973%" y="261" width="0.3891%" height="15" fill="rgb(249,21,11)" fg:x="193" fg:w="1"/><text x="75.3473%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (32 samples, 12.45%)</title><rect x="63.4241%" y="421" width="12.4514%" height="15" fill="rgb(222,201,40)" fg:x="163" fg:w="32"/><text x="63.6741%" y="431.50">core::iter::traits:..</text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (32 samples, 12.45%)</title><rect x="63.4241%" y="405" width="12.4514%" height="15" fill="rgb(235,61,29)" fg:x="163" fg:w="32"/><text x="63.6741%" y="415.50">rayon_core::registr..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (32 samples, 12.45%)</title><rect x="63.4241%" y="389" width="12.4514%" height="15" fill="rgb(219,207,3)" fg:x="163" fg:w="32"/><text x="63.6741%" y="399.50">crossbeam_deque::de..</text></g><g><title>crossbeam_epoch::default::pin (2 samples, 0.78%)</title><rect x="75.0973%" y="373" width="0.7782%" height="15" fill="rgb(222,56,46)" fg:x="193" fg:w="2"/><text x="75.3473%" y="383.50"></text></g><g><title>crossbeam_epoch::default::with_handle (2 samples, 0.78%)</title><rect x="75.0973%" y="357" width="0.7782%" height="15" fill="rgb(239,76,54)" fg:x="193" fg:w="2"/><text x="75.3473%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.78%)</title><rect x="75.0973%" y="341" width="0.7782%" height="15" fill="rgb(231,124,27)" fg:x="193" fg:w="2"/><text x="75.3473%" y="351.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (2 samples, 0.78%)</title><rect x="75.0973%" y="325" width="0.7782%" height="15" fill="rgb(249,195,6)" fg:x="193" fg:w="2"/><text x="75.3473%" y="335.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (2 samples, 0.78%)</title><rect x="75.0973%" y="309" width="0.7782%" height="15" fill="rgb(237,174,47)" fg:x="193" fg:w="2"/><text x="75.3473%" y="319.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (2 samples, 0.78%)</title><rect x="75.0973%" y="293" width="0.7782%" height="15" fill="rgb(206,201,31)" fg:x="193" fg:w="2"/><text x="75.3473%" y="303.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (2 samples, 0.78%)</title><rect x="75.0973%" y="277" width="0.7782%" height="15" fill="rgb(231,57,52)" fg:x="193" fg:w="2"/><text x="75.3473%" y="287.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.39%)</title><rect x="75.4864%" y="261" width="0.3891%" height="15" fill="rgb(248,177,22)" fg:x="194" fg:w="1"/><text x="75.7364%" y="271.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (1 samples, 0.39%)</title><rect x="75.4864%" y="245" width="0.3891%" height="15" fill="rgb(215,211,37)" fg:x="194" fg:w="1"/><text x="75.7364%" y="255.50"></text></g><g><title>crossbeam_epoch::sync::list::List&lt;T,C&gt;::iter (1 samples, 0.39%)</title><rect x="75.4864%" y="229" width="0.3891%" height="15" fill="rgb(241,128,51)" fg:x="194" fg:w="1"/><text x="75.7364%" y="239.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (1 samples, 0.39%)</title><rect x="75.4864%" y="213" width="0.3891%" height="15" fill="rgb(227,165,31)" fg:x="194" fg:w="1"/><text x="75.7364%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.39%)</title><rect x="75.4864%" y="197" width="0.3891%" height="15" fill="rgb(228,167,24)" fg:x="194" fg:w="1"/><text x="75.7364%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.39%)</title><rect x="75.4864%" y="181" width="0.3891%" height="15" fill="rgb(228,143,12)" fg:x="194" fg:w="1"/><text x="75.7364%" y="191.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (35 samples, 13.62%)</title><rect x="62.6459%" y="437" width="13.6187%" height="15" fill="rgb(249,149,8)" fg:x="161" fg:w="35"/><text x="62.8959%" y="447.50">core::iter::adapters:..</text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (1 samples, 0.39%)</title><rect x="75.8755%" y="421" width="0.3891%" height="15" fill="rgb(243,35,44)" fg:x="195" fg:w="1"/><text x="76.1255%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (2 samples, 0.78%)</title><rect x="76.2646%" y="357" width="0.7782%" height="15" fill="rgb(246,89,9)" fg:x="196" fg:w="2"/><text x="76.5146%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (2 samples, 0.78%)</title><rect x="76.2646%" y="341" width="0.7782%" height="15" fill="rgb(233,213,13)" fg:x="196" fg:w="2"/><text x="76.5146%" y="351.50"></text></g><g><title>crossbeam_deque::deque::Buffer&lt;T&gt;::read (1 samples, 0.39%)</title><rect x="77.0428%" y="357" width="0.3891%" height="15" fill="rgb(233,141,41)" fg:x="198" fg:w="1"/><text x="77.2928%" y="367.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.39%)</title><rect x="77.0428%" y="341" width="0.3891%" height="15" fill="rgb(239,167,4)" fg:x="198" fg:w="1"/><text x="77.2928%" y="351.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (4 samples, 1.56%)</title><rect x="77.4319%" y="357" width="1.5564%" height="15" fill="rgb(209,217,16)" fg:x="199" fg:w="4"/><text x="77.6819%" y="367.50"></text></g><g><title>crossbeam_epoch::default::with_handle (4 samples, 1.56%)</title><rect x="77.4319%" y="341" width="1.5564%" height="15" fill="rgb(219,88,35)" fg:x="199" fg:w="4"/><text x="77.6819%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 1.56%)</title><rect x="77.4319%" y="325" width="1.5564%" height="15" fill="rgb(220,193,23)" fg:x="199" fg:w="4"/><text x="77.6819%" y="335.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (4 samples, 1.56%)</title><rect x="77.4319%" y="309" width="1.5564%" height="15" fill="rgb(230,90,52)" fg:x="199" fg:w="4"/><text x="77.6819%" y="319.50"></text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (4 samples, 1.56%)</title><rect x="77.4319%" y="293" width="1.5564%" height="15" fill="rgb(252,106,19)" fg:x="199" fg:w="4"/><text x="77.6819%" y="303.50"></text></g><g><title>std::sys::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (4 samples, 1.56%)</title><rect x="77.4319%" y="277" width="1.5564%" height="15" fill="rgb(206,74,20)" fg:x="199" fg:w="4"/><text x="77.6819%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (4 samples, 1.56%)</title><rect x="77.4319%" y="261" width="1.5564%" height="15" fill="rgb(230,138,44)" fg:x="199" fg:w="4"/><text x="77.6819%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (52 samples, 20.23%)</title><rect x="61.8677%" y="549" width="20.2335%" height="15" fill="rgb(235,182,43)" fg:x="159" fg:w="52"/><text x="62.1177%" y="559.50">core::option::Option&lt;T&gt;::or_else</text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (52 samples, 20.23%)</title><rect x="61.8677%" y="533" width="20.2335%" height="15" fill="rgb(242,16,51)" fg:x="159" fg:w="52"/><text x="62.1177%" y="543.50">rayon_core::registry::WorkerThre..</text></g><g><title>rayon_core::registry::WorkerThread::steal (50 samples, 19.46%)</title><rect x="62.6459%" y="517" width="19.4553%" height="15" fill="rgb(248,9,4)" fg:x="161" fg:w="50"/><text x="62.8959%" y="527.50">rayon_core::registry::WorkerTh..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (50 samples, 19.46%)</title><rect x="62.6459%" y="501" width="19.4553%" height="15" fill="rgb(210,31,22)" fg:x="161" fg:w="50"/><text x="62.8959%" y="511.50">core::iter::traits::iterator::..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (50 samples, 19.46%)</title><rect x="62.6459%" y="485" width="19.4553%" height="15" fill="rgb(239,54,39)" fg:x="161" fg:w="50"/><text x="62.8959%" y="495.50">&lt;core::iter::adapters::filter:..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (50 samples, 19.46%)</title><rect x="62.6459%" y="469" width="19.4553%" height="15" fill="rgb(230,99,41)" fg:x="161" fg:w="50"/><text x="62.8959%" y="479.50">&lt;core::iter::adapters::chain::..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (50 samples, 19.46%)</title><rect x="62.6459%" y="453" width="19.4553%" height="15" fill="rgb(253,106,12)" fg:x="161" fg:w="50"/><text x="62.8959%" y="463.50">core::iter::traits::iterator::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (15 samples, 5.84%)</title><rect x="76.2646%" y="437" width="5.8366%" height="15" fill="rgb(213,46,41)" fg:x="196" fg:w="15"/><text x="76.5146%" y="447.50">core::o..</text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (15 samples, 5.84%)</title><rect x="76.2646%" y="421" width="5.8366%" height="15" fill="rgb(215,133,35)" fg:x="196" fg:w="15"/><text x="76.5146%" y="431.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (15 samples, 5.84%)</title><rect x="76.2646%" y="405" width="5.8366%" height="15" fill="rgb(213,28,5)" fg:x="196" fg:w="15"/><text x="76.5146%" y="415.50">core::i..</text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (15 samples, 5.84%)</title><rect x="76.2646%" y="389" width="5.8366%" height="15" fill="rgb(215,77,49)" fg:x="196" fg:w="15"/><text x="76.5146%" y="399.50">rayon_c..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (15 samples, 5.84%)</title><rect x="76.2646%" y="373" width="5.8366%" height="15" fill="rgb(248,100,22)" fg:x="196" fg:w="15"/><text x="76.5146%" y="383.50">crossbe..</text></g><g><title>crossbeam_epoch::default::pin (8 samples, 3.11%)</title><rect x="78.9883%" y="357" width="3.1128%" height="15" fill="rgb(208,67,9)" fg:x="203" fg:w="8"/><text x="79.2383%" y="367.50">cro..</text></g><g><title>crossbeam_epoch::default::with_handle (8 samples, 3.11%)</title><rect x="78.9883%" y="341" width="3.1128%" height="15" fill="rgb(219,133,21)" fg:x="203" fg:w="8"/><text x="79.2383%" y="351.50">cro..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 3.11%)</title><rect x="78.9883%" y="325" width="3.1128%" height="15" fill="rgb(246,46,29)" fg:x="203" fg:w="8"/><text x="79.2383%" y="335.50">std..</text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (8 samples, 3.11%)</title><rect x="78.9883%" y="309" width="3.1128%" height="15" fill="rgb(246,185,52)" fg:x="203" fg:w="8"/><text x="79.2383%" y="319.50">cro..</text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (8 samples, 3.11%)</title><rect x="78.9883%" y="293" width="3.1128%" height="15" fill="rgb(252,136,11)" fg:x="203" fg:w="8"/><text x="79.2383%" y="303.50">cro..</text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (8 samples, 3.11%)</title><rect x="78.9883%" y="277" width="3.1128%" height="15" fill="rgb(219,138,53)" fg:x="203" fg:w="8"/><text x="79.2383%" y="287.50">cro..</text></g><g><title>crossbeam_epoch::internal::Local::pin (8 samples, 3.11%)</title><rect x="78.9883%" y="261" width="3.1128%" height="15" fill="rgb(211,51,23)" fg:x="203" fg:w="8"/><text x="79.2383%" y="271.50">cro..</text></g><g><title>core::cell::Cell&lt;T&gt;::get (8 samples, 3.11%)</title><rect x="78.9883%" y="245" width="3.1128%" height="15" fill="rgb(247,221,28)" fg:x="203" fg:w="8"/><text x="79.2383%" y="255.50">cor..</text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="81.7121%" y="229" width="0.3891%" height="15" fill="rgb(251,222,45)" fg:x="210" fg:w="1"/><text x="81.9621%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="81.7121%" y="213" width="0.3891%" height="15" fill="rgb(217,162,53)" fg:x="210" fg:w="1"/><text x="81.9621%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="81.7121%" y="197" width="0.3891%" height="15" fill="rgb(229,93,14)" fg:x="210" fg:w="1"/><text x="81.9621%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="81.7121%" y="181" width="0.3891%" height="15" fill="rgb(209,67,49)" fg:x="210" fg:w="1"/><text x="81.9621%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="81.7121%" y="165" width="0.3891%" height="15" fill="rgb(213,87,29)" fg:x="210" fg:w="1"/><text x="81.9621%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="81.7121%" y="149" width="0.3891%" height="15" fill="rgb(205,151,52)" fg:x="210" fg:w="1"/><text x="81.9621%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="81.7121%" y="133" width="0.3891%" height="15" fill="rgb(253,215,39)" fg:x="210" fg:w="1"/><text x="81.9621%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="81.7121%" y="117" width="0.3891%" height="15" fill="rgb(221,220,41)" fg:x="210" fg:w="1"/><text x="81.9621%" y="127.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (54 samples, 21.01%)</title><rect x="61.8677%" y="565" width="21.0117%" height="15" fill="rgb(218,133,21)" fg:x="159" fg:w="54"/><text x="62.1177%" y="575.50">rayon_core::registry::WorkerThrea..</text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (2 samples, 0.78%)</title><rect x="82.1012%" y="549" width="0.7782%" height="15" fill="rgb(221,193,43)" fg:x="211" fg:w="2"/><text x="82.3512%" y="559.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (2 samples, 0.78%)</title><rect x="82.1012%" y="533" width="0.7782%" height="15" fill="rgb(240,128,52)" fg:x="211" fg:w="2"/><text x="82.3512%" y="543.50"></text></g><g><title>crossbeam_epoch::default::pin (2 samples, 0.78%)</title><rect x="82.1012%" y="517" width="0.7782%" height="15" fill="rgb(253,114,12)" fg:x="211" fg:w="2"/><text x="82.3512%" y="527.50"></text></g><g><title>crossbeam_epoch::default::with_handle (2 samples, 0.78%)</title><rect x="82.1012%" y="501" width="0.7782%" height="15" fill="rgb(215,223,47)" fg:x="211" fg:w="2"/><text x="82.3512%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.78%)</title><rect x="82.1012%" y="485" width="0.7782%" height="15" fill="rgb(248,225,23)" fg:x="211" fg:w="2"/><text x="82.3512%" y="495.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (2 samples, 0.78%)</title><rect x="82.1012%" y="469" width="0.7782%" height="15" fill="rgb(250,108,0)" fg:x="211" fg:w="2"/><text x="82.3512%" y="479.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (2 samples, 0.78%)</title><rect x="82.1012%" y="453" width="0.7782%" height="15" fill="rgb(228,208,7)" fg:x="211" fg:w="2"/><text x="82.3512%" y="463.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (2 samples, 0.78%)</title><rect x="82.1012%" y="437" width="0.7782%" height="15" fill="rgb(244,45,10)" fg:x="211" fg:w="2"/><text x="82.3512%" y="447.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (2 samples, 0.78%)</title><rect x="82.1012%" y="421" width="0.7782%" height="15" fill="rgb(207,125,25)" fg:x="211" fg:w="2"/><text x="82.3512%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.39%)</title><rect x="82.4903%" y="405" width="0.3891%" height="15" fill="rgb(210,195,18)" fg:x="212" fg:w="1"/><text x="82.7403%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.39%)</title><rect x="82.8794%" y="421" width="0.3891%" height="15" fill="rgb(249,80,12)" fg:x="213" fg:w="1"/><text x="83.1294%" y="431.50"></text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (2 samples, 0.78%)</title><rect x="82.8794%" y="565" width="0.7782%" height="15" fill="rgb(221,65,9)" fg:x="213" fg:w="2"/><text x="83.1294%" y="575.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (2 samples, 0.78%)</title><rect x="82.8794%" y="549" width="0.7782%" height="15" fill="rgb(235,49,36)" fg:x="213" fg:w="2"/><text x="83.1294%" y="559.50"></text></g><g><title>crossbeam_epoch::default::pin (2 samples, 0.78%)</title><rect x="82.8794%" y="533" width="0.7782%" height="15" fill="rgb(225,32,20)" fg:x="213" fg:w="2"/><text x="83.1294%" y="543.50"></text></g><g><title>crossbeam_epoch::default::with_handle (2 samples, 0.78%)</title><rect x="82.8794%" y="517" width="0.7782%" height="15" fill="rgb(215,141,46)" fg:x="213" fg:w="2"/><text x="83.1294%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.78%)</title><rect x="82.8794%" y="501" width="0.7782%" height="15" fill="rgb(250,160,47)" fg:x="213" fg:w="2"/><text x="83.1294%" y="511.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (2 samples, 0.78%)</title><rect x="82.8794%" y="485" width="0.7782%" height="15" fill="rgb(216,222,40)" fg:x="213" fg:w="2"/><text x="83.1294%" y="495.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (2 samples, 0.78%)</title><rect x="82.8794%" y="469" width="0.7782%" height="15" fill="rgb(234,217,39)" fg:x="213" fg:w="2"/><text x="83.1294%" y="479.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (2 samples, 0.78%)</title><rect x="82.8794%" y="453" width="0.7782%" height="15" fill="rgb(207,178,40)" fg:x="213" fg:w="2"/><text x="83.1294%" y="463.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (2 samples, 0.78%)</title><rect x="82.8794%" y="437" width="0.7782%" height="15" fill="rgb(221,136,13)" fg:x="213" fg:w="2"/><text x="83.1294%" y="447.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (1 samples, 0.39%)</title><rect x="83.2685%" y="421" width="0.3891%" height="15" fill="rgb(249,199,10)" fg:x="214" fg:w="1"/><text x="83.5185%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.39%)</title><rect x="83.2685%" y="405" width="0.3891%" height="15" fill="rgb(249,222,13)" fg:x="214" fg:w="1"/><text x="83.5185%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.39%)</title><rect x="83.2685%" y="389" width="0.3891%" height="15" fill="rgb(244,185,38)" fg:x="214" fg:w="1"/><text x="83.5185%" y="399.50"></text></g><g><title>rayon_core::sleep::Sleep::no_work_found (13 samples, 5.06%)</title><rect x="83.6576%" y="565" width="5.0584%" height="15" fill="rgb(236,202,9)" fg:x="215" fg:w="13"/><text x="83.9076%" y="575.50">rayon_..</text></g><g><title>__sched_yield (13 samples, 5.06%)</title><rect x="83.6576%" y="549" width="5.0584%" height="15" fill="rgb(250,229,37)" fg:x="215" fg:w="13"/><text x="83.9076%" y="559.50">__sche..</text></g><g><title>[unknown] (13 samples, 5.06%)</title><rect x="83.6576%" y="533" width="5.0584%" height="15" fill="rgb(206,174,23)" fg:x="215" fg:w="13"/><text x="83.9076%" y="543.50">[unkno..</text></g><g><title>[unknown] (12 samples, 4.67%)</title><rect x="84.0467%" y="517" width="4.6693%" height="15" fill="rgb(211,33,43)" fg:x="216" fg:w="12"/><text x="84.2967%" y="527.50">[unkn..</text></g><g><title>[unknown] (12 samples, 4.67%)</title><rect x="84.0467%" y="501" width="4.6693%" height="15" fill="rgb(245,58,50)" fg:x="216" fg:w="12"/><text x="84.2967%" y="511.50">[unkn..</text></g><g><title>[unknown] (12 samples, 4.67%)</title><rect x="84.0467%" y="485" width="4.6693%" height="15" fill="rgb(244,68,36)" fg:x="216" fg:w="12"/><text x="84.2967%" y="495.50">[unkn..</text></g><g><title>[unknown] (11 samples, 4.28%)</title><rect x="84.4358%" y="469" width="4.2802%" height="15" fill="rgb(232,229,15)" fg:x="217" fg:w="11"/><text x="84.6858%" y="479.50">[unkn..</text></g><g><title>[unknown] (11 samples, 4.28%)</title><rect x="84.4358%" y="453" width="4.2802%" height="15" fill="rgb(254,30,23)" fg:x="217" fg:w="11"/><text x="84.6858%" y="463.50">[unkn..</text></g><g><title>[unknown] (5 samples, 1.95%)</title><rect x="86.7704%" y="437" width="1.9455%" height="15" fill="rgb(235,160,14)" fg:x="223" fg:w="5"/><text x="87.0204%" y="447.50">[..</text></g><g><title>[unknown] (3 samples, 1.17%)</title><rect x="87.5486%" y="421" width="1.1673%" height="15" fill="rgb(212,155,44)" fg:x="225" fg:w="3"/><text x="87.7986%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="88.3268%" y="405" width="0.3891%" height="15" fill="rgb(226,2,50)" fg:x="227" fg:w="1"/><text x="88.5768%" y="415.50"></text></g><g><title>rayon_core::sleep::Sleep::start_looking (9 samples, 3.50%)</title><rect x="88.7160%" y="565" width="3.5019%" height="15" fill="rgb(234,177,6)" fg:x="228" fg:w="9"/><text x="88.9660%" y="575.50">ray..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (213 samples, 82.88%)</title><rect x="13.2296%" y="821" width="82.8794%" height="15" fill="rgb(217,24,9)" fg:x="34" fg:w="213"/><text x="13.4796%" y="831.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (213 samples, 82.88%)</title><rect x="13.2296%" y="805" width="82.8794%" height="15" fill="rgb(220,13,46)" fg:x="34" fg:w="213"/><text x="13.4796%" y="815.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (213 samples, 82.88%)</title><rect x="13.2296%" y="789" width="82.8794%" height="15" fill="rgb(239,221,27)" fg:x="34" fg:w="213"/><text x="13.4796%" y="799.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (213 samples, 82.88%)</title><rect x="13.2296%" y="773" width="82.8794%" height="15" fill="rgb(222,198,25)" fg:x="34" fg:w="213"/><text x="13.4796%" y="783.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (212 samples, 82.49%)</title><rect x="13.6187%" y="757" width="82.4903%" height="15" fill="rgb(211,99,13)" fg:x="35" fg:w="212"/><text x="13.8687%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (212 samples, 82.49%)</title><rect x="13.6187%" y="741" width="82.4903%" height="15" fill="rgb(232,111,31)" fg:x="35" fg:w="212"/><text x="13.8687%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (212 samples, 82.49%)</title><rect x="13.6187%" y="725" width="82.4903%" height="15" fill="rgb(245,82,37)" fg:x="35" fg:w="212"/><text x="13.8687%" y="735.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (212 samples, 82.49%)</title><rect x="13.6187%" y="709" width="82.4903%" height="15" fill="rgb(227,149,46)" fg:x="35" fg:w="212"/><text x="13.8687%" y="719.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (212 samples, 82.49%)</title><rect x="13.6187%" y="693" width="82.4903%" height="15" fill="rgb(218,36,50)" fg:x="35" fg:w="212"/><text x="13.8687%" y="703.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (212 samples, 82.49%)</title><rect x="13.6187%" y="677" width="82.4903%" height="15" fill="rgb(226,80,48)" fg:x="35" fg:w="212"/><text x="13.8687%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}} (212 samples, 82.49%)</title><rect x="13.6187%" y="661" width="82.4903%" height="15" fill="rgb(238,224,15)" fg:x="35" fg:w="212"/><text x="13.8687%" y="671.50">&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}}</text></g><g><title>rayon_core::registry::ThreadBuilder::run (212 samples, 82.49%)</title><rect x="13.6187%" y="645" width="82.4903%" height="15" fill="rgb(241,136,10)" fg:x="35" fg:w="212"/><text x="13.8687%" y="655.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::main_loop (211 samples, 82.10%)</title><rect x="14.0078%" y="629" width="82.1012%" height="15" fill="rgb(208,32,45)" fg:x="36" fg:w="211"/><text x="14.2578%" y="639.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_out_of_work (211 samples, 82.10%)</title><rect x="14.0078%" y="613" width="82.1012%" height="15" fill="rgb(207,135,9)" fg:x="36" fg:w="211"/><text x="14.2578%" y="623.50">rayon_core::registry::WorkerThread::wait_until_out_of_work</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (211 samples, 82.10%)</title><rect x="14.0078%" y="597" width="82.1012%" height="15" fill="rgb(206,86,44)" fg:x="36" fg:w="211"/><text x="14.2578%" y="607.50">rayon_core::registry::WorkerThread::wait_until</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (211 samples, 82.10%)</title><rect x="14.0078%" y="581" width="82.1012%" height="15" fill="rgb(245,177,15)" fg:x="36" fg:w="211"/><text x="14.2578%" y="591.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon_core::sleep::Sleep::work_found (10 samples, 3.89%)</title><rect x="92.2179%" y="565" width="3.8911%" height="15" fill="rgb(206,64,50)" fg:x="237" fg:w="10"/><text x="92.4679%" y="575.50">rayo..</text></g><g><title>rayon_core::sleep::counters::AtomicCounters::sub_inactive_thread (10 samples, 3.89%)</title><rect x="92.2179%" y="549" width="3.8911%" height="15" fill="rgb(234,36,40)" fg:x="237" fg:w="10"/><text x="92.4679%" y="559.50">rayo..</text></g><g><title>rayon_core::sleep::counters::Counters::sleeping_threads (10 samples, 3.89%)</title><rect x="92.2179%" y="533" width="3.8911%" height="15" fill="rgb(213,64,8)" fg:x="237" fg:w="10"/><text x="92.4679%" y="543.50">rayo..</text></g><g><title>rayon_core::sleep::counters::select_thread (10 samples, 3.89%)</title><rect x="92.2179%" y="517" width="3.8911%" height="15" fill="rgb(210,75,36)" fg:x="237" fg:w="10"/><text x="92.4679%" y="527.50">rayo..</text></g><g><title>__mmap (4 samples, 1.56%)</title><rect x="96.1089%" y="693" width="1.5564%" height="15" fill="rgb(229,88,21)" fg:x="247" fg:w="4"/><text x="96.3589%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.56%)</title><rect x="96.1089%" y="677" width="1.5564%" height="15" fill="rgb(252,204,47)" fg:x="247" fg:w="4"/><text x="96.3589%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.56%)</title><rect x="96.1089%" y="661" width="1.5564%" height="15" fill="rgb(208,77,27)" fg:x="247" fg:w="4"/><text x="96.3589%" y="671.50"></text></g><g><title>[unknown] (3 samples, 1.17%)</title><rect x="96.4981%" y="645" width="1.1673%" height="15" fill="rgb(221,76,26)" fg:x="248" fg:w="3"/><text x="96.7481%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="97.2763%" y="629" width="0.3891%" height="15" fill="rgb(225,139,18)" fg:x="250" fg:w="1"/><text x="97.5263%" y="639.50"></text></g><g><title>malloc (5 samples, 1.95%)</title><rect x="96.1089%" y="757" width="1.9455%" height="15" fill="rgb(230,137,11)" fg:x="247" fg:w="5"/><text x="96.3589%" y="767.50">m..</text></g><g><title>tcache_init.part.0 (5 samples, 1.95%)</title><rect x="96.1089%" y="741" width="1.9455%" height="15" fill="rgb(212,28,1)" fg:x="247" fg:w="5"/><text x="96.3589%" y="751.50">t..</text></g><g><title>arena_get2.part.0 (5 samples, 1.95%)</title><rect x="96.1089%" y="725" width="1.9455%" height="15" fill="rgb(248,164,17)" fg:x="247" fg:w="5"/><text x="96.3589%" y="735.50">a..</text></g><g><title>alloc_new_heap (5 samples, 1.95%)</title><rect x="96.1089%" y="709" width="1.9455%" height="15" fill="rgb(222,171,42)" fg:x="247" fg:w="5"/><text x="96.3589%" y="719.50">a..</text></g><g><title>__munmap (1 samples, 0.39%)</title><rect x="97.6654%" y="693" width="0.3891%" height="15" fill="rgb(243,84,45)" fg:x="251" fg:w="1"/><text x="97.9154%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="97.6654%" y="677" width="0.3891%" height="15" fill="rgb(252,49,23)" fg:x="251" fg:w="1"/><text x="97.9154%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="97.6654%" y="661" width="0.3891%" height="15" fill="rgb(215,19,7)" fg:x="251" fg:w="1"/><text x="97.9154%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="97.6654%" y="645" width="0.3891%" height="15" fill="rgb(238,81,41)" fg:x="251" fg:w="1"/><text x="97.9154%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="97.6654%" y="629" width="0.3891%" height="15" fill="rgb(210,199,37)" fg:x="251" fg:w="1"/><text x="97.9154%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="97.6654%" y="613" width="0.3891%" height="15" fill="rgb(244,192,49)" fg:x="251" fg:w="1"/><text x="97.9154%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="97.6654%" y="597" width="0.3891%" height="15" fill="rgb(226,211,11)" fg:x="251" fg:w="1"/><text x="97.9154%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.39%)</title><rect x="97.6654%" y="581" width="0.3891%" height="15" fill="rgb(236,162,54)" fg:x="251" fg:w="1"/><text x="97.9154%" y="591.50"></text></g><g><title>pthread_attr_init@@GLIBC_2.2.5 (3 samples, 1.17%)</title><rect x="98.0545%" y="757" width="1.1673%" height="15" fill="rgb(220,229,9)" fg:x="252" fg:w="3"/><text x="98.3045%" y="767.50"></text></g><g><title>__getpagesize (3 samples, 1.17%)</title><rect x="98.0545%" y="741" width="1.1673%" height="15" fill="rgb(250,87,22)" fg:x="252" fg:w="3"/><text x="98.3045%" y="751.50"></text></g><g><title>all (257 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="257"/><text x="0.2500%" y="911.50"></text></g><g><title>julia (257 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="257"/><text x="0.2500%" y="895.50">julia</text></g><g><title>clone3 (236 samples, 91.83%)</title><rect x="8.1712%" y="869" width="91.8288%" height="15" fill="rgb(219,179,1)" fg:x="21" fg:w="236"/><text x="8.4212%" y="879.50">clone3</text></g><g><title>start_thread (236 samples, 91.83%)</title><rect x="8.1712%" y="853" width="91.8288%" height="15" fill="rgb(238,219,53)" fg:x="21" fg:w="236"/><text x="8.4212%" y="863.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (223 samples, 86.77%)</title><rect x="13.2296%" y="837" width="86.7704%" height="15" fill="rgb(232,167,36)" fg:x="34" fg:w="223"/><text x="13.4796%" y="847.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (10 samples, 3.89%)</title><rect x="96.1089%" y="821" width="3.8911%" height="15" fill="rgb(244,19,51)" fg:x="247" fg:w="10"/><text x="96.3589%" y="831.50">std:..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (10 samples, 3.89%)</title><rect x="96.1089%" y="805" width="3.8911%" height="15" fill="rgb(224,6,22)" fg:x="247" fg:w="10"/><text x="96.3589%" y="815.50">std:..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::current_guard (10 samples, 3.89%)</title><rect x="96.1089%" y="789" width="3.8911%" height="15" fill="rgb(224,145,5)" fg:x="247" fg:w="10"/><text x="96.3589%" y="799.50">std:..</text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (10 samples, 3.89%)</title><rect x="96.1089%" y="773" width="3.8911%" height="15" fill="rgb(234,130,49)" fg:x="247" fg:w="10"/><text x="96.3589%" y="783.50">pthr..</text></g><g><title>realloc (2 samples, 0.78%)</title><rect x="99.2218%" y="757" width="0.7782%" height="15" fill="rgb(254,6,2)" fg:x="255" fg:w="2"/><text x="99.4718%" y="767.50"></text></g></svg></svg>