<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="36882"><g><title>[unknown] (4,960 samples, 13.45%)</title><rect x="5.1977%" y="741" width="13.4483%" height="15" fill="rgb(227,0,7)" fg:x="1917" fg:w="4960"/><text x="5.4477%" y="751.50">[unknown]</text></g><g><title>[unknown] (1,010 samples, 2.74%)</title><rect x="15.9075%" y="725" width="2.7385%" height="15" fill="rgb(217,0,24)" fg:x="5867" fg:w="1010"/><text x="16.1575%" y="735.50">[u..</text></g><g><title>[unknown] (429 samples, 1.16%)</title><rect x="17.4828%" y="709" width="1.1632%" height="15" fill="rgb(221,193,54)" fg:x="6448" fg:w="429"/><text x="17.7328%" y="719.50"></text></g><g><title>[unknown] (85 samples, 0.23%)</title><rect x="18.4155%" y="693" width="0.2305%" height="15" fill="rgb(248,212,6)" fg:x="6792" fg:w="85"/><text x="18.6655%" y="703.50"></text></g><g><title>[unknown] (28 samples, 0.08%)</title><rect x="18.5700%" y="677" width="0.0759%" height="15" fill="rgb(208,68,35)" fg:x="6849" fg:w="28"/><text x="18.8200%" y="687.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="18.6270%" y="661" width="0.0190%" height="15" fill="rgb(232,128,0)" fg:x="6870" fg:w="7"/><text x="18.8770%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="18.6297%" y="645" width="0.0163%" height="15" fill="rgb(207,160,47)" fg:x="6871" fg:w="6"/><text x="18.8797%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="18.6297%" y="629" width="0.0163%" height="15" fill="rgb(228,23,34)" fg:x="6871" fg:w="6"/><text x="18.8797%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="18.6324%" y="613" width="0.0136%" height="15" fill="rgb(218,30,26)" fg:x="6872" fg:w="5"/><text x="18.8824%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="18.6351%" y="597" width="0.0108%" height="15" fill="rgb(220,122,19)" fg:x="6873" fg:w="4"/><text x="18.8851%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="18.6351%" y="581" width="0.0108%" height="15" fill="rgb(250,228,42)" fg:x="6873" fg:w="4"/><text x="18.8851%" y="591.50"></text></g><g><title>[unknown] (6,878 samples, 18.65%)</title><rect x="0.0000%" y="757" width="18.6487%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6878"/><text x="0.2500%" y="767.50">[unknown]</text></g><g><title>__GI___sigaltstack (20 samples, 0.05%)</title><rect x="18.6568%" y="757" width="0.0542%" height="15" fill="rgb(216,20,37)" fg:x="6881" fg:w="20"/><text x="18.9068%" y="767.50"></text></g><g><title>[unknown] (20 samples, 0.05%)</title><rect x="18.6568%" y="741" width="0.0542%" height="15" fill="rgb(206,188,39)" fg:x="6881" fg:w="20"/><text x="18.9068%" y="751.50"></text></g><g><title>__getpagesize (10 samples, 0.03%)</title><rect x="18.7110%" y="757" width="0.0271%" height="15" fill="rgb(217,207,13)" fg:x="6901" fg:w="10"/><text x="18.9610%" y="767.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="18.7110%" y="741" width="0.0271%" height="15" fill="rgb(231,73,38)" fg:x="6901" fg:w="10"/><text x="18.9610%" y="751.50"></text></g><g><title>__munmap (9 samples, 0.02%)</title><rect x="18.7408%" y="757" width="0.0244%" height="15" fill="rgb(225,20,46)" fg:x="6912" fg:w="9"/><text x="18.9908%" y="767.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="18.7408%" y="741" width="0.0244%" height="15" fill="rgb(210,31,41)" fg:x="6912" fg:w="9"/><text x="18.9908%" y="751.50"></text></g><g><title>__GI__dl_deallocate_tls (19 samples, 0.05%)</title><rect x="18.8249%" y="165" width="0.0515%" height="15" fill="rgb(221,200,47)" fg:x="6943" fg:w="19"/><text x="19.0749%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.01%)</title><rect x="18.8629%" y="149" width="0.0136%" height="15" fill="rgb(226,26,5)" fg:x="6957" fg:w="5"/><text x="19.1129%" y="159.50"></text></g><g><title>__GI___nptl_deallocate_stack (71 samples, 0.19%)</title><rect x="18.7978%" y="197" width="0.1925%" height="15" fill="rgb(249,33,26)" fg:x="6933" fg:w="71"/><text x="19.0478%" y="207.50"></text></g><g><title>__nptl_free_stacks (64 samples, 0.17%)</title><rect x="18.8168%" y="181" width="0.1735%" height="15" fill="rgb(235,183,28)" fg:x="6940" fg:w="64"/><text x="19.0668%" y="191.50"></text></g><g><title>__munmap (42 samples, 0.11%)</title><rect x="18.8764%" y="165" width="0.1139%" height="15" fill="rgb(221,5,38)" fg:x="6962" fg:w="42"/><text x="19.1264%" y="175.50"></text></g><g><title>[unknown] (42 samples, 0.11%)</title><rect x="18.8764%" y="149" width="0.1139%" height="15" fill="rgb(247,18,42)" fg:x="6962" fg:w="42"/><text x="19.1264%" y="159.50"></text></g><g><title>[unknown] (42 samples, 0.11%)</title><rect x="18.8764%" y="133" width="0.1139%" height="15" fill="rgb(241,131,45)" fg:x="6962" fg:w="42"/><text x="19.1264%" y="143.50"></text></g><g><title>[unknown] (36 samples, 0.10%)</title><rect x="18.8927%" y="117" width="0.0976%" height="15" fill="rgb(249,31,29)" fg:x="6968" fg:w="36"/><text x="19.1427%" y="127.50"></text></g><g><title>[unknown] (31 samples, 0.08%)</title><rect x="18.9062%" y="101" width="0.0841%" height="15" fill="rgb(225,111,53)" fg:x="6973" fg:w="31"/><text x="19.1562%" y="111.50"></text></g><g><title>[unknown] (28 samples, 0.08%)</title><rect x="18.9144%" y="85" width="0.0759%" height="15" fill="rgb(238,160,17)" fg:x="6976" fg:w="28"/><text x="19.1644%" y="95.50"></text></g><g><title>[unknown] (24 samples, 0.07%)</title><rect x="18.9252%" y="69" width="0.0651%" height="15" fill="rgb(214,148,48)" fg:x="6980" fg:w="24"/><text x="19.1752%" y="79.50"></text></g><g><title>[unknown] (17 samples, 0.05%)</title><rect x="18.9442%" y="53" width="0.0461%" height="15" fill="rgb(232,36,49)" fg:x="6987" fg:w="17"/><text x="19.1942%" y="63.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="18.9632%" y="37" width="0.0271%" height="15" fill="rgb(209,103,24)" fg:x="6994" fg:w="10"/><text x="19.2132%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (81 samples, 0.22%)</title><rect x="18.7815%" y="309" width="0.2196%" height="15" fill="rgb(229,88,8)" fg:x="6927" fg:w="81"/><text x="19.0315%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (81 samples, 0.22%)</title><rect x="18.7815%" y="293" width="0.2196%" height="15" fill="rgb(213,181,19)" fg:x="6927" fg:w="81"/><text x="19.0315%" y="303.50"></text></g><g><title>crossbeam_utils::thread::scope::_{{closure}} (81 samples, 0.22%)</title><rect x="18.7815%" y="277" width="0.2196%" height="15" fill="rgb(254,191,54)" fg:x="6927" fg:w="81"/><text x="19.0315%" y="287.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (81 samples, 0.22%)</title><rect x="18.7815%" y="261" width="0.2196%" height="15" fill="rgb(241,83,37)" fg:x="6927" fg:w="81"/><text x="19.0315%" y="271.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (81 samples, 0.22%)</title><rect x="18.7815%" y="245" width="0.2196%" height="15" fill="rgb(233,36,39)" fg:x="6927" fg:w="81"/><text x="19.0315%" y="255.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (80 samples, 0.22%)</title><rect x="18.7842%" y="229" width="0.2169%" height="15" fill="rgb(226,3,54)" fg:x="6928" fg:w="80"/><text x="19.0342%" y="239.50"></text></g><g><title>__pthread_clockjoin_ex (80 samples, 0.22%)</title><rect x="18.7842%" y="213" width="0.2169%" height="15" fill="rgb(245,192,40)" fg:x="6928" fg:w="80"/><text x="19.0342%" y="223.50"></text></g><g><title>__GI___nptl_free_tcb (4 samples, 0.01%)</title><rect x="18.9903%" y="197" width="0.0108%" height="15" fill="rgb(238,167,29)" fg:x="7004" fg:w="4"/><text x="19.2403%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;core::option::Option&lt;std::thread::JoinHandle&lt;()&gt;&gt;&gt;&gt;&gt; (7 samples, 0.02%)</title><rect x="19.0066%" y="293" width="0.0190%" height="15" fill="rgb(232,182,51)" fg:x="7010" fg:w="7"/><text x="19.2566%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="19.0066%" y="277" width="0.0190%" height="15" fill="rgb(231,60,39)" fg:x="7010" fg:w="7"/><text x="19.2566%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.01%)</title><rect x="19.0120%" y="261" width="0.0136%" height="15" fill="rgb(208,69,12)" fg:x="7012" fg:w="5"/><text x="19.2620%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (95 samples, 0.26%)</title><rect x="18.7734%" y="453" width="0.2576%" height="15" fill="rgb(235,93,37)" fg:x="6924" fg:w="95"/><text x="19.0234%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (95 samples, 0.26%)</title><rect x="18.7734%" y="437" width="0.2576%" height="15" fill="rgb(213,116,39)" fg:x="6924" fg:w="95"/><text x="19.0234%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (95 samples, 0.26%)</title><rect x="18.7734%" y="421" width="0.2576%" height="15" fill="rgb(222,207,29)" fg:x="6924" fg:w="95"/><text x="19.0234%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (95 samples, 0.26%)</title><rect x="18.7734%" y="405" width="0.2576%" height="15" fill="rgb(206,96,30)" fg:x="6924" fg:w="95"/><text x="19.0234%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (95 samples, 0.26%)</title><rect x="18.7734%" y="389" width="0.2576%" height="15" fill="rgb(218,138,4)" fg:x="6924" fg:w="95"/><text x="19.0234%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (95 samples, 0.26%)</title><rect x="18.7734%" y="373" width="0.2576%" height="15" fill="rgb(250,191,14)" fg:x="6924" fg:w="95"/><text x="19.0234%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (95 samples, 0.26%)</title><rect x="18.7734%" y="357" width="0.2576%" height="15" fill="rgb(239,60,40)" fg:x="6924" fg:w="95"/><text x="19.0234%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (95 samples, 0.26%)</title><rect x="18.7734%" y="341" width="0.2576%" height="15" fill="rgb(206,27,48)" fg:x="6924" fg:w="95"/><text x="19.0234%" y="351.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (92 samples, 0.25%)</title><rect x="18.7815%" y="325" width="0.2494%" height="15" fill="rgb(225,35,8)" fg:x="6927" fg:w="92"/><text x="19.0315%" y="335.50"></text></g><g><title>crossbeam_utils::thread::scope::_{{closure}} (11 samples, 0.03%)</title><rect x="19.0011%" y="309" width="0.0298%" height="15" fill="rgb(250,213,24)" fg:x="7008" fg:w="11"/><text x="19.2511%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_utils::thread::ScopedJoinHandle&lt;()&gt;&gt; (4 samples, 0.01%)</title><rect x="19.0337%" y="357" width="0.0108%" height="15" fill="rgb(247,123,22)" fg:x="7020" fg:w="4"/><text x="19.2837%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::default::Default&gt;::default (10 samples, 0.03%)</title><rect x="19.0527%" y="325" width="0.0271%" height="15" fill="rgb(231,138,38)" fg:x="7027" fg:w="10"/><text x="19.3027%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (10 samples, 0.03%)</title><rect x="19.0527%" y="309" width="0.0271%" height="15" fill="rgb(231,145,46)" fg:x="7027" fg:w="10"/><text x="19.3027%" y="319.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (10 samples, 0.03%)</title><rect x="19.0527%" y="293" width="0.0271%" height="15" fill="rgb(251,118,11)" fg:x="7027" fg:w="10"/><text x="19.3027%" y="303.50"></text></g><g><title>alloc::alloc::exchange_malloc (10 samples, 0.03%)</title><rect x="19.0527%" y="277" width="0.0271%" height="15" fill="rgb(217,147,25)" fg:x="7027" fg:w="10"/><text x="19.3027%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.03%)</title><rect x="19.0527%" y="261" width="0.0271%" height="15" fill="rgb(247,81,37)" fg:x="7027" fg:w="10"/><text x="19.3027%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.03%)</title><rect x="19.0527%" y="245" width="0.0271%" height="15" fill="rgb(209,12,38)" fg:x="7027" fg:w="10"/><text x="19.3027%" y="255.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.03%)</title><rect x="19.0527%" y="229" width="0.0271%" height="15" fill="rgb(227,1,9)" fg:x="7027" fg:w="10"/><text x="19.3027%" y="239.50"></text></g><g><title>malloc (10 samples, 0.03%)</title><rect x="19.0527%" y="213" width="0.0271%" height="15" fill="rgb(248,47,43)" fg:x="7027" fg:w="10"/><text x="19.3027%" y="223.50"></text></g><g><title>_int_malloc (8 samples, 0.02%)</title><rect x="19.0581%" y="197" width="0.0217%" height="15" fill="rgb(221,10,30)" fg:x="7029" fg:w="8"/><text x="19.3081%" y="207.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (11 samples, 0.03%)</title><rect x="19.0933%" y="325" width="0.0298%" height="15" fill="rgb(210,229,1)" fg:x="7042" fg:w="11"/><text x="19.3433%" y="335.50"></text></g><g><title>alloc::alloc::exchange_malloc (10 samples, 0.03%)</title><rect x="19.0960%" y="309" width="0.0271%" height="15" fill="rgb(222,148,37)" fg:x="7043" fg:w="10"/><text x="19.3460%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.03%)</title><rect x="19.0960%" y="293" width="0.0271%" height="15" fill="rgb(234,67,33)" fg:x="7043" fg:w="10"/><text x="19.3460%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.03%)</title><rect x="19.0960%" y="277" width="0.0271%" height="15" fill="rgb(247,98,35)" fg:x="7043" fg:w="10"/><text x="19.3460%" y="287.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.03%)</title><rect x="19.0960%" y="261" width="0.0271%" height="15" fill="rgb(247,138,52)" fg:x="7043" fg:w="10"/><text x="19.3460%" y="271.50"></text></g><g><title>malloc (9 samples, 0.02%)</title><rect x="19.0987%" y="245" width="0.0244%" height="15" fill="rgb(213,79,30)" fg:x="7044" fg:w="9"/><text x="19.3487%" y="255.50"></text></g><g><title>_int_malloc (8 samples, 0.02%)</title><rect x="19.1015%" y="229" width="0.0217%" height="15" fill="rgb(246,177,23)" fg:x="7045" fg:w="8"/><text x="19.3515%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (6 samples, 0.02%)</title><rect x="19.1231%" y="325" width="0.0163%" height="15" fill="rgb(230,62,27)" fg:x="7053" fg:w="6"/><text x="19.3731%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.02%)</title><rect x="19.1231%" y="309" width="0.0163%" height="15" fill="rgb(216,154,8)" fg:x="7053" fg:w="6"/><text x="19.3731%" y="319.50"></text></g><g><title>alloc::alloc::exchange_malloc (5 samples, 0.01%)</title><rect x="19.1259%" y="293" width="0.0136%" height="15" fill="rgb(244,35,45)" fg:x="7054" fg:w="5"/><text x="19.3759%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.01%)</title><rect x="19.1259%" y="277" width="0.0136%" height="15" fill="rgb(251,115,12)" fg:x="7054" fg:w="5"/><text x="19.3759%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.01%)</title><rect x="19.1259%" y="261" width="0.0136%" height="15" fill="rgb(240,54,50)" fg:x="7054" fg:w="5"/><text x="19.3759%" y="271.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.01%)</title><rect x="19.1259%" y="245" width="0.0136%" height="15" fill="rgb(233,84,52)" fg:x="7054" fg:w="5"/><text x="19.3759%" y="255.50"></text></g><g><title>malloc (5 samples, 0.01%)</title><rect x="19.1259%" y="229" width="0.0136%" height="15" fill="rgb(207,117,47)" fg:x="7054" fg:w="5"/><text x="19.3759%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (15 samples, 0.04%)</title><rect x="19.1448%" y="277" width="0.0407%" height="15" fill="rgb(249,43,39)" fg:x="7061" fg:w="15"/><text x="19.3948%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.04%)</title><rect x="19.1476%" y="261" width="0.0380%" height="15" fill="rgb(209,38,44)" fg:x="7062" fg:w="14"/><text x="19.3976%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.04%)</title><rect x="19.1476%" y="245" width="0.0380%" height="15" fill="rgb(236,212,23)" fg:x="7062" fg:w="14"/><text x="19.3976%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.04%)</title><rect x="19.1476%" y="229" width="0.0380%" height="15" fill="rgb(242,79,21)" fg:x="7062" fg:w="14"/><text x="19.3976%" y="239.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.04%)</title><rect x="19.1476%" y="213" width="0.0380%" height="15" fill="rgb(211,96,35)" fg:x="7062" fg:w="14"/><text x="19.3976%" y="223.50"></text></g><g><title>malloc (13 samples, 0.04%)</title><rect x="19.1503%" y="197" width="0.0352%" height="15" fill="rgb(253,215,40)" fg:x="7063" fg:w="13"/><text x="19.4003%" y="207.50"></text></g><g><title>_int_malloc (7 samples, 0.02%)</title><rect x="19.1665%" y="181" width="0.0190%" height="15" fill="rgb(211,81,21)" fg:x="7069" fg:w="7"/><text x="19.4165%" y="191.50"></text></g><g><title>malloc (8 samples, 0.02%)</title><rect x="19.1882%" y="181" width="0.0217%" height="15" fill="rgb(208,190,38)" fg:x="7077" fg:w="8"/><text x="19.4382%" y="191.50"></text></g><g><title>_int_malloc (8 samples, 0.02%)</title><rect x="19.1882%" y="165" width="0.0217%" height="15" fill="rgb(235,213,38)" fg:x="7077" fg:w="8"/><text x="19.4382%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (10 samples, 0.03%)</title><rect x="19.1855%" y="277" width="0.0271%" height="15" fill="rgb(237,122,38)" fg:x="7076" fg:w="10"/><text x="19.4355%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (10 samples, 0.03%)</title><rect x="19.1855%" y="261" width="0.0271%" height="15" fill="rgb(244,218,35)" fg:x="7076" fg:w="10"/><text x="19.4355%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (9 samples, 0.02%)</title><rect x="19.1882%" y="245" width="0.0244%" height="15" fill="rgb(240,68,47)" fg:x="7077" fg:w="9"/><text x="19.4382%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.02%)</title><rect x="19.1882%" y="229" width="0.0244%" height="15" fill="rgb(210,16,53)" fg:x="7077" fg:w="9"/><text x="19.4382%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.02%)</title><rect x="19.1882%" y="213" width="0.0244%" height="15" fill="rgb(235,124,12)" fg:x="7077" fg:w="9"/><text x="19.4382%" y="223.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.02%)</title><rect x="19.1882%" y="197" width="0.0244%" height="15" fill="rgb(224,169,11)" fg:x="7077" fg:w="9"/><text x="19.4382%" y="207.50"></text></g><g><title>std::io::stdio::set_output_capture (8 samples, 0.02%)</title><rect x="19.2153%" y="277" width="0.0217%" height="15" fill="rgb(250,166,2)" fg:x="7087" fg:w="8"/><text x="19.4653%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9 samples, 0.02%)</title><rect x="19.2452%" y="261" width="0.0244%" height="15" fill="rgb(242,216,29)" fg:x="7098" fg:w="9"/><text x="19.4952%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (9 samples, 0.02%)</title><rect x="19.2452%" y="245" width="0.0244%" height="15" fill="rgb(230,116,27)" fg:x="7098" fg:w="9"/><text x="19.4952%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.02%)</title><rect x="19.2479%" y="229" width="0.0217%" height="15" fill="rgb(228,99,48)" fg:x="7099" fg:w="8"/><text x="19.4979%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.02%)</title><rect x="19.2479%" y="213" width="0.0217%" height="15" fill="rgb(253,11,6)" fg:x="7099" fg:w="8"/><text x="19.4979%" y="223.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.02%)</title><rect x="19.2479%" y="197" width="0.0217%" height="15" fill="rgb(247,143,39)" fg:x="7099" fg:w="8"/><text x="19.4979%" y="207.50"></text></g><g><title>malloc (7 samples, 0.02%)</title><rect x="19.2506%" y="181" width="0.0190%" height="15" fill="rgb(236,97,10)" fg:x="7100" fg:w="7"/><text x="19.5006%" y="191.50"></text></g><g><title>pthread_attr_init@@GLIBC_2.2.5 (12 samples, 0.03%)</title><rect x="19.2723%" y="261" width="0.0325%" height="15" fill="rgb(233,208,19)" fg:x="7108" fg:w="12"/><text x="19.5223%" y="271.50"></text></g><g><title>__getpagesize (9 samples, 0.02%)</title><rect x="19.2804%" y="245" width="0.0244%" height="15" fill="rgb(216,164,2)" fg:x="7111" fg:w="9"/><text x="19.5304%" y="255.50"></text></g><g><title>[unknown] (195 samples, 0.53%)</title><rect x="19.3726%" y="245" width="0.5287%" height="15" fill="rgb(220,129,5)" fg:x="7145" fg:w="195"/><text x="19.6226%" y="255.50"></text></g><g><title>[unknown] (171 samples, 0.46%)</title><rect x="19.4377%" y="229" width="0.4636%" height="15" fill="rgb(242,17,10)" fg:x="7169" fg:w="171"/><text x="19.6877%" y="239.50"></text></g><g><title>[unknown] (145 samples, 0.39%)</title><rect x="19.5082%" y="213" width="0.3931%" height="15" fill="rgb(242,107,0)" fg:x="7195" fg:w="145"/><text x="19.7582%" y="223.50"></text></g><g><title>[unknown] (114 samples, 0.31%)</title><rect x="19.5922%" y="197" width="0.3091%" height="15" fill="rgb(251,28,31)" fg:x="7226" fg:w="114"/><text x="19.8422%" y="207.50"></text></g><g><title>[unknown] (48 samples, 0.13%)</title><rect x="19.7712%" y="181" width="0.1301%" height="15" fill="rgb(233,223,10)" fg:x="7292" fg:w="48"/><text x="20.0212%" y="191.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="19.8606%" y="165" width="0.0407%" height="15" fill="rgb(215,21,27)" fg:x="7325" fg:w="15"/><text x="20.1106%" y="175.50"></text></g><g><title>__GI__dl_allocate_tls (9 samples, 0.02%)</title><rect x="19.9040%" y="245" width="0.0244%" height="15" fill="rgb(232,23,21)" fg:x="7341" fg:w="9"/><text x="20.1540%" y="255.50"></text></g><g><title>allocate_dtv (9 samples, 0.02%)</title><rect x="19.9040%" y="229" width="0.0244%" height="15" fill="rgb(244,5,23)" fg:x="7341" fg:w="9"/><text x="20.1540%" y="239.50"></text></g><g><title>__libc_calloc (8 samples, 0.02%)</title><rect x="19.9067%" y="213" width="0.0217%" height="15" fill="rgb(226,81,46)" fg:x="7342" fg:w="8"/><text x="20.1567%" y="223.50"></text></g><g><title>_int_malloc (7 samples, 0.02%)</title><rect x="19.9094%" y="197" width="0.0190%" height="15" fill="rgb(247,70,30)" fg:x="7343" fg:w="7"/><text x="20.1594%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="19.9149%" y="181" width="0.0136%" height="15" fill="rgb(212,68,19)" fg:x="7345" fg:w="5"/><text x="20.1649%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="19.9149%" y="165" width="0.0136%" height="15" fill="rgb(240,187,13)" fg:x="7345" fg:w="5"/><text x="20.1649%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="19.9149%" y="149" width="0.0136%" height="15" fill="rgb(223,113,26)" fg:x="7345" fg:w="5"/><text x="20.1649%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="19.9176%" y="133" width="0.0108%" height="15" fill="rgb(206,192,2)" fg:x="7346" fg:w="4"/><text x="20.1676%" y="143.50"></text></g><g><title>__GI__dl_allocate_tls_init (8 samples, 0.02%)</title><rect x="19.9284%" y="245" width="0.0217%" height="15" fill="rgb(241,108,4)" fg:x="7350" fg:w="8"/><text x="20.1784%" y="255.50"></text></g><g><title>__mmap (125 samples, 0.34%)</title><rect x="19.9528%" y="245" width="0.3389%" height="15" fill="rgb(247,173,49)" fg:x="7359" fg:w="125"/><text x="20.2028%" y="255.50"></text></g><g><title>[unknown] (124 samples, 0.34%)</title><rect x="19.9555%" y="229" width="0.3362%" height="15" fill="rgb(224,114,35)" fg:x="7360" fg:w="124"/><text x="20.2055%" y="239.50"></text></g><g><title>[unknown] (119 samples, 0.32%)</title><rect x="19.9691%" y="213" width="0.3227%" height="15" fill="rgb(245,159,27)" fg:x="7365" fg:w="119"/><text x="20.2191%" y="223.50"></text></g><g><title>[unknown] (100 samples, 0.27%)</title><rect x="20.0206%" y="197" width="0.2711%" height="15" fill="rgb(245,172,44)" fg:x="7384" fg:w="100"/><text x="20.2706%" y="207.50"></text></g><g><title>[unknown] (81 samples, 0.22%)</title><rect x="20.0721%" y="181" width="0.2196%" height="15" fill="rgb(236,23,11)" fg:x="7403" fg:w="81"/><text x="20.3221%" y="191.50"></text></g><g><title>[unknown] (32 samples, 0.09%)</title><rect x="20.2050%" y="165" width="0.0868%" height="15" fill="rgb(205,117,38)" fg:x="7452" fg:w="32"/><text x="20.4550%" y="175.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="20.2592%" y="149" width="0.0325%" height="15" fill="rgb(237,72,25)" fg:x="7472" fg:w="12"/><text x="20.5092%" y="159.50"></text></g><g><title>__mprotect (24 samples, 0.07%)</title><rect x="20.2917%" y="245" width="0.0651%" height="15" fill="rgb(244,70,9)" fg:x="7484" fg:w="24"/><text x="20.5417%" y="255.50"></text></g><g><title>[unknown] (24 samples, 0.07%)</title><rect x="20.2917%" y="229" width="0.0651%" height="15" fill="rgb(217,125,39)" fg:x="7484" fg:w="24"/><text x="20.5417%" y="239.50"></text></g><g><title>[unknown] (23 samples, 0.06%)</title><rect x="20.2945%" y="213" width="0.0624%" height="15" fill="rgb(235,36,10)" fg:x="7485" fg:w="23"/><text x="20.5445%" y="223.50"></text></g><g><title>[unknown] (22 samples, 0.06%)</title><rect x="20.2972%" y="197" width="0.0596%" height="15" fill="rgb(251,123,47)" fg:x="7486" fg:w="22"/><text x="20.5472%" y="207.50"></text></g><g><title>[unknown] (21 samples, 0.06%)</title><rect x="20.2999%" y="181" width="0.0569%" height="15" fill="rgb(221,13,13)" fg:x="7487" fg:w="21"/><text x="20.5499%" y="191.50"></text></g><g><title>[unknown] (17 samples, 0.05%)</title><rect x="20.3107%" y="165" width="0.0461%" height="15" fill="rgb(238,131,9)" fg:x="7491" fg:w="17"/><text x="20.5607%" y="175.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="20.3324%" y="149" width="0.0244%" height="15" fill="rgb(211,50,8)" fg:x="7499" fg:w="9"/><text x="20.5824%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="20.3460%" y="133" width="0.0108%" height="15" fill="rgb(245,182,24)" fg:x="7504" fg:w="4"/><text x="20.5960%" y="143.50"></text></g><g><title>pthread_create@GLIBC_2.2.5 (421 samples, 1.14%)</title><rect x="19.3048%" y="261" width="1.1415%" height="15" fill="rgb(242,14,37)" fg:x="7120" fg:w="421"/><text x="19.5548%" y="271.50"></text></g><g><title>create_thread (33 samples, 0.09%)</title><rect x="20.3568%" y="245" width="0.0895%" height="15" fill="rgb(246,228,12)" fg:x="7508" fg:w="33"/><text x="20.6068%" y="255.50"></text></g><g><title>__GI___clone_internal (33 samples, 0.09%)</title><rect x="20.3568%" y="229" width="0.0895%" height="15" fill="rgb(213,55,15)" fg:x="7508" fg:w="33"/><text x="20.6068%" y="239.50"></text></g><g><title>clone3 (33 samples, 0.09%)</title><rect x="20.3568%" y="213" width="0.0895%" height="15" fill="rgb(209,9,3)" fg:x="7508" fg:w="33"/><text x="20.6068%" y="223.50"></text></g><g><title>[unknown] (33 samples, 0.09%)</title><rect x="20.3568%" y="197" width="0.0895%" height="15" fill="rgb(230,59,30)" fg:x="7508" fg:w="33"/><text x="20.6068%" y="207.50"></text></g><g><title>[unknown] (33 samples, 0.09%)</title><rect x="20.3568%" y="181" width="0.0895%" height="15" fill="rgb(209,121,21)" fg:x="7508" fg:w="33"/><text x="20.6068%" y="191.50"></text></g><g><title>[unknown] (33 samples, 0.09%)</title><rect x="20.3568%" y="165" width="0.0895%" height="15" fill="rgb(220,109,13)" fg:x="7508" fg:w="33"/><text x="20.6068%" y="175.50"></text></g><g><title>[unknown] (29 samples, 0.08%)</title><rect x="20.3677%" y="149" width="0.0786%" height="15" fill="rgb(232,18,1)" fg:x="7512" fg:w="29"/><text x="20.6177%" y="159.50"></text></g><g><title>[unknown] (23 samples, 0.06%)</title><rect x="20.3839%" y="133" width="0.0624%" height="15" fill="rgb(215,41,42)" fg:x="7518" fg:w="23"/><text x="20.6339%" y="143.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="20.4056%" y="117" width="0.0407%" height="15" fill="rgb(224,123,36)" fg:x="7526" fg:w="15"/><text x="20.6556%" y="127.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (447 samples, 1.21%)</title><rect x="19.2370%" y="277" width="1.2120%" height="15" fill="rgb(240,125,3)" fg:x="7095" fg:w="447"/><text x="19.4870%" y="287.50"></text></g><g><title>_int_malloc (4 samples, 0.01%)</title><rect x="20.4680%" y="133" width="0.0108%" height="15" fill="rgb(205,98,50)" fg:x="7549" fg:w="4"/><text x="20.7180%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new_uninit::_{{closure}} (11 samples, 0.03%)</title><rect x="20.4544%" y="213" width="0.0298%" height="15" fill="rgb(205,185,37)" fg:x="7544" fg:w="11"/><text x="20.7044%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.03%)</title><rect x="20.4544%" y="197" width="0.0298%" height="15" fill="rgb(238,207,15)" fg:x="7544" fg:w="11"/><text x="20.7044%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.03%)</title><rect x="20.4544%" y="181" width="0.0298%" height="15" fill="rgb(213,199,42)" fg:x="7544" fg:w="11"/><text x="20.7044%" y="191.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.03%)</title><rect x="20.4544%" y="165" width="0.0298%" height="15" fill="rgb(235,201,11)" fg:x="7544" fg:w="11"/><text x="20.7044%" y="175.50"></text></g><g><title>malloc (11 samples, 0.03%)</title><rect x="20.4544%" y="149" width="0.0298%" height="15" fill="rgb(207,46,11)" fg:x="7544" fg:w="11"/><text x="20.7044%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new_uninit (12 samples, 0.03%)</title><rect x="20.4544%" y="245" width="0.0325%" height="15" fill="rgb(241,35,35)" fg:x="7544" fg:w="12"/><text x="20.7044%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::allocate_for_layout (12 samples, 0.03%)</title><rect x="20.4544%" y="229" width="0.0325%" height="15" fill="rgb(243,32,47)" fg:x="7544" fg:w="12"/><text x="20.7044%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (6 samples, 0.02%)</title><rect x="20.4870%" y="245" width="0.0163%" height="15" fill="rgb(247,202,23)" fg:x="7556" fg:w="6"/><text x="20.7370%" y="255.50"></text></g><g><title>core::ptr::write (6 samples, 0.02%)</title><rect x="20.4870%" y="229" width="0.0163%" height="15" fill="rgb(219,102,11)" fg:x="7556" fg:w="6"/><text x="20.7370%" y="239.50"></text></g><g><title>crossbeam_utils::thread::scope (657 samples, 1.78%)</title><rect x="18.7734%" y="469" width="1.7814%" height="15" fill="rgb(243,110,44)" fg:x="6924" fg:w="657"/><text x="19.0234%" y="479.50">c..</text></g><g><title>std::panic::catch_unwind (562 samples, 1.52%)</title><rect x="19.0310%" y="453" width="1.5238%" height="15" fill="rgb(222,74,54)" fg:x="7019" fg:w="562"/><text x="19.2810%" y="463.50"></text></g><g><title>std::panicking::try (562 samples, 1.52%)</title><rect x="19.0310%" y="437" width="1.5238%" height="15" fill="rgb(216,99,12)" fg:x="7019" fg:w="562"/><text x="19.2810%" y="447.50"></text></g><g><title>std::panicking::try::do_call (562 samples, 1.52%)</title><rect x="19.0310%" y="421" width="1.5238%" height="15" fill="rgb(226,22,26)" fg:x="7019" fg:w="562"/><text x="19.2810%" y="431.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (562 samples, 1.52%)</title><rect x="19.0310%" y="405" width="1.5238%" height="15" fill="rgb(217,163,10)" fg:x="7019" fg:w="562"/><text x="19.2810%" y="415.50"></text></g><g><title>crossbeam_utils::thread::scope::_{{closure}} (562 samples, 1.52%)</title><rect x="19.0310%" y="389" width="1.5238%" height="15" fill="rgb(213,25,53)" fg:x="7019" fg:w="562"/><text x="19.2810%" y="399.50"></text></g><g><title>julia::generate_image_buffer::_{{closure}} (562 samples, 1.52%)</title><rect x="19.0310%" y="373" width="1.5238%" height="15" fill="rgb(252,105,26)" fg:x="7019" fg:w="562"/><text x="19.2810%" y="383.50"></text></g><g><title>crossbeam_utils::thread::Scope::spawn (557 samples, 1.51%)</title><rect x="19.0445%" y="357" width="1.5102%" height="15" fill="rgb(220,39,43)" fg:x="7024" fg:w="557"/><text x="19.2945%" y="367.50"></text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn (557 samples, 1.51%)</title><rect x="19.0445%" y="341" width="1.5102%" height="15" fill="rgb(229,68,48)" fg:x="7024" fg:w="557"/><text x="19.2945%" y="351.50"></text></g><g><title>std::thread::Builder::spawn (520 samples, 1.41%)</title><rect x="19.1448%" y="325" width="1.4099%" height="15" fill="rgb(252,8,32)" fg:x="7061" fg:w="520"/><text x="19.3948%" y="335.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (520 samples, 1.41%)</title><rect x="19.1448%" y="309" width="1.4099%" height="15" fill="rgb(223,20,43)" fg:x="7061" fg:w="520"/><text x="19.3948%" y="319.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (520 samples, 1.41%)</title><rect x="19.1448%" y="293" width="1.4099%" height="15" fill="rgb(229,81,49)" fg:x="7061" fg:w="520"/><text x="19.3948%" y="303.50"></text></g><g><title>std::thread::Thread::new (39 samples, 0.11%)</title><rect x="20.4490%" y="277" width="0.1057%" height="15" fill="rgb(236,28,36)" fg:x="7542" fg:w="39"/><text x="20.6990%" y="287.50"></text></g><g><title>std::thread::Thread::new_inner (37 samples, 0.10%)</title><rect x="20.4544%" y="261" width="0.1003%" height="15" fill="rgb(249,185,26)" fg:x="7544" fg:w="37"/><text x="20.7044%" y="271.50"></text></g><g><title>std::thread::ThreadId::new (19 samples, 0.05%)</title><rect x="20.5032%" y="245" width="0.0515%" height="15" fill="rgb(249,174,33)" fg:x="7562" fg:w="19"/><text x="20.7532%" y="255.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (660 samples, 1.79%)</title><rect x="18.7734%" y="741" width="1.7895%" height="15" fill="rgb(233,201,37)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="751.50">_..</text></g><g><title>__libc_start_call_main (660 samples, 1.79%)</title><rect x="18.7734%" y="725" width="1.7895%" height="15" fill="rgb(221,78,26)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="735.50">_..</text></g><g><title>main (660 samples, 1.79%)</title><rect x="18.7734%" y="709" width="1.7895%" height="15" fill="rgb(250,127,30)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="719.50">m..</text></g><g><title>std::rt::lang_start_internal (660 samples, 1.79%)</title><rect x="18.7734%" y="693" width="1.7895%" height="15" fill="rgb(230,49,44)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="703.50">s..</text></g><g><title>std::panic::catch_unwind (660 samples, 1.79%)</title><rect x="18.7734%" y="677" width="1.7895%" height="15" fill="rgb(229,67,23)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="687.50">s..</text></g><g><title>std::panicking::try (660 samples, 1.79%)</title><rect x="18.7734%" y="661" width="1.7895%" height="15" fill="rgb(249,83,47)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="671.50">s..</text></g><g><title>std::panicking::try::do_call (660 samples, 1.79%)</title><rect x="18.7734%" y="645" width="1.7895%" height="15" fill="rgb(215,43,3)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="655.50">s..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (660 samples, 1.79%)</title><rect x="18.7734%" y="629" width="1.7895%" height="15" fill="rgb(238,154,13)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="639.50">s..</text></g><g><title>std::panic::catch_unwind (660 samples, 1.79%)</title><rect x="18.7734%" y="613" width="1.7895%" height="15" fill="rgb(219,56,2)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="623.50">s..</text></g><g><title>std::panicking::try (660 samples, 1.79%)</title><rect x="18.7734%" y="597" width="1.7895%" height="15" fill="rgb(233,0,4)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="607.50">s..</text></g><g><title>std::panicking::try::do_call (660 samples, 1.79%)</title><rect x="18.7734%" y="581" width="1.7895%" height="15" fill="rgb(235,30,7)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="591.50">s..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (660 samples, 1.79%)</title><rect x="18.7734%" y="565" width="1.7895%" height="15" fill="rgb(250,79,13)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="575.50">c..</text></g><g><title>std::rt::lang_start::_{{closure}} (660 samples, 1.79%)</title><rect x="18.7734%" y="549" width="1.7895%" height="15" fill="rgb(211,146,34)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="559.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (660 samples, 1.79%)</title><rect x="18.7734%" y="533" width="1.7895%" height="15" fill="rgb(228,22,38)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="543.50">s..</text></g><g><title>core::ops::function::FnOnce::call_once (660 samples, 1.79%)</title><rect x="18.7734%" y="517" width="1.7895%" height="15" fill="rgb(235,168,5)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="527.50">c..</text></g><g><title>julia::main (660 samples, 1.79%)</title><rect x="18.7734%" y="501" width="1.7895%" height="15" fill="rgb(221,155,16)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="511.50">j..</text></g><g><title>julia::generate_image_buffer (660 samples, 1.79%)</title><rect x="18.7734%" y="485" width="1.7895%" height="15" fill="rgb(215,215,53)" fg:x="6924" fg:w="660"/><text x="19.0234%" y="495.50">j..</text></g><g><title>_start (667 samples, 1.81%)</title><rect x="18.7707%" y="757" width="1.8085%" height="15" fill="rgb(223,4,10)" fg:x="6923" fg:w="667"/><text x="19.0207%" y="767.50">_..</text></g><g><title>_dl_start (6 samples, 0.02%)</title><rect x="20.5629%" y="741" width="0.0163%" height="15" fill="rgb(234,103,6)" fg:x="7584" fg:w="6"/><text x="20.8129%" y="751.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.01%)</title><rect x="20.5791%" y="757" width="0.0136%" height="15" fill="rgb(227,97,0)" fg:x="7590" fg:w="5"/><text x="20.8291%" y="767.50"></text></g><g><title>_int_free (5 samples, 0.01%)</title><rect x="20.5791%" y="741" width="0.0136%" height="15" fill="rgb(234,150,53)" fg:x="7590" fg:w="5"/><text x="20.8291%" y="751.50"></text></g><g><title>[unknown] (104 samples, 0.28%)</title><rect x="20.6307%" y="741" width="0.2820%" height="15" fill="rgb(228,201,54)" fg:x="7609" fg:w="104"/><text x="20.8807%" y="751.50"></text></g><g><title>[unknown] (13,816 samples, 37.46%)</title><rect x="21.5254%" y="725" width="37.4600%" height="15" fill="rgb(222,22,37)" fg:x="7939" fg:w="13816"/><text x="21.7754%" y="735.50">[unknown]</text></g><g><title>[unknown] (13,347 samples, 36.19%)</title><rect x="22.7970%" y="709" width="36.1884%" height="15" fill="rgb(237,53,32)" fg:x="8408" fg:w="13347"/><text x="23.0470%" y="719.50">[unknown]</text></g><g><title>[unknown] (12,058 samples, 32.69%)</title><rect x="26.2920%" y="693" width="32.6935%" height="15" fill="rgb(233,25,53)" fg:x="9697" fg:w="12058"/><text x="26.5420%" y="703.50">[unknown]</text></g><g><title>[unknown] (8,512 samples, 23.08%)</title><rect x="35.9064%" y="677" width="23.0790%" height="15" fill="rgb(210,40,34)" fg:x="13243" fg:w="8512"/><text x="36.1564%" y="687.50">[unknown]</text></g><g><title>[unknown] (6,098 samples, 16.53%)</title><rect x="42.4516%" y="661" width="16.5338%" height="15" fill="rgb(241,220,44)" fg:x="15657" fg:w="6098"/><text x="42.7016%" y="671.50">[unknown]</text></g><g><title>[unknown] (4,212 samples, 11.42%)</title><rect x="47.5652%" y="645" width="11.4202%" height="15" fill="rgb(235,28,35)" fg:x="17543" fg:w="4212"/><text x="47.8152%" y="655.50">[unknown]</text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="58.9447%" y="629" width="0.0407%" height="15" fill="rgb(210,56,17)" fg:x="21740" fg:w="15"/><text x="59.1947%" y="639.50"></text></g><g><title>__ctype_init (52 samples, 0.14%)</title><rect x="58.9908%" y="725" width="0.1410%" height="15" fill="rgb(224,130,29)" fg:x="21757" fg:w="52"/><text x="59.2408%" y="735.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="59.1210%" y="709" width="0.0108%" height="15" fill="rgb(235,212,8)" fg:x="21805" fg:w="4"/><text x="59.3710%" y="719.50"></text></g><g><title>__getpagesize (21 samples, 0.06%)</title><rect x="59.1318%" y="725" width="0.0569%" height="15" fill="rgb(223,33,50)" fg:x="21809" fg:w="21"/><text x="59.3818%" y="735.50"></text></g><g><title>__glibc_tls_internal_free (4 samples, 0.01%)</title><rect x="59.1888%" y="709" width="0.0108%" height="15" fill="rgb(219,149,13)" fg:x="21830" fg:w="4"/><text x="59.4388%" y="719.50"></text></g><g><title>__libc_dlerror_result_free (8 samples, 0.02%)</title><rect x="59.1996%" y="709" width="0.0217%" height="15" fill="rgb(250,156,29)" fg:x="21834" fg:w="8"/><text x="59.4496%" y="719.50"></text></g><g><title>__libc_thread_freeres (17 samples, 0.05%)</title><rect x="59.1888%" y="725" width="0.0461%" height="15" fill="rgb(216,193,19)" fg:x="21830" fg:w="17"/><text x="59.4388%" y="735.50"></text></g><g><title>__madvise (85 samples, 0.23%)</title><rect x="59.2349%" y="725" width="0.2305%" height="15" fill="rgb(216,135,14)" fg:x="21847" fg:w="85"/><text x="59.4849%" y="735.50"></text></g><g><title>[unknown] (80 samples, 0.22%)</title><rect x="59.2484%" y="709" width="0.2169%" height="15" fill="rgb(241,47,5)" fg:x="21852" fg:w="80"/><text x="59.4984%" y="719.50"></text></g><g><title>[unknown] (80 samples, 0.22%)</title><rect x="59.2484%" y="693" width="0.2169%" height="15" fill="rgb(233,42,35)" fg:x="21852" fg:w="80"/><text x="59.4984%" y="703.50"></text></g><g><title>[unknown] (80 samples, 0.22%)</title><rect x="59.2484%" y="677" width="0.2169%" height="15" fill="rgb(231,13,6)" fg:x="21852" fg:w="80"/><text x="59.4984%" y="687.50"></text></g><g><title>[unknown] (80 samples, 0.22%)</title><rect x="59.2484%" y="661" width="0.2169%" height="15" fill="rgb(207,181,40)" fg:x="21852" fg:w="80"/><text x="59.4984%" y="671.50"></text></g><g><title>[unknown] (78 samples, 0.21%)</title><rect x="59.2538%" y="645" width="0.2115%" height="15" fill="rgb(254,173,49)" fg:x="21854" fg:w="78"/><text x="59.5038%" y="655.50"></text></g><g><title>[unknown] (76 samples, 0.21%)</title><rect x="59.2593%" y="629" width="0.2061%" height="15" fill="rgb(221,1,38)" fg:x="21856" fg:w="76"/><text x="59.5093%" y="639.50"></text></g><g><title>[unknown] (62 samples, 0.17%)</title><rect x="59.2972%" y="613" width="0.1681%" height="15" fill="rgb(206,124,46)" fg:x="21870" fg:w="62"/><text x="59.5472%" y="623.50"></text></g><g><title>[unknown] (27 samples, 0.07%)</title><rect x="59.3921%" y="597" width="0.0732%" height="15" fill="rgb(249,21,11)" fg:x="21905" fg:w="27"/><text x="59.6421%" y="607.50"></text></g><g><title>[unknown] (20 samples, 0.05%)</title><rect x="59.4111%" y="581" width="0.0542%" height="15" fill="rgb(222,201,40)" fg:x="21912" fg:w="20"/><text x="59.6611%" y="591.50"></text></g><g><title>__malloc_arena_thread_freeres (166 samples, 0.45%)</title><rect x="59.4653%" y="725" width="0.4501%" height="15" fill="rgb(235,61,29)" fg:x="21932" fg:w="166"/><text x="59.7153%" y="735.50"></text></g><g><title>cfree@GLIBC_2.2.5 (94 samples, 0.25%)</title><rect x="59.6605%" y="709" width="0.2549%" height="15" fill="rgb(219,207,3)" fg:x="22004" fg:w="94"/><text x="59.9105%" y="719.50"></text></g><g><title>_int_free (76 samples, 0.21%)</title><rect x="59.7093%" y="693" width="0.2061%" height="15" fill="rgb(222,56,46)" fg:x="22022" fg:w="76"/><text x="59.9593%" y="703.50"></text></g><g><title>_int_free_merge_chunk (30 samples, 0.08%)</title><rect x="59.8341%" y="677" width="0.0813%" height="15" fill="rgb(239,76,54)" fg:x="22068" fg:w="30"/><text x="60.0841%" y="687.50"></text></g><g><title>_int_free_create_chunk (11 samples, 0.03%)</title><rect x="59.8856%" y="661" width="0.0298%" height="15" fill="rgb(231,124,27)" fg:x="22087" fg:w="11"/><text x="60.1356%" y="671.50"></text></g><g><title>__sigjmp_save (230 samples, 0.62%)</title><rect x="59.9154%" y="725" width="0.6236%" height="15" fill="rgb(249,195,6)" fg:x="22098" fg:w="230"/><text x="60.1654%" y="735.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="60.5092%" y="709" width="0.0298%" height="15" fill="rgb(237,174,47)" fg:x="22317" fg:w="11"/><text x="60.7592%" y="719.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="60.5227%" y="693" width="0.0163%" height="15" fill="rgb(206,201,31)" fg:x="22322" fg:w="6"/><text x="60.7727%" y="703.50"></text></g><g><title>__sigsetjmp (124 samples, 0.34%)</title><rect x="60.5390%" y="725" width="0.3362%" height="15" fill="rgb(231,57,52)" fg:x="22328" fg:w="124"/><text x="60.7890%" y="735.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="60.8562%" y="709" width="0.0190%" height="15" fill="rgb(248,177,22)" fg:x="22445" fg:w="7"/><text x="61.1062%" y="719.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="60.8590%" y="693" width="0.0163%" height="15" fill="rgb(215,211,37)" fg:x="22446" fg:w="6"/><text x="61.1090%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="60.8644%" y="677" width="0.0108%" height="15" fill="rgb(241,128,51)" fg:x="22448" fg:w="4"/><text x="61.1144%" y="687.50"></text></g><g><title>_setjmp (190 samples, 0.52%)</title><rect x="60.8752%" y="725" width="0.5152%" height="15" fill="rgb(227,165,31)" fg:x="22452" fg:w="190"/><text x="61.1252%" y="735.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="61.3687%" y="709" width="0.0217%" height="15" fill="rgb(228,167,24)" fg:x="22634" fg:w="8"/><text x="61.6187%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="61.3768%" y="693" width="0.0136%" height="15" fill="rgb(228,143,12)" fg:x="22637" fg:w="5"/><text x="61.6268%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.07%)</title><rect x="61.3931%" y="677" width="0.0678%" height="15" fill="rgb(249,149,8)" fg:x="22643" fg:w="25"/><text x="61.6431%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.07%)</title><rect x="61.3958%" y="661" width="0.0651%" height="15" fill="rgb(243,35,44)" fg:x="22644" fg:w="24"/><text x="61.6458%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.07%)</title><rect x="61.3958%" y="645" width="0.0651%" height="15" fill="rgb(246,89,9)" fg:x="22644" fg:w="24"/><text x="61.6458%" y="655.50"></text></g><g><title>cfree@GLIBC_2.2.5 (23 samples, 0.06%)</title><rect x="61.3985%" y="629" width="0.0624%" height="15" fill="rgb(233,213,13)" fg:x="22645" fg:w="23"/><text x="61.6485%" y="639.50"></text></g><g><title>_int_free (22 samples, 0.06%)</title><rect x="61.4012%" y="613" width="0.0596%" height="15" fill="rgb(233,141,41)" fg:x="22646" fg:w="22"/><text x="61.6512%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::result::Result&lt;(),alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send&gt;&gt;&gt;&gt; (6 samples, 0.02%)</title><rect x="61.4690%" y="645" width="0.0163%" height="15" fill="rgb(239,167,4)" fg:x="22671" fg:w="6"/><text x="61.7190%" y="655.50"></text></g><g><title>std::io::stdio::set_output_capture (5 samples, 0.01%)</title><rect x="61.4853%" y="645" width="0.0136%" height="15" fill="rgb(209,217,16)" fg:x="22677" fg:w="5"/><text x="61.7353%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.03%)</title><rect x="61.5015%" y="533" width="0.0325%" height="15" fill="rgb(219,88,35)" fg:x="22683" fg:w="12"/><text x="61.7515%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.03%)</title><rect x="61.5015%" y="517" width="0.0325%" height="15" fill="rgb(220,193,23)" fg:x="22683" fg:w="12"/><text x="61.7515%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.03%)</title><rect x="61.5015%" y="501" width="0.0325%" height="15" fill="rgb(230,90,52)" fg:x="22683" fg:w="12"/><text x="61.7515%" y="511.50"></text></g><g><title>cfree@GLIBC_2.2.5 (10 samples, 0.03%)</title><rect x="61.5070%" y="485" width="0.0271%" height="15" fill="rgb(252,106,19)" fg:x="22685" fg:w="10"/><text x="61.7570%" y="495.50"></text></g><g><title>_int_free (8 samples, 0.02%)</title><rect x="61.5124%" y="469" width="0.0217%" height="15" fill="rgb(206,74,20)" fg:x="22687" fg:w="8"/><text x="61.7624%" y="479.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.01%)</title><rect x="61.6073%" y="469" width="0.0108%" height="15" fill="rgb(230,138,44)" fg:x="22722" fg:w="4"/><text x="61.8573%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.02%)</title><rect x="61.6181%" y="469" width="0.0163%" height="15" fill="rgb(235,182,43)" fg:x="22726" fg:w="6"/><text x="61.8681%" y="479.50"></text></g><g><title>core::mem::drop (6 samples, 0.02%)</title><rect x="61.6181%" y="453" width="0.0163%" height="15" fill="rgb(242,16,51)" fg:x="22726" fg:w="6"/><text x="61.8681%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;std::sync::mutex::Mutex&lt;core::option::Option&lt;()&gt;&gt;,&amp;alloc::alloc::Global&gt;&gt; (6 samples, 0.02%)</title><rect x="61.6181%" y="437" width="0.0163%" height="15" fill="rgb(248,9,4)" fg:x="22726" fg:w="6"/><text x="61.8681%" y="447.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="61.6181%" y="421" width="0.0163%" height="15" fill="rgb(210,31,22)" fg:x="22726" fg:w="6"/><text x="61.8681%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;core::option::Option&lt;()&gt;&gt;&gt;&gt; (27 samples, 0.07%)</title><rect x="61.5937%" y="501" width="0.0732%" height="15" fill="rgb(239,54,39)" fg:x="22717" fg:w="27"/><text x="61.8437%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.07%)</title><rect x="61.5937%" y="485" width="0.0732%" height="15" fill="rgb(230,99,41)" fg:x="22717" fg:w="27"/><text x="61.8437%" y="495.50"></text></g><g><title>cfree@GLIBC_2.2.5 (12 samples, 0.03%)</title><rect x="61.6344%" y="469" width="0.0325%" height="15" fill="rgb(253,106,12)" fg:x="22732" fg:w="12"/><text x="61.8844%" y="479.50"></text></g><g><title>_int_free (7 samples, 0.02%)</title><rect x="61.6480%" y="453" width="0.0190%" height="15" fill="rgb(213,46,41)" fg:x="22737" fg:w="7"/><text x="61.8980%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="61.6724%" y="453" width="0.0108%" height="15" fill="rgb(215,133,35)" fg:x="22746" fg:w="4"/><text x="61.9224%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (4 samples, 0.01%)</title><rect x="61.6724%" y="437" width="0.0108%" height="15" fill="rgb(213,28,5)" fg:x="22746" fg:w="4"/><text x="61.9224%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4 samples, 0.01%)</title><rect x="61.6724%" y="421" width="0.0108%" height="15" fill="rgb(215,77,49)" fg:x="22746" fg:w="4"/><text x="61.9224%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;usize&gt;&gt; (4 samples, 0.01%)</title><rect x="61.6832%" y="453" width="0.0108%" height="15" fill="rgb(248,100,22)" fg:x="22750" fg:w="4"/><text x="61.9332%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="61.6832%" y="437" width="0.0108%" height="15" fill="rgb(208,67,9)" fg:x="22750" fg:w="4"/><text x="61.9332%" y="447.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (4 samples, 0.01%)</title><rect x="61.6832%" y="421" width="0.0108%" height="15" fill="rgb(219,133,21)" fg:x="22750" fg:w="4"/><text x="61.9332%" y="431.50"></text></g><g><title>&lt;crossbeam_utils::sync::wait_group::WaitGroup as core::ops::drop::Drop&gt;::drop (19 samples, 0.05%)</title><rect x="61.6724%" y="469" width="0.0515%" height="15" fill="rgb(246,46,29)" fg:x="22746" fg:w="19"/><text x="61.9224%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (10 samples, 0.03%)</title><rect x="61.6968%" y="453" width="0.0271%" height="15" fill="rgb(246,185,52)" fg:x="22755" fg:w="10"/><text x="61.9468%" y="463.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (10 samples, 0.03%)</title><rect x="61.6968%" y="437" width="0.0271%" height="15" fill="rgb(252,136,11)" fg:x="22755" fg:w="10"/><text x="61.9468%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (10 samples, 0.03%)</title><rect x="61.6968%" y="421" width="0.0271%" height="15" fill="rgb(219,138,53)" fg:x="22755" fg:w="10"/><text x="61.9468%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (10 samples, 0.03%)</title><rect x="61.6968%" y="405" width="0.0271%" height="15" fill="rgb(211,51,23)" fg:x="22755" fg:w="10"/><text x="61.9468%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_utils::thread::Scope&gt; (22 samples, 0.06%)</title><rect x="61.6669%" y="501" width="0.0596%" height="15" fill="rgb(247,221,28)" fg:x="22744" fg:w="22"/><text x="61.9169%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_utils::sync::wait_group::WaitGroup&gt; (20 samples, 0.05%)</title><rect x="61.6724%" y="485" width="0.0542%" height="15" fill="rgb(251,222,45)" fg:x="22746" fg:w="20"/><text x="61.9224%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (17 samples, 0.05%)</title><rect x="61.7510%" y="485" width="0.0461%" height="15" fill="rgb(217,162,53)" fg:x="22775" fg:w="17"/><text x="62.0010%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (17 samples, 0.05%)</title><rect x="61.7510%" y="469" width="0.0461%" height="15" fill="rgb(229,93,14)" fg:x="22775" fg:w="17"/><text x="62.0010%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (17 samples, 0.05%)</title><rect x="61.7510%" y="453" width="0.0461%" height="15" fill="rgb(209,67,49)" fg:x="22775" fg:w="17"/><text x="62.0010%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;julia::generate_image_buffer::{{closure}}::{{closure}}&gt; (17 samples, 0.05%)</title><rect x="61.7971%" y="485" width="0.0461%" height="15" fill="rgb(213,87,29)" fg:x="22792" fg:w="17"/><text x="62.0471%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;image::color::Rgb&lt;u8&gt;&gt;&gt;&gt;&gt;&gt; (17 samples, 0.05%)</title><rect x="61.7971%" y="469" width="0.0461%" height="15" fill="rgb(205,151,52)" fg:x="22792" fg:w="17"/><text x="62.0471%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.05%)</title><rect x="61.7971%" y="453" width="0.0461%" height="15" fill="rgb(253,215,39)" fg:x="22792" fg:w="17"/><text x="62.0471%" y="463.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::norm (90 samples, 0.24%)</title><rect x="61.9137%" y="469" width="0.2440%" height="15" fill="rgb(221,220,41)" fg:x="22835" fg:w="90"/><text x="62.1637%" y="479.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::hypot (90 samples, 0.24%)</title><rect x="61.9137%" y="453" width="0.2440%" height="15" fill="rgb(218,133,21)" fg:x="22835" fg:w="90"/><text x="62.1637%" y="463.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::hypot (90 samples, 0.24%)</title><rect x="61.9137%" y="437" width="0.2440%" height="15" fill="rgb(221,193,43)" fg:x="22835" fg:w="90"/><text x="62.1637%" y="447.50"></text></g><g><title>hypot (90 samples, 0.24%)</title><rect x="61.9137%" y="421" width="0.2440%" height="15" fill="rgb(240,128,52)" fg:x="22835" fg:w="90"/><text x="62.1637%" y="431.50"></text></g><g><title>[libm.so.6] (81 samples, 0.22%)</title><rect x="62.1794%" y="437" width="0.2196%" height="15" fill="rgb(253,114,12)" fg:x="22933" fg:w="81"/><text x="62.4294%" y="447.50"></text></g><g><title>julia::color_generator (205 samples, 0.56%)</title><rect x="61.8486%" y="485" width="0.5558%" height="15" fill="rgb(215,223,47)" fg:x="22811" fg:w="205"/><text x="62.0986%" y="495.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (91 samples, 0.25%)</title><rect x="62.1577%" y="469" width="0.2467%" height="15" fill="rgb(248,225,23)" fg:x="22925" fg:w="91"/><text x="62.4077%" y="479.50"></text></g><g><title>pow (91 samples, 0.25%)</title><rect x="62.1577%" y="453" width="0.2467%" height="15" fill="rgb(250,108,0)" fg:x="22925" fg:w="91"/><text x="62.4077%" y="463.50"></text></g><g><title>julia::generate_image_buffer::_{{closure}}::_{{closure}} (253 samples, 0.69%)</title><rect x="61.7293%" y="501" width="0.6860%" height="15" fill="rgb(228,208,7)" fg:x="22767" fg:w="253"/><text x="61.9793%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (4 samples, 0.01%)</title><rect x="62.4044%" y="485" width="0.0108%" height="15" fill="rgb(244,45,10)" fg:x="23016" fg:w="4"/><text x="62.6544%" y="495.50"></text></g><g><title>std::panic::catch_unwind (342 samples, 0.93%)</title><rect x="61.4988%" y="645" width="0.9273%" height="15" fill="rgb(207,125,25)" fg:x="22682" fg:w="342"/><text x="61.7488%" y="655.50"></text></g><g><title>std::panicking::try (342 samples, 0.93%)</title><rect x="61.4988%" y="629" width="0.9273%" height="15" fill="rgb(210,195,18)" fg:x="22682" fg:w="342"/><text x="61.7488%" y="639.50"></text></g><g><title>std::panicking::try::do_call (342 samples, 0.93%)</title><rect x="61.4988%" y="613" width="0.9273%" height="15" fill="rgb(249,80,12)" fg:x="22682" fg:w="342"/><text x="61.7488%" y="623.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (342 samples, 0.93%)</title><rect x="61.4988%" y="597" width="0.9273%" height="15" fill="rgb(221,65,9)" fg:x="22682" fg:w="342"/><text x="61.7488%" y="607.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (342 samples, 0.93%)</title><rect x="61.4988%" y="581" width="0.9273%" height="15" fill="rgb(235,49,36)" fg:x="22682" fg:w="342"/><text x="61.7488%" y="591.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (342 samples, 0.93%)</title><rect x="61.4988%" y="565" width="0.9273%" height="15" fill="rgb(225,32,20)" fg:x="22682" fg:w="342"/><text x="61.7488%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (341 samples, 0.92%)</title><rect x="61.5015%" y="549" width="0.9246%" height="15" fill="rgb(215,141,46)" fg:x="22683" fg:w="341"/><text x="61.7515%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (329 samples, 0.89%)</title><rect x="61.5341%" y="533" width="0.8920%" height="15" fill="rgb(250,160,47)" fg:x="22695" fg:w="329"/><text x="61.7841%" y="543.50"></text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::_{{closure}} (314 samples, 0.85%)</title><rect x="61.5748%" y="517" width="0.8514%" height="15" fill="rgb(216,222,40)" fg:x="22710" fg:w="314"/><text x="61.8248%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (4 samples, 0.01%)</title><rect x="62.4153%" y="501" width="0.0108%" height="15" fill="rgb(234,217,39)" fg:x="23020" fg:w="4"/><text x="62.6653%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.01%)</title><rect x="62.4397%" y="581" width="0.0136%" height="15" fill="rgb(207,178,40)" fg:x="23029" fg:w="5"/><text x="62.6897%" y="591.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (17 samples, 0.05%)</title><rect x="62.5020%" y="549" width="0.0461%" height="15" fill="rgb(221,136,13)" fg:x="23052" fg:w="17"/><text x="62.7520%" y="559.50"></text></g><g><title>__GI__dl_find_dso_for_object (25 samples, 0.07%)</title><rect x="62.5481%" y="549" width="0.0678%" height="15" fill="rgb(249,199,10)" fg:x="23069" fg:w="25"/><text x="62.7981%" y="559.50"></text></g><g><title>__libc_calloc (32 samples, 0.09%)</title><rect x="62.6159%" y="549" width="0.0868%" height="15" fill="rgb(249,222,13)" fg:x="23094" fg:w="32"/><text x="62.8659%" y="559.50"></text></g><g><title>_int_malloc (5 samples, 0.01%)</title><rect x="62.6891%" y="533" width="0.0136%" height="15" fill="rgb(244,185,38)" fg:x="23121" fg:w="5"/><text x="62.9391%" y="543.50"></text></g><g><title>__cxa_thread_atexit_impl (121 samples, 0.33%)</title><rect x="62.4532%" y="565" width="0.3281%" height="15" fill="rgb(236,202,9)" fg:x="23034" fg:w="121"/><text x="62.7032%" y="575.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (28 samples, 0.08%)</title><rect x="62.7054%" y="549" width="0.0759%" height="15" fill="rgb(250,229,37)" fg:x="23127" fg:w="28"/><text x="62.9554%" y="559.50"></text></g><g><title>std::thread::CURRENT::__getit (129 samples, 0.35%)</title><rect x="62.4397%" y="597" width="0.3498%" height="15" fill="rgb(206,174,23)" fg:x="23029" fg:w="129"/><text x="62.6897%" y="607.50"></text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::register_dtor (124 samples, 0.34%)</title><rect x="62.4532%" y="581" width="0.3362%" height="15" fill="rgb(211,33,43)" fg:x="23034" fg:w="124"/><text x="62.7032%" y="591.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (517 samples, 1.40%)</title><rect x="61.3931%" y="693" width="1.4018%" height="15" fill="rgb(245,58,50)" fg:x="22643" fg:w="517"/><text x="61.6431%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (492 samples, 1.33%)</title><rect x="61.4609%" y="677" width="1.3340%" height="15" fill="rgb(244,68,36)" fg:x="22668" fg:w="492"/><text x="61.7109%" y="687.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (492 samples, 1.33%)</title><rect x="61.4609%" y="661" width="1.3340%" height="15" fill="rgb(232,229,15)" fg:x="22668" fg:w="492"/><text x="61.7109%" y="671.50"></text></g><g><title>std::thread::set_current (135 samples, 0.37%)</title><rect x="62.4288%" y="645" width="0.3660%" height="15" fill="rgb(254,30,23)" fg:x="23025" fg:w="135"/><text x="62.6788%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (131 samples, 0.36%)</title><rect x="62.4397%" y="629" width="0.3552%" height="15" fill="rgb(235,160,14)" fg:x="23029" fg:w="131"/><text x="62.6897%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (131 samples, 0.36%)</title><rect x="62.4397%" y="613" width="0.3552%" height="15" fill="rgb(212,155,44)" fg:x="23029" fg:w="131"/><text x="62.6897%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (520 samples, 1.41%)</title><rect x="61.3931%" y="709" width="1.4099%" height="15" fill="rgb(226,2,50)" fg:x="22643" fg:w="520"/><text x="61.6431%" y="719.50"></text></g><g><title>__GI___sigaltstack (114 samples, 0.31%)</title><rect x="62.8166%" y="661" width="0.3091%" height="15" fill="rgb(234,177,6)" fg:x="23168" fg:w="114"/><text x="63.0666%" y="671.50"></text></g><g><title>[unknown] (112 samples, 0.30%)</title><rect x="62.8220%" y="645" width="0.3037%" height="15" fill="rgb(217,24,9)" fg:x="23170" fg:w="112"/><text x="63.0720%" y="655.50"></text></g><g><title>[unknown] (90 samples, 0.24%)</title><rect x="62.8816%" y="629" width="0.2440%" height="15" fill="rgb(220,13,46)" fg:x="23192" fg:w="90"/><text x="63.1316%" y="639.50"></text></g><g><title>[unknown] (73 samples, 0.20%)</title><rect x="62.9277%" y="613" width="0.1979%" height="15" fill="rgb(239,221,27)" fg:x="23209" fg:w="73"/><text x="63.1777%" y="623.50"></text></g><g><title>[unknown] (39 samples, 0.11%)</title><rect x="63.0199%" y="597" width="0.1057%" height="15" fill="rgb(222,198,25)" fg:x="23243" fg:w="39"/><text x="63.2699%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="63.1121%" y="581" width="0.0136%" height="15" fill="rgb(211,99,13)" fg:x="23277" fg:w="5"/><text x="63.3621%" y="591.50"></text></g><g><title>__munmap (36 samples, 0.10%)</title><rect x="63.1256%" y="661" width="0.0976%" height="15" fill="rgb(232,111,31)" fg:x="23282" fg:w="36"/><text x="63.3756%" y="671.50"></text></g><g><title>[unknown] (29 samples, 0.08%)</title><rect x="63.1446%" y="645" width="0.0786%" height="15" fill="rgb(245,82,37)" fg:x="23289" fg:w="29"/><text x="63.3946%" y="655.50"></text></g><g><title>[unknown] (28 samples, 0.08%)</title><rect x="63.1473%" y="629" width="0.0759%" height="15" fill="rgb(227,149,46)" fg:x="23290" fg:w="28"/><text x="63.3973%" y="639.50"></text></g><g><title>[unknown] (28 samples, 0.08%)</title><rect x="63.1473%" y="613" width="0.0759%" height="15" fill="rgb(218,36,50)" fg:x="23290" fg:w="28"/><text x="63.3973%" y="623.50"></text></g><g><title>[unknown] (27 samples, 0.07%)</title><rect x="63.1500%" y="597" width="0.0732%" height="15" fill="rgb(226,80,48)" fg:x="23291" fg:w="27"/><text x="63.4000%" y="607.50"></text></g><g><title>[unknown] (27 samples, 0.07%)</title><rect x="63.1500%" y="581" width="0.0732%" height="15" fill="rgb(238,224,15)" fg:x="23291" fg:w="27"/><text x="63.4000%" y="591.50"></text></g><g><title>[unknown] (26 samples, 0.07%)</title><rect x="63.1528%" y="565" width="0.0705%" height="15" fill="rgb(241,136,10)" fg:x="23292" fg:w="26"/><text x="63.4028%" y="575.50"></text></g><g><title>[unknown] (22 samples, 0.06%)</title><rect x="63.1636%" y="549" width="0.0596%" height="15" fill="rgb(208,32,45)" fg:x="23296" fg:w="22"/><text x="63.4136%" y="559.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="63.2043%" y="533" width="0.0190%" height="15" fill="rgb(207,135,9)" fg:x="23311" fg:w="7"/><text x="63.4543%" y="543.50"></text></g><g><title>__getauxval (4 samples, 0.01%)</title><rect x="63.2233%" y="645" width="0.0108%" height="15" fill="rgb(206,86,44)" fg:x="23318" fg:w="4"/><text x="63.4733%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (160 samples, 0.43%)</title><rect x="62.8030%" y="709" width="0.4338%" height="15" fill="rgb(245,177,15)" fg:x="23163" fg:w="160"/><text x="63.0530%" y="719.50"></text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (160 samples, 0.43%)</title><rect x="62.8030%" y="693" width="0.4338%" height="15" fill="rgb(206,64,50)" fg:x="23163" fg:w="160"/><text x="63.0530%" y="703.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (160 samples, 0.43%)</title><rect x="62.8030%" y="677" width="0.4338%" height="15" fill="rgb(234,36,40)" fg:x="23163" fg:w="160"/><text x="63.0530%" y="687.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::sigstack_size (5 samples, 0.01%)</title><rect x="63.2233%" y="661" width="0.0136%" height="15" fill="rgb(213,64,8)" fg:x="23318" fg:w="5"/><text x="63.4733%" y="671.50"></text></g><g><title>__GI___sigaltstack (544 samples, 1.47%)</title><rect x="63.2639%" y="677" width="1.4750%" height="15" fill="rgb(210,75,36)" fg:x="23333" fg:w="544"/><text x="63.5139%" y="687.50"></text></g><g><title>[unknown] (355 samples, 0.96%)</title><rect x="63.7764%" y="661" width="0.9625%" height="15" fill="rgb(229,88,21)" fg:x="23522" fg:w="355"/><text x="64.0264%" y="671.50"></text></g><g><title>[unknown] (312 samples, 0.85%)</title><rect x="63.8930%" y="645" width="0.8459%" height="15" fill="rgb(252,204,47)" fg:x="23565" fg:w="312"/><text x="64.1430%" y="655.50"></text></g><g><title>[unknown] (228 samples, 0.62%)</title><rect x="64.1207%" y="629" width="0.6182%" height="15" fill="rgb(208,77,27)" fg:x="23649" fg:w="228"/><text x="64.3707%" y="639.50"></text></g><g><title>[unknown] (111 samples, 0.30%)</title><rect x="64.4379%" y="613" width="0.3010%" height="15" fill="rgb(221,76,26)" fg:x="23766" fg:w="111"/><text x="64.6879%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="64.7199%" y="597" width="0.0190%" height="15" fill="rgb(225,139,18)" fg:x="23870" fg:w="7"/><text x="64.9699%" y="607.50"></text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (129 samples, 0.35%)</title><rect x="64.7525%" y="677" width="0.3498%" height="15" fill="rgb(230,137,11)" fg:x="23882" fg:w="129"/><text x="65.0025%" y="687.50"></text></g><g><title>pthread_getaffinity_np@GLIBC_2.3.4 (129 samples, 0.35%)</title><rect x="64.7525%" y="661" width="0.3498%" height="15" fill="rgb(212,28,1)" fg:x="23882" fg:w="129"/><text x="65.0025%" y="671.50"></text></g><g><title>[unknown] (129 samples, 0.35%)</title><rect x="64.7525%" y="645" width="0.3498%" height="15" fill="rgb(248,164,17)" fg:x="23882" fg:w="129"/><text x="65.0025%" y="655.50"></text></g><g><title>cfree@GLIBC_2.2.5 (475 samples, 1.29%)</title><rect x="65.9075%" y="645" width="1.2879%" height="15" fill="rgb(222,171,42)" fg:x="24308" fg:w="475"/><text x="66.1575%" y="655.50"></text></g><g><title>_int_free (278 samples, 0.75%)</title><rect x="66.4416%" y="629" width="0.7538%" height="15" fill="rgb(243,84,45)" fg:x="24505" fg:w="278"/><text x="66.6916%" y="639.50"></text></g><g><title>__GI___pthread_attr_destroy (727 samples, 1.97%)</title><rect x="65.2269%" y="661" width="1.9712%" height="15" fill="rgb(252,49,23)" fg:x="24057" fg:w="727"/><text x="65.4769%" y="671.50">_..</text></g><g><title>__GI___pthread_self (7 samples, 0.02%)</title><rect x="67.1981%" y="661" width="0.0190%" height="15" fill="rgb(215,19,7)" fg:x="24784" fg:w="7"/><text x="67.4481%" y="671.50"></text></g><g><title>pthread_attr_getguardsize@@GLIBC_2.34 (85 samples, 0.23%)</title><rect x="67.2171%" y="661" width="0.2305%" height="15" fill="rgb(238,81,41)" fg:x="24791" fg:w="85"/><text x="67.4671%" y="671.50"></text></g><g><title>pthread_attr_getstack@@GLIBC_2.34 (42 samples, 0.11%)</title><rect x="67.4475%" y="661" width="0.1139%" height="15" fill="rgb(210,199,37)" fg:x="24876" fg:w="42"/><text x="67.6975%" y="671.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="67.7702%" y="645" width="0.0190%" height="15" fill="rgb(244,192,49)" fg:x="24995" fg:w="7"/><text x="68.0202%" y="655.50"></text></g><g><title>cfree@GLIBC_2.2.5 (50 samples, 0.14%)</title><rect x="67.7892%" y="645" width="0.1356%" height="15" fill="rgb(226,211,11)" fg:x="25002" fg:w="50"/><text x="68.0392%" y="655.50"></text></g><g><title>_int_free (16 samples, 0.04%)</title><rect x="67.8814%" y="629" width="0.0434%" height="15" fill="rgb(236,162,54)" fg:x="25036" fg:w="16"/><text x="68.1314%" y="639.50"></text></g><g><title>[unknown] (22 samples, 0.06%)</title><rect x="69.0608%" y="613" width="0.0596%" height="15" fill="rgb(220,229,9)" fg:x="25471" fg:w="22"/><text x="69.3108%" y="623.50"></text></g><g><title>[unknown] (19 samples, 0.05%)</title><rect x="69.0689%" y="597" width="0.0515%" height="15" fill="rgb(250,87,22)" fg:x="25474" fg:w="19"/><text x="69.3189%" y="607.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="69.1042%" y="581" width="0.0163%" height="15" fill="rgb(239,43,17)" fg:x="25487" fg:w="6"/><text x="69.3542%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="69.1069%" y="565" width="0.0136%" height="15" fill="rgb(231,177,25)" fg:x="25488" fg:w="5"/><text x="69.3569%" y="575.50"></text></g><g><title>_int_malloc (7 samples, 0.02%)</title><rect x="69.1204%" y="613" width="0.0190%" height="15" fill="rgb(219,179,1)" fg:x="25493" fg:w="7"/><text x="69.3704%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="69.1204%" y="597" width="0.0190%" height="15" fill="rgb(238,219,53)" fg:x="25493" fg:w="7"/><text x="69.3704%" y="607.50"></text></g><g><title>[unknown] (80 samples, 0.22%)</title><rect x="69.0527%" y="629" width="0.2169%" height="15" fill="rgb(232,167,36)" fg:x="25468" fg:w="80"/><text x="69.3027%" y="639.50"></text></g><g><title>get_free_list (48 samples, 0.13%)</title><rect x="69.1394%" y="613" width="0.1301%" height="15" fill="rgb(244,19,51)" fg:x="25500" fg:w="48"/><text x="69.3894%" y="623.50"></text></g><g><title>[unknown] (48 samples, 0.13%)</title><rect x="69.1394%" y="597" width="0.1301%" height="15" fill="rgb(224,6,22)" fg:x="25500" fg:w="48"/><text x="69.3894%" y="607.50"></text></g><g><title>_int_malloc (1,883 samples, 5.11%)</title><rect x="69.2696%" y="629" width="5.1055%" height="15" fill="rgb(224,145,5)" fg:x="25548" fg:w="1883"/><text x="69.5196%" y="639.50">_int_m..</text></g><g><title>[unknown] (114 samples, 0.31%)</title><rect x="74.0659%" y="613" width="0.3091%" height="15" fill="rgb(234,130,49)" fg:x="27317" fg:w="114"/><text x="74.3159%" y="623.50"></text></g><g><title>[unknown] (114 samples, 0.31%)</title><rect x="74.0659%" y="597" width="0.3091%" height="15" fill="rgb(254,6,2)" fg:x="27317" fg:w="114"/><text x="74.3159%" y="607.50"></text></g><g><title>[unknown] (106 samples, 0.29%)</title><rect x="74.0876%" y="581" width="0.2874%" height="15" fill="rgb(208,96,46)" fg:x="27325" fg:w="106"/><text x="74.3376%" y="591.50"></text></g><g><title>[unknown] (57 samples, 0.15%)</title><rect x="74.2205%" y="565" width="0.1545%" height="15" fill="rgb(239,3,39)" fg:x="27374" fg:w="57"/><text x="74.4705%" y="575.50"></text></g><g><title>[unknown] (39 samples, 0.11%)</title><rect x="74.2693%" y="549" width="0.1057%" height="15" fill="rgb(233,210,1)" fg:x="27392" fg:w="39"/><text x="74.5193%" y="559.50"></text></g><g><title>[unknown] (27 samples, 0.07%)</title><rect x="74.3018%" y="533" width="0.0732%" height="15" fill="rgb(244,137,37)" fg:x="27404" fg:w="27"/><text x="74.5518%" y="543.50"></text></g><g><title>[unknown] (128 samples, 0.35%)</title><rect x="79.6486%" y="613" width="0.3471%" height="15" fill="rgb(240,136,2)" fg:x="29376" fg:w="128"/><text x="79.8986%" y="623.50"></text></g><g><title>[unknown] (126 samples, 0.34%)</title><rect x="79.6540%" y="597" width="0.3416%" height="15" fill="rgb(239,18,37)" fg:x="29378" fg:w="126"/><text x="79.9040%" y="607.50"></text></g><g><title>[unknown] (119 samples, 0.32%)</title><rect x="79.6730%" y="581" width="0.3227%" height="15" fill="rgb(218,185,22)" fg:x="29385" fg:w="119"/><text x="79.9230%" y="591.50"></text></g><g><title>[unknown] (64 samples, 0.17%)</title><rect x="79.8221%" y="565" width="0.1735%" height="15" fill="rgb(225,218,4)" fg:x="29440" fg:w="64"/><text x="80.0721%" y="575.50"></text></g><g><title>[unknown] (38 samples, 0.10%)</title><rect x="79.8926%" y="549" width="0.1030%" height="15" fill="rgb(230,182,32)" fg:x="29466" fg:w="38"/><text x="80.1426%" y="559.50"></text></g><g><title>[unknown] (25 samples, 0.07%)</title><rect x="79.9279%" y="533" width="0.0678%" height="15" fill="rgb(242,56,43)" fg:x="29479" fg:w="25"/><text x="80.1779%" y="543.50"></text></g><g><title>_int_malloc (1,680 samples, 4.56%)</title><rect x="79.9957%" y="613" width="4.5551%" height="15" fill="rgb(233,99,24)" fg:x="29504" fg:w="1680"/><text x="80.2457%" y="623.50">_int_..</text></g><g><title>[unknown] (69 samples, 0.19%)</title><rect x="84.3636%" y="597" width="0.1871%" height="15" fill="rgb(234,209,42)" fg:x="31115" fg:w="69"/><text x="84.6136%" y="607.50"></text></g><g><title>[unknown] (66 samples, 0.18%)</title><rect x="84.3718%" y="581" width="0.1789%" height="15" fill="rgb(227,7,12)" fg:x="31118" fg:w="66"/><text x="84.6218%" y="591.50"></text></g><g><title>[unknown] (59 samples, 0.16%)</title><rect x="84.3908%" y="565" width="0.1600%" height="15" fill="rgb(245,203,43)" fg:x="31125" fg:w="59"/><text x="84.6408%" y="575.50"></text></g><g><title>[unknown] (38 samples, 0.10%)</title><rect x="84.4477%" y="549" width="0.1030%" height="15" fill="rgb(238,205,33)" fg:x="31146" fg:w="38"/><text x="84.6977%" y="559.50"></text></g><g><title>[unknown] (26 samples, 0.07%)</title><rect x="84.4802%" y="533" width="0.0705%" height="15" fill="rgb(231,56,7)" fg:x="31158" fg:w="26"/><text x="84.7302%" y="543.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="84.5101%" y="517" width="0.0407%" height="15" fill="rgb(244,186,29)" fg:x="31169" fg:w="15"/><text x="84.7601%" y="527.50"></text></g><g><title>__get_nprocs_sched (5 samples, 0.01%)</title><rect x="84.5534%" y="597" width="0.0136%" height="15" fill="rgb(234,111,31)" fg:x="31185" fg:w="5"/><text x="84.8034%" y="607.50"></text></g><g><title>arena_get2.part.0 (21 samples, 0.06%)</title><rect x="84.5507%" y="613" width="0.0569%" height="15" fill="rgb(241,149,10)" fg:x="31184" fg:w="21"/><text x="84.8007%" y="623.50"></text></g><g><title>alloc_new_heap (12 samples, 0.03%)</title><rect x="84.5751%" y="597" width="0.0325%" height="15" fill="rgb(249,206,44)" fg:x="31193" fg:w="12"/><text x="84.8251%" y="607.50"></text></g><g><title>__munmap (6 samples, 0.02%)</title><rect x="84.5914%" y="581" width="0.0163%" height="15" fill="rgb(251,153,30)" fg:x="31199" fg:w="6"/><text x="84.8414%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="84.5914%" y="565" width="0.0163%" height="15" fill="rgb(239,152,38)" fg:x="31199" fg:w="6"/><text x="84.8414%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="84.5914%" y="549" width="0.0163%" height="15" fill="rgb(249,139,47)" fg:x="31199" fg:w="6"/><text x="84.8414%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="84.5914%" y="533" width="0.0163%" height="15" fill="rgb(244,64,35)" fg:x="31199" fg:w="6"/><text x="84.8414%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="84.5914%" y="517" width="0.0163%" height="15" fill="rgb(216,46,15)" fg:x="31199" fg:w="6"/><text x="84.8414%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="84.5914%" y="501" width="0.0163%" height="15" fill="rgb(250,74,19)" fg:x="31199" fg:w="6"/><text x="84.8414%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="84.5914%" y="485" width="0.0163%" height="15" fill="rgb(249,42,33)" fg:x="31199" fg:w="6"/><text x="84.8414%" y="495.50"></text></g><g><title>[unknown] (27 samples, 0.07%)</title><rect x="86.2399%" y="597" width="0.0732%" height="15" fill="rgb(242,149,17)" fg:x="31807" fg:w="27"/><text x="86.4899%" y="607.50"></text></g><g><title>[unknown] (26 samples, 0.07%)</title><rect x="86.2426%" y="581" width="0.0705%" height="15" fill="rgb(244,29,21)" fg:x="31808" fg:w="26"/><text x="86.4926%" y="591.50"></text></g><g><title>[unknown] (25 samples, 0.07%)</title><rect x="86.2453%" y="565" width="0.0678%" height="15" fill="rgb(220,130,37)" fg:x="31809" fg:w="25"/><text x="86.4953%" y="575.50"></text></g><g><title>[unknown] (13 samples, 0.04%)</title><rect x="86.2779%" y="549" width="0.0352%" height="15" fill="rgb(211,67,2)" fg:x="31821" fg:w="13"/><text x="86.5279%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="86.2968%" y="533" width="0.0163%" height="15" fill="rgb(235,68,52)" fg:x="31828" fg:w="6"/><text x="86.5468%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="86.3023%" y="517" width="0.0108%" height="15" fill="rgb(246,142,3)" fg:x="31830" fg:w="4"/><text x="86.5523%" y="527.50"></text></g><g><title>__lll_lock_wait_private (9 samples, 0.02%)</title><rect x="86.3131%" y="597" width="0.0244%" height="15" fill="rgb(241,25,7)" fg:x="31834" fg:w="9"/><text x="86.5631%" y="607.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="86.3158%" y="581" width="0.0217%" height="15" fill="rgb(242,119,39)" fg:x="31835" fg:w="8"/><text x="86.5658%" y="591.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="86.3185%" y="565" width="0.0190%" height="15" fill="rgb(241,98,45)" fg:x="31836" fg:w="7"/><text x="86.5685%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="86.3212%" y="549" width="0.0163%" height="15" fill="rgb(254,28,30)" fg:x="31837" fg:w="6"/><text x="86.5712%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="86.3267%" y="533" width="0.0108%" height="15" fill="rgb(241,142,54)" fg:x="31839" fg:w="4"/><text x="86.5767%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="86.3267%" y="517" width="0.0108%" height="15" fill="rgb(222,85,15)" fg:x="31839" fg:w="4"/><text x="86.5767%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="86.3267%" y="501" width="0.0108%" height="15" fill="rgb(210,85,47)" fg:x="31839" fg:w="4"/><text x="86.5767%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="86.3267%" y="485" width="0.0108%" height="15" fill="rgb(224,206,25)" fg:x="31839" fg:w="4"/><text x="86.5767%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="86.3267%" y="469" width="0.0108%" height="15" fill="rgb(243,201,19)" fg:x="31839" fg:w="4"/><text x="86.5767%" y="479.50"></text></g><g><title>malloc (6,804 samples, 18.45%)</title><rect x="67.9302%" y="645" width="18.4480%" height="15" fill="rgb(236,59,4)" fg:x="25054" fg:w="6804"/><text x="68.1802%" y="655.50">malloc</text></g><g><title>tcache_init.part.0 (4,427 samples, 12.00%)</title><rect x="74.3750%" y="629" width="12.0031%" height="15" fill="rgb(254,179,45)" fg:x="27431" fg:w="4427"/><text x="74.6250%" y="639.50">tcache_init.part.0</text></g><g><title>get_free_list (653 samples, 1.77%)</title><rect x="84.6077%" y="613" width="1.7705%" height="15" fill="rgb(226,14,10)" fg:x="31205" fg:w="653"/><text x="84.8577%" y="623.50">g..</text></g><g><title>__lll_lock_wake_private (15 samples, 0.04%)</title><rect x="86.3375%" y="597" width="0.0407%" height="15" fill="rgb(244,27,41)" fg:x="31843" fg:w="15"/><text x="86.5875%" y="607.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="86.3402%" y="581" width="0.0380%" height="15" fill="rgb(235,35,32)" fg:x="31844" fg:w="14"/><text x="86.5902%" y="591.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="86.3402%" y="565" width="0.0380%" height="15" fill="rgb(218,68,31)" fg:x="31844" fg:w="14"/><text x="86.5902%" y="575.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="86.3402%" y="549" width="0.0380%" height="15" fill="rgb(207,120,37)" fg:x="31844" fg:w="14"/><text x="86.5902%" y="559.50"></text></g><g><title>[unknown] (13 samples, 0.04%)</title><rect x="86.3429%" y="533" width="0.0352%" height="15" fill="rgb(227,98,0)" fg:x="31845" fg:w="13"/><text x="86.5929%" y="543.50"></text></g><g><title>[unknown] (13 samples, 0.04%)</title><rect x="86.3429%" y="517" width="0.0352%" height="15" fill="rgb(207,7,3)" fg:x="31845" fg:w="13"/><text x="86.5929%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="86.3673%" y="501" width="0.0108%" height="15" fill="rgb(206,98,19)" fg:x="31854" fg:w="4"/><text x="86.6173%" y="511.50"></text></g><g><title>pthread_attr_init@@GLIBC_2.2.5 (384 samples, 1.04%)</title><rect x="86.3782%" y="645" width="1.0412%" height="15" fill="rgb(217,5,26)" fg:x="31858" fg:w="384"/><text x="86.6282%" y="655.50"></text></g><g><title>__getpagesize (357 samples, 0.97%)</title><rect x="86.4514%" y="629" width="0.9680%" height="15" fill="rgb(235,190,38)" fg:x="31885" fg:w="357"/><text x="86.7014%" y="639.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="87.3787%" y="613" width="0.0407%" height="15" fill="rgb(247,86,24)" fg:x="32227" fg:w="15"/><text x="87.6287%" y="623.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="87.3814%" y="597" width="0.0380%" height="15" fill="rgb(205,101,16)" fg:x="32228" fg:w="14"/><text x="87.6314%" y="607.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="87.3814%" y="581" width="0.0380%" height="15" fill="rgb(246,168,33)" fg:x="32228" fg:w="14"/><text x="87.6314%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="87.4058%" y="565" width="0.0136%" height="15" fill="rgb(231,114,1)" fg:x="32237" fg:w="5"/><text x="87.6558%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (25 samples, 0.07%)</title><rect x="87.4329%" y="629" width="0.0678%" height="15" fill="rgb(207,184,53)" fg:x="32247" fg:w="25"/><text x="87.6829%" y="639.50"></text></g><g><title>__pthread_attr_extension (8 samples, 0.02%)</title><rect x="87.5007%" y="629" width="0.0217%" height="15" fill="rgb(224,95,51)" fg:x="32272" fg:w="8"/><text x="87.7507%" y="639.50"></text></g><g><title>__memset_avx2_unaligned_erms (5 samples, 0.01%)</title><rect x="87.5088%" y="613" width="0.0136%" height="15" fill="rgb(212,188,45)" fg:x="32275" fg:w="5"/><text x="87.7588%" y="623.50"></text></g><g><title>malloc (11 samples, 0.03%)</title><rect x="87.5224%" y="629" width="0.0298%" height="15" fill="rgb(223,154,38)" fg:x="32280" fg:w="11"/><text x="87.7724%" y="639.50"></text></g><g><title>pthread_attr_setaffinity_np@@GLIBC_2.32 (50 samples, 0.14%)</title><rect x="87.4193%" y="645" width="0.1356%" height="15" fill="rgb(251,22,52)" fg:x="32242" fg:w="50"/><text x="87.6693%" y="655.50"></text></g><g><title>[unknown] (4,184 samples, 11.34%)</title><rect x="87.5902%" y="629" width="11.3443%" height="15" fill="rgb(229,209,22)" fg:x="32305" fg:w="4184"/><text x="87.8402%" y="639.50">[unknown]</text></g><g><title>[unknown] (4,153 samples, 11.26%)</title><rect x="87.6742%" y="613" width="11.2602%" height="15" fill="rgb(234,138,34)" fg:x="32336" fg:w="4153"/><text x="87.9242%" y="623.50">[unknown]</text></g><g><title>[unknown] (4,007 samples, 10.86%)</title><rect x="88.0701%" y="597" width="10.8644%" height="15" fill="rgb(212,95,11)" fg:x="32482" fg:w="4007"/><text x="88.3201%" y="607.50">[unknown]</text></g><g><title>[unknown] (3,565 samples, 9.67%)</title><rect x="89.2685%" y="581" width="9.6660%" height="15" fill="rgb(240,179,47)" fg:x="32924" fg:w="3565"/><text x="89.5185%" y="591.50">[unknown]</text></g><g><title>[unknown] (2,914 samples, 7.90%)</title><rect x="91.0336%" y="565" width="7.9009%" height="15" fill="rgb(240,163,11)" fg:x="33575" fg:w="2914"/><text x="91.2836%" y="575.50">[unknown]</text></g><g><title>[unknown] (2,389 samples, 6.48%)</title><rect x="92.4570%" y="549" width="6.4774%" height="15" fill="rgb(236,37,12)" fg:x="34100" fg:w="2389"/><text x="92.7070%" y="559.50">[unknown]</text></g><g><title>[unknown] (635 samples, 1.72%)</title><rect x="97.2127%" y="533" width="1.7217%" height="15" fill="rgb(232,164,16)" fg:x="35854" fg:w="635"/><text x="97.4627%" y="543.50"></text></g><g><title>[unknown] (24 samples, 0.07%)</title><rect x="98.8694%" y="517" width="0.0651%" height="15" fill="rgb(244,205,15)" fg:x="36465" fg:w="24"/><text x="99.1194%" y="527.50"></text></g><g><title>pthread_getaffinity_np@GLIBC_2.3.4 (4,200 samples, 11.39%)</title><rect x="87.5549%" y="645" width="11.3877%" height="15" fill="rgb(223,117,47)" fg:x="32292" fg:w="4200"/><text x="87.8049%" y="655.50">pthread_getaffini..</text></g><g><title>realloc (188 samples, 0.51%)</title><rect x="98.9426%" y="645" width="0.5097%" height="15" fill="rgb(244,107,35)" fg:x="36492" fg:w="188"/><text x="99.1926%" y="655.50"></text></g><g><title>[unknown] (21 samples, 0.06%)</title><rect x="99.3954%" y="629" width="0.0569%" height="15" fill="rgb(205,140,8)" fg:x="36659" fg:w="21"/><text x="99.6454%" y="639.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="99.4306%" y="613" width="0.0217%" height="15" fill="rgb(228,84,46)" fg:x="36672" fg:w="8"/><text x="99.6806%" y="623.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="99.4306%" y="597" width="0.0217%" height="15" fill="rgb(254,188,9)" fg:x="36672" fg:w="8"/><text x="99.6806%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="99.4415%" y="581" width="0.0108%" height="15" fill="rgb(206,112,54)" fg:x="36676" fg:w="4"/><text x="99.6915%" y="591.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::current_guard (12,672 samples, 34.36%)</title><rect x="65.1022%" y="677" width="34.3582%" height="15" fill="rgb(216,84,49)" fg:x="24011" fg:w="12672"/><text x="65.3522%" y="687.50">std::sys::pal::unix::stack_overflow::imp::current_guard</text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (11,765 samples, 31.90%)</title><rect x="67.5614%" y="661" width="31.8990%" height="15" fill="rgb(214,194,35)" fg:x="24918" fg:w="11765"/><text x="67.8114%" y="671.50">pthread_getattr_np@@GLIBC_2.32</text></g><g><title>__mmap (97 samples, 0.26%)</title><rect x="99.4659%" y="661" width="0.2630%" height="15" fill="rgb(249,28,3)" fg:x="36685" fg:w="97"/><text x="99.7159%" y="671.50"></text></g><g><title>[unknown] (97 samples, 0.26%)</title><rect x="99.4659%" y="645" width="0.2630%" height="15" fill="rgb(222,56,52)" fg:x="36685" fg:w="97"/><text x="99.7159%" y="655.50"></text></g><g><title>[unknown] (95 samples, 0.26%)</title><rect x="99.4713%" y="629" width="0.2576%" height="15" fill="rgb(245,217,50)" fg:x="36687" fg:w="95"/><text x="99.7213%" y="639.50"></text></g><g><title>[unknown] (95 samples, 0.26%)</title><rect x="99.4713%" y="613" width="0.2576%" height="15" fill="rgb(213,201,24)" fg:x="36687" fg:w="95"/><text x="99.7213%" y="623.50"></text></g><g><title>[unknown] (91 samples, 0.25%)</title><rect x="99.4821%" y="597" width="0.2467%" height="15" fill="rgb(248,116,28)" fg:x="36691" fg:w="91"/><text x="99.7321%" y="607.50"></text></g><g><title>[unknown] (43 samples, 0.12%)</title><rect x="99.6123%" y="581" width="0.1166%" height="15" fill="rgb(219,72,43)" fg:x="36739" fg:w="43"/><text x="99.8623%" y="591.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="99.6909%" y="565" width="0.0380%" height="15" fill="rgb(209,138,14)" fg:x="36768" fg:w="14"/><text x="99.9409%" y="575.50"></text></g><g><title>__mprotect (56 samples, 0.15%)</title><rect x="99.7289%" y="661" width="0.1518%" height="15" fill="rgb(222,18,33)" fg:x="36782" fg:w="56"/><text x="99.9789%" y="671.50"></text></g><g><title>[unknown] (56 samples, 0.15%)</title><rect x="99.7289%" y="645" width="0.1518%" height="15" fill="rgb(213,199,7)" fg:x="36782" fg:w="56"/><text x="99.9789%" y="655.50"></text></g><g><title>[unknown] (56 samples, 0.15%)</title><rect x="99.7289%" y="629" width="0.1518%" height="15" fill="rgb(250,110,10)" fg:x="36782" fg:w="56"/><text x="99.9789%" y="639.50"></text></g><g><title>[unknown] (55 samples, 0.15%)</title><rect x="99.7316%" y="613" width="0.1491%" height="15" fill="rgb(248,123,6)" fg:x="36783" fg:w="55"/><text x="99.9816%" y="623.50"></text></g><g><title>[unknown] (54 samples, 0.15%)</title><rect x="99.7343%" y="597" width="0.1464%" height="15" fill="rgb(206,91,31)" fg:x="36784" fg:w="54"/><text x="99.9843%" y="607.50"></text></g><g><title>[unknown] (48 samples, 0.13%)</title><rect x="99.7506%" y="581" width="0.1301%" height="15" fill="rgb(211,154,13)" fg:x="36790" fg:w="48"/><text x="100.0006%" y="591.50"></text></g><g><title>[unknown] (33 samples, 0.09%)</title><rect x="99.7912%" y="565" width="0.0895%" height="15" fill="rgb(225,148,7)" fg:x="36805" fg:w="33"/><text x="100.0412%" y="575.50"></text></g><g><title>[unknown] (13 samples, 0.04%)</title><rect x="99.8455%" y="549" width="0.0352%" height="15" fill="rgb(220,160,43)" fg:x="36825" fg:w="13"/><text x="100.0955%" y="559.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (164 samples, 0.44%)</title><rect x="99.4604%" y="677" width="0.4447%" height="15" fill="rgb(213,52,39)" fg:x="36683" fg:w="164"/><text x="99.7104%" y="687.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::sigstack_size (9 samples, 0.02%)</title><rect x="99.8807%" y="661" width="0.0244%" height="15" fill="rgb(243,137,7)" fg:x="36838" fg:w="9"/><text x="100.1307%" y="671.50"></text></g><g><title>__getauxval (9 samples, 0.02%)</title><rect x="99.8807%" y="645" width="0.0244%" height="15" fill="rgb(230,79,13)" fg:x="36838" fg:w="9"/><text x="100.1307%" y="655.50"></text></g><g><title>clone3 (29,260 samples, 79.33%)</title><rect x="20.5927%" y="757" width="79.3341%" height="15" fill="rgb(247,105,23)" fg:x="7595" fg:w="29260"/><text x="20.8427%" y="767.50">clone3</text></g><g><title>start_thread (29,142 samples, 79.01%)</title><rect x="20.9126%" y="741" width="79.0142%" height="15" fill="rgb(223,179,41)" fg:x="7713" fg:w="29142"/><text x="21.1626%" y="751.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (14,213 samples, 38.54%)</title><rect x="61.3904%" y="725" width="38.5364%" height="15" fill="rgb(218,9,34)" fg:x="22642" fg:w="14213"/><text x="61.6404%" y="735.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (13,532 samples, 36.69%)</title><rect x="63.2368%" y="709" width="36.6900%" height="15" fill="rgb(222,106,8)" fg:x="23323" fg:w="13532"/><text x="63.4868%" y="719.50">std::sys::pal::unix::stack_overflow::Handler::new</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (13,532 samples, 36.69%)</title><rect x="63.2368%" y="693" width="36.6900%" height="15" fill="rgb(211,220,0)" fg:x="23323" fg:w="13532"/><text x="63.4868%" y="703.50">std::sys::pal::unix::stack_overflow::imp::make_handler</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::Cell&lt;T&gt;&gt;::set (8 samples, 0.02%)</title><rect x="99.9051%" y="677" width="0.0217%" height="15" fill="rgb(229,52,16)" fg:x="36847" fg:w="8"/><text x="100.1551%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::initialize_with (8 samples, 0.02%)</title><rect x="99.9051%" y="661" width="0.0217%" height="15" fill="rgb(212,155,18)" fg:x="36847" fg:w="8"/><text x="100.1551%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::Cell&lt;T&gt;&gt;::set::_{{closure}} (8 samples, 0.02%)</title><rect x="99.9051%" y="645" width="0.0217%" height="15" fill="rgb(242,21,14)" fg:x="36847" fg:w="8"/><text x="100.1551%" y="655.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (8 samples, 0.02%)</title><rect x="99.9051%" y="629" width="0.0217%" height="15" fill="rgb(222,19,48)" fg:x="36847" fg:w="8"/><text x="100.1551%" y="639.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (8 samples, 0.02%)</title><rect x="99.9051%" y="613" width="0.0217%" height="15" fill="rgb(232,45,27)" fg:x="36847" fg:w="8"/><text x="100.1551%" y="623.50"></text></g><g><title>core::mem::replace (8 samples, 0.02%)</title><rect x="99.9051%" y="597" width="0.0217%" height="15" fill="rgb(249,103,42)" fg:x="36847" fg:w="8"/><text x="100.1551%" y="607.50"></text></g><g><title>core::ptr::write (8 samples, 0.02%)</title><rect x="99.9051%" y="581" width="0.0217%" height="15" fill="rgb(246,81,33)" fg:x="36847" fg:w="8"/><text x="100.1551%" y="591.50"></text></g><g><title>malloc (13 samples, 0.04%)</title><rect x="99.9268%" y="757" width="0.0352%" height="15" fill="rgb(252,33,42)" fg:x="36855" fg:w="13"/><text x="100.1768%" y="767.50"></text></g><g><title>tcache_init.part.0 (13 samples, 0.04%)</title><rect x="99.9268%" y="741" width="0.0352%" height="15" fill="rgb(209,212,41)" fg:x="36855" fg:w="13"/><text x="100.1768%" y="751.50"></text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (5 samples, 0.01%)</title><rect x="99.9648%" y="757" width="0.0136%" height="15" fill="rgb(207,154,6)" fg:x="36869" fg:w="5"/><text x="100.2148%" y="767.50"></text></g><g><title>_int_malloc (4 samples, 0.01%)</title><rect x="99.9837%" y="741" width="0.0108%" height="15" fill="rgb(223,64,47)" fg:x="36876" fg:w="4"/><text x="100.2337%" y="751.50"></text></g><g><title>all (36,882 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(211,161,38)" fg:x="0" fg:w="36882"/><text x="0.2500%" y="799.50"></text></g><g><title>julia (36,882 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(219,138,40)" fg:x="0" fg:w="36882"/><text x="0.2500%" y="783.50">julia</text></g><g><title>tcache_init.part.0 (6 samples, 0.02%)</title><rect x="99.9837%" y="757" width="0.0163%" height="15" fill="rgb(241,228,46)" fg:x="36876" fg:w="6"/><text x="100.2337%" y="767.50"></text></g></svg></svg>