<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="1249"><g><title>[unknown] (22 samples, 1.76%)</title><rect x="0.0000%" y="533" width="1.7614%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="22"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="1.7614%" y="517" width="0.1601%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="2"/><text x="2.0114%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.08%)</title><rect x="1.9215%" y="405" width="0.0801%" height="15" fill="rgb(221,193,54)" fg:x="24" fg:w="1"/><text x="2.1715%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="1.9215%" y="389" width="0.0801%" height="15" fill="rgb(248,212,6)" fg:x="24" fg:w="1"/><text x="2.1715%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="1.9215%" y="373" width="0.0801%" height="15" fill="rgb(208,68,35)" fg:x="24" fg:w="1"/><text x="2.1715%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="1.9215%" y="357" width="0.0801%" height="15" fill="rgb(232,128,0)" fg:x="24" fg:w="1"/><text x="2.1715%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="1.9215%" y="341" width="0.0801%" height="15" fill="rgb(207,160,47)" fg:x="24" fg:w="1"/><text x="2.1715%" y="351.50"></text></g><g><title>png::filter::filter (2 samples, 0.16%)</title><rect x="2.0016%" y="325" width="0.1601%" height="15" fill="rgb(228,23,34)" fg:x="25" fg:w="2"/><text x="2.2516%" y="335.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hf435395ad1d0636bE.llvm.10961210750292119113 (10 samples, 0.80%)</title><rect x="1.9215%" y="453" width="0.8006%" height="15" fill="rgb(218,30,26)" fg:x="24" fg:w="10"/><text x="2.1715%" y="463.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10 samples, 0.80%)</title><rect x="1.9215%" y="437" width="0.8006%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="10"/><text x="2.1715%" y="447.50"></text></g><g><title>julia::main (10 samples, 0.80%)</title><rect x="1.9215%" y="421" width="0.8006%" height="15" fill="rgb(250,228,42)" fg:x="24" fg:w="10"/><text x="2.1715%" y="431.50"></text></g><g><title>image::io::free_functions::save_buffer_impl (9 samples, 0.72%)</title><rect x="2.0016%" y="405" width="0.7206%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="9"/><text x="2.2516%" y="415.50"></text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (9 samples, 0.72%)</title><rect x="2.0016%" y="389" width="0.7206%" height="15" fill="rgb(216,20,37)" fg:x="25" fg:w="9"/><text x="2.2516%" y="399.50"></text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (9 samples, 0.72%)</title><rect x="2.0016%" y="373" width="0.7206%" height="15" fill="rgb(206,188,39)" fg:x="25" fg:w="9"/><text x="2.2516%" y="383.50"></text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode (9 samples, 0.72%)</title><rect x="2.0016%" y="357" width="0.7206%" height="15" fill="rgb(217,207,13)" fg:x="25" fg:w="9"/><text x="2.2516%" y="367.50"></text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (9 samples, 0.72%)</title><rect x="2.0016%" y="341" width="0.7206%" height="15" fill="rgb(231,73,38)" fg:x="25" fg:w="9"/><text x="2.2516%" y="351.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.56%)</title><rect x="2.1617%" y="325" width="0.5604%" height="15" fill="rgb(225,20,46)" fg:x="27" fg:w="7"/><text x="2.4117%" y="335.50"></text></g><g><title>deflate::compress::compress_data_dynamic_n (7 samples, 0.56%)</title><rect x="2.1617%" y="309" width="0.5604%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="7"/><text x="2.4117%" y="319.50"></text></g><g><title>deflate::lz77::lz77_compress_block (7 samples, 0.56%)</title><rect x="2.1617%" y="293" width="0.5604%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="7"/><text x="2.4117%" y="303.50"></text></g><g><title>deflate::matching::longest_match (2 samples, 0.16%)</title><rect x="2.5620%" y="277" width="0.1601%" height="15" fill="rgb(226,26,5)" fg:x="32" fg:w="2"/><text x="2.8120%" y="287.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (11 samples, 0.88%)</title><rect x="1.9215%" y="517" width="0.8807%" height="15" fill="rgb(249,33,26)" fg:x="24" fg:w="11"/><text x="2.1715%" y="527.50"></text></g><g><title>__libc_start_call_main (11 samples, 0.88%)</title><rect x="1.9215%" y="501" width="0.8807%" height="15" fill="rgb(235,183,28)" fg:x="24" fg:w="11"/><text x="2.1715%" y="511.50"></text></g><g><title>main (11 samples, 0.88%)</title><rect x="1.9215%" y="485" width="0.8807%" height="15" fill="rgb(221,5,38)" fg:x="24" fg:w="11"/><text x="2.1715%" y="495.50"></text></g><g><title>std::rt::lang_start_internal (11 samples, 0.88%)</title><rect x="1.9215%" y="469" width="0.8807%" height="15" fill="rgb(247,18,42)" fg:x="24" fg:w="11"/><text x="2.1715%" y="479.50"></text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (1 samples, 0.08%)</title><rect x="2.7222%" y="453" width="0.0801%" height="15" fill="rgb(241,131,45)" fg:x="34" fg:w="1"/><text x="2.9722%" y="463.50"></text></g><g><title>pthread_getaffinity_np@GLIBC_2.3.4 (1 samples, 0.08%)</title><rect x="2.7222%" y="437" width="0.0801%" height="15" fill="rgb(249,31,29)" fg:x="34" fg:w="1"/><text x="2.9722%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="2.7222%" y="421" width="0.0801%" height="15" fill="rgb(225,111,53)" fg:x="34" fg:w="1"/><text x="2.9722%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="2.8823%" y="501" width="0.2402%" height="15" fill="rgb(238,160,17)" fg:x="36" fg:w="3"/><text x="3.1323%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="3.0424%" y="485" width="0.0801%" height="15" fill="rgb(214,148,48)" fg:x="38" fg:w="1"/><text x="3.2924%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="3.0424%" y="469" width="0.0801%" height="15" fill="rgb(232,36,49)" fg:x="38" fg:w="1"/><text x="3.2924%" y="479.50"></text></g><g><title>_dl_start_final (1 samples, 0.08%)</title><rect x="3.1225%" y="501" width="0.0801%" height="15" fill="rgb(209,103,24)" fg:x="39" fg:w="1"/><text x="3.3725%" y="511.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.08%)</title><rect x="3.1225%" y="485" width="0.0801%" height="15" fill="rgb(229,88,8)" fg:x="39" fg:w="1"/><text x="3.3725%" y="495.50"></text></g><g><title>dl_main (1 samples, 0.08%)</title><rect x="3.1225%" y="469" width="0.0801%" height="15" fill="rgb(213,181,19)" fg:x="39" fg:w="1"/><text x="3.3725%" y="479.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.08%)</title><rect x="3.1225%" y="453" width="0.0801%" height="15" fill="rgb(254,191,54)" fg:x="39" fg:w="1"/><text x="3.3725%" y="463.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.08%)</title><rect x="3.1225%" y="437" width="0.0801%" height="15" fill="rgb(241,83,37)" fg:x="39" fg:w="1"/><text x="3.3725%" y="447.50"></text></g><g><title>openaux (1 samples, 0.08%)</title><rect x="3.1225%" y="421" width="0.0801%" height="15" fill="rgb(233,36,39)" fg:x="39" fg:w="1"/><text x="3.3725%" y="431.50"></text></g><g><title>_dl_map_object (1 samples, 0.08%)</title><rect x="3.1225%" y="405" width="0.0801%" height="15" fill="rgb(226,3,54)" fg:x="39" fg:w="1"/><text x="3.3725%" y="415.50"></text></g><g><title>_dl_name_match_p (1 samples, 0.08%)</title><rect x="3.1225%" y="389" width="0.0801%" height="15" fill="rgb(245,192,40)" fg:x="39" fg:w="1"/><text x="3.3725%" y="399.50"></text></g><g><title>strcmp (1 samples, 0.08%)</title><rect x="3.1225%" y="373" width="0.0801%" height="15" fill="rgb(238,167,29)" fg:x="39" fg:w="1"/><text x="3.3725%" y="383.50"></text></g><g><title>_start (19 samples, 1.52%)</title><rect x="1.7614%" y="533" width="1.5212%" height="15" fill="rgb(232,182,51)" fg:x="22" fg:w="19"/><text x="2.0114%" y="543.50"></text></g><g><title>_dl_start (6 samples, 0.48%)</title><rect x="2.8022%" y="517" width="0.4804%" height="15" fill="rgb(231,60,39)" fg:x="35" fg:w="6"/><text x="3.0522%" y="527.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.08%)</title><rect x="3.2026%" y="501" width="0.0801%" height="15" fill="rgb(208,69,12)" fg:x="40" fg:w="1"/><text x="3.4526%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="3.2826%" y="517" width="0.2402%" height="15" fill="rgb(235,93,37)" fg:x="41" fg:w="3"/><text x="3.5326%" y="527.50"></text></g><g><title>[unknown] (40 samples, 3.20%)</title><rect x="3.7630%" y="501" width="3.2026%" height="15" fill="rgb(213,116,39)" fg:x="47" fg:w="40"/><text x="4.0130%" y="511.50">[un..</text></g><g><title>[unknown] (32 samples, 2.56%)</title><rect x="4.4035%" y="485" width="2.5620%" height="15" fill="rgb(222,207,29)" fg:x="55" fg:w="32"/><text x="4.6535%" y="495.50">[u..</text></g><g><title>[unknown] (22 samples, 1.76%)</title><rect x="5.2042%" y="469" width="1.7614%" height="15" fill="rgb(206,96,30)" fg:x="65" fg:w="22"/><text x="5.4542%" y="479.50"></text></g><g><title>[unknown] (11 samples, 0.88%)</title><rect x="6.0849%" y="453" width="0.8807%" height="15" fill="rgb(218,138,4)" fg:x="76" fg:w="11"/><text x="6.3349%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="6.7254%" y="437" width="0.2402%" height="15" fill="rgb(250,191,14)" fg:x="84" fg:w="3"/><text x="6.9754%" y="447.50"></text></g><g><title>__ctype_init (1 samples, 0.08%)</title><rect x="6.9656%" y="501" width="0.0801%" height="15" fill="rgb(239,60,40)" fg:x="87" fg:w="1"/><text x="7.2156%" y="511.50"></text></g><g><title>_setjmp (3 samples, 0.24%)</title><rect x="7.0456%" y="501" width="0.2402%" height="15" fill="rgb(206,27,48)" fg:x="88" fg:w="3"/><text x="7.2956%" y="511.50"></text></g><g><title>&lt;rayon_core::registry::WorkerThread as core::convert::From&lt;rayon_core::registry::ThreadBuilder&gt;&gt;::from (1 samples, 0.08%)</title><rect x="7.4460%" y="437" width="0.0801%" height="15" fill="rgb(225,35,8)" fg:x="93" fg:w="1"/><text x="7.6960%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="7.4460%" y="421" width="0.0801%" height="15" fill="rgb(250,213,24)" fg:x="93" fg:w="1"/><text x="7.6960%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="21.7774%" y="373" width="0.2402%" height="15" fill="rgb(247,123,22)" fg:x="272" fg:w="3"/><text x="22.0274%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="21.7774%" y="357" width="0.2402%" height="15" fill="rgb(231,138,38)" fg:x="272" fg:w="3"/><text x="22.0274%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="21.8575%" y="341" width="0.1601%" height="15" fill="rgb(231,145,46)" fg:x="273" fg:w="2"/><text x="22.1075%" y="351.50"></text></g><g><title>hypot (106 samples, 8.49%)</title><rect x="22.0176%" y="373" width="8.4868%" height="15" fill="rgb(251,118,11)" fg:x="275" fg:w="106"/><text x="22.2676%" y="383.50">hypot</text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="30.3443%" y="357" width="0.1601%" height="15" fill="rgb(217,147,25)" fg:x="379" fg:w="2"/><text x="30.5943%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="30.3443%" y="341" width="0.1601%" height="15" fill="rgb(247,81,37)" fg:x="379" fg:w="2"/><text x="30.5943%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="30.3443%" y="325" width="0.1601%" height="15" fill="rgb(209,12,38)" fg:x="379" fg:w="2"/><text x="30.5943%" y="335.50"></text></g><g><title>[libm.so.6] (67 samples, 5.36%)</title><rect x="31.5452%" y="357" width="5.3643%" height="15" fill="rgb(227,1,9)" fg:x="394" fg:w="67"/><text x="31.7952%" y="367.50">[libm.s..</text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="36.8295%" y="341" width="0.0801%" height="15" fill="rgb(248,47,43)" fg:x="460" fg:w="1"/><text x="37.0795%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="36.8295%" y="325" width="0.0801%" height="15" fill="rgb(221,10,30)" fg:x="460" fg:w="1"/><text x="37.0795%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="36.9095%" y="357" width="0.0801%" height="15" fill="rgb(210,229,1)" fg:x="461" fg:w="1"/><text x="37.1595%" y="367.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (241 samples, 19.30%)</title><rect x="17.8543%" y="389" width="19.2954%" height="15" fill="rgb(222,148,37)" fg:x="223" fg:w="241"/><text x="18.1043%" y="399.50">&lt;rayon::iter::for_each::ForEac..</text></g><g><title>pow (83 samples, 6.65%)</title><rect x="30.5044%" y="373" width="6.6453%" height="15" fill="rgb(234,67,33)" fg:x="381" fg:w="83"/><text x="30.7544%" y="383.50">pow</text></g><g><title>__pow_finite@plt (2 samples, 0.16%)</title><rect x="36.9896%" y="357" width="0.1601%" height="15" fill="rgb(247,98,35)" fg:x="462" fg:w="2"/><text x="37.2396%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.40%)</title><rect x="37.1497%" y="389" width="0.4003%" height="15" fill="rgb(247,138,52)" fg:x="464" fg:w="5"/><text x="37.3997%" y="399.50"></text></g><g><title>[unknown] (4 samples, 0.32%)</title><rect x="37.2298%" y="373" width="0.3203%" height="15" fill="rgb(213,79,30)" fg:x="465" fg:w="4"/><text x="37.4798%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="37.3098%" y="357" width="0.2402%" height="15" fill="rgb(246,177,23)" fg:x="466" fg:w="3"/><text x="37.5598%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="37.4700%" y="341" width="0.0801%" height="15" fill="rgb(230,62,27)" fg:x="468" fg:w="1"/><text x="37.7200%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.40%)</title><rect x="53.3227%" y="373" width="0.4003%" height="15" fill="rgb(216,154,8)" fg:x="666" fg:w="5"/><text x="53.5727%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="53.4828%" y="357" width="0.2402%" height="15" fill="rgb(244,35,45)" fg:x="668" fg:w="3"/><text x="53.7328%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="53.5629%" y="341" width="0.1601%" height="15" fill="rgb(251,115,12)" fg:x="669" fg:w="2"/><text x="53.8129%" y="351.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (306 samples, 24.50%)</title><rect x="37.5500%" y="389" width="24.4996%" height="15" fill="rgb(240,54,50)" fg:x="469" fg:w="306"/><text x="37.8000%" y="399.50">std::sys::sync::mutex::futex::Mutex::lo..</text></g><g><title>syscall (104 samples, 8.33%)</title><rect x="53.7230%" y="373" width="8.3267%" height="15" fill="rgb(233,84,52)" fg:x="671" fg:w="104"/><text x="53.9730%" y="383.50">syscall</text></g><g><title>[unknown] (103 samples, 8.25%)</title><rect x="53.8030%" y="357" width="8.2466%" height="15" fill="rgb(207,117,47)" fg:x="672" fg:w="103"/><text x="54.0530%" y="367.50">[unknown]</text></g><g><title>[unknown] (99 samples, 7.93%)</title><rect x="54.1233%" y="341" width="7.9263%" height="15" fill="rgb(249,43,39)" fg:x="676" fg:w="99"/><text x="54.3733%" y="351.50">[unknown]</text></g><g><title>[unknown] (91 samples, 7.29%)</title><rect x="54.7638%" y="325" width="7.2858%" height="15" fill="rgb(209,38,44)" fg:x="684" fg:w="91"/><text x="55.0138%" y="335.50">[unknown]</text></g><g><title>[unknown] (84 samples, 6.73%)</title><rect x="55.3243%" y="309" width="6.7254%" height="15" fill="rgb(236,212,23)" fg:x="691" fg:w="84"/><text x="55.5743%" y="319.50">[unknown]</text></g><g><title>[unknown] (84 samples, 6.73%)</title><rect x="55.3243%" y="293" width="6.7254%" height="15" fill="rgb(242,79,21)" fg:x="691" fg:w="84"/><text x="55.5743%" y="303.50">[unknown]</text></g><g><title>[unknown] (77 samples, 6.16%)</title><rect x="55.8847%" y="277" width="6.1649%" height="15" fill="rgb(211,96,35)" fg:x="698" fg:w="77"/><text x="56.1347%" y="287.50">[unknown]</text></g><g><title>[unknown] (70 samples, 5.60%)</title><rect x="56.4452%" y="261" width="5.6045%" height="15" fill="rgb(253,215,40)" fg:x="705" fg:w="70"/><text x="56.6952%" y="271.50">[unknow..</text></g><g><title>[unknown] (63 samples, 5.04%)</title><rect x="57.0056%" y="245" width="5.0440%" height="15" fill="rgb(211,81,21)" fg:x="712" fg:w="63"/><text x="57.2556%" y="255.50">[unkno..</text></g><g><title>[unknown] (31 samples, 2.48%)</title><rect x="59.5677%" y="229" width="2.4820%" height="15" fill="rgb(208,190,38)" fg:x="744" fg:w="31"/><text x="59.8177%" y="239.50">[u..</text></g><g><title>[unknown] (17 samples, 1.36%)</title><rect x="60.6886%" y="213" width="1.3611%" height="15" fill="rgb(235,213,38)" fg:x="758" fg:w="17"/><text x="60.9386%" y="223.50"></text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (854 samples, 68.37%)</title><rect x="7.9263%" y="405" width="68.3747%" height="15" fill="rgb(237,122,38)" fg:x="99" fg:w="854"/><text x="8.1763%" y="415.50">&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with</text></g><g><title>syscall (178 samples, 14.25%)</title><rect x="62.0496%" y="389" width="14.2514%" height="15" fill="rgb(244,218,35)" fg:x="775" fg:w="178"/><text x="62.2996%" y="399.50">syscall</text></g><g><title>[unknown] (178 samples, 14.25%)</title><rect x="62.0496%" y="373" width="14.2514%" height="15" fill="rgb(240,68,47)" fg:x="775" fg:w="178"/><text x="62.2996%" y="383.50">[unknown]</text></g><g><title>[unknown] (167 samples, 13.37%)</title><rect x="62.9303%" y="357" width="13.3707%" height="15" fill="rgb(210,16,53)" fg:x="786" fg:w="167"/><text x="63.1803%" y="367.50">[unknown]</text></g><g><title>[unknown] (157 samples, 12.57%)</title><rect x="63.7310%" y="341" width="12.5701%" height="15" fill="rgb(235,124,12)" fg:x="796" fg:w="157"/><text x="63.9810%" y="351.50">[unknown]</text></g><g><title>[unknown] (142 samples, 11.37%)</title><rect x="64.9319%" y="325" width="11.3691%" height="15" fill="rgb(224,169,11)" fg:x="811" fg:w="142"/><text x="65.1819%" y="335.50">[unknown]</text></g><g><title>[unknown] (129 samples, 10.33%)</title><rect x="65.9728%" y="309" width="10.3283%" height="15" fill="rgb(250,166,2)" fg:x="824" fg:w="129"/><text x="66.2228%" y="319.50">[unknown]</text></g><g><title>[unknown] (75 samples, 6.00%)</title><rect x="70.2962%" y="293" width="6.0048%" height="15" fill="rgb(242,216,29)" fg:x="878" fg:w="75"/><text x="70.5462%" y="303.50">[unknown]</text></g><g><title>[unknown] (40 samples, 3.20%)</title><rect x="73.0985%" y="277" width="3.2026%" height="15" fill="rgb(230,116,27)" fg:x="913" fg:w="40"/><text x="73.3485%" y="287.50">[un..</text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="76.3010%" y="405" width="0.0801%" height="15" fill="rgb(228,99,48)" fg:x="953" fg:w="1"/><text x="76.5510%" y="415.50"></text></g><g><title>hypot (3 samples, 0.24%)</title><rect x="76.8615%" y="197" width="0.2402%" height="15" fill="rgb(253,11,6)" fg:x="960" fg:w="3"/><text x="77.1115%" y="207.50"></text></g><g><title>[libm.so.6] (8 samples, 0.64%)</title><rect x="77.1017%" y="181" width="0.6405%" height="15" fill="rgb(247,143,39)" fg:x="963" fg:w="8"/><text x="77.3517%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="77.6621%" y="165" width="0.0801%" height="15" fill="rgb(236,97,10)" fg:x="970" fg:w="1"/><text x="77.9121%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="77.6621%" y="149" width="0.0801%" height="15" fill="rgb(233,208,19)" fg:x="970" fg:w="1"/><text x="77.9121%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="77.6621%" y="133" width="0.0801%" height="15" fill="rgb(216,164,2)" fg:x="970" fg:w="1"/><text x="77.9121%" y="143.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (15 samples, 1.20%)</title><rect x="76.6213%" y="213" width="1.2010%" height="15" fill="rgb(220,129,5)" fg:x="957" fg:w="15"/><text x="76.8713%" y="223.50"></text></g><g><title>pow (9 samples, 0.72%)</title><rect x="77.1017%" y="197" width="0.7206%" height="15" fill="rgb(242,17,10)" fg:x="963" fg:w="9"/><text x="77.3517%" y="207.50"></text></g><g><title>__pow_finite@plt (1 samples, 0.08%)</title><rect x="77.7422%" y="181" width="0.0801%" height="15" fill="rgb(242,107,0)" fg:x="971" fg:w="1"/><text x="77.9922%" y="191.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (26 samples, 2.08%)</title><rect x="77.8223%" y="213" width="2.0817%" height="15" fill="rgb(251,28,31)" fg:x="972" fg:w="26"/><text x="78.0723%" y="223.50">s..</text></g><g><title>syscall (12 samples, 0.96%)</title><rect x="78.9432%" y="197" width="0.9608%" height="15" fill="rgb(233,223,10)" fg:x="986" fg:w="12"/><text x="79.1932%" y="207.50"></text></g><g><title>[unknown] (12 samples, 0.96%)</title><rect x="78.9432%" y="181" width="0.9608%" height="15" fill="rgb(215,21,27)" fg:x="986" fg:w="12"/><text x="79.1932%" y="191.50"></text></g><g><title>[unknown] (11 samples, 0.88%)</title><rect x="79.0232%" y="165" width="0.8807%" height="15" fill="rgb(232,23,21)" fg:x="987" fg:w="11"/><text x="79.2732%" y="175.50"></text></g><g><title>[unknown] (11 samples, 0.88%)</title><rect x="79.0232%" y="149" width="0.8807%" height="15" fill="rgb(244,5,23)" fg:x="987" fg:w="11"/><text x="79.2732%" y="159.50"></text></g><g><title>[unknown] (9 samples, 0.72%)</title><rect x="79.1833%" y="133" width="0.7206%" height="15" fill="rgb(226,81,46)" fg:x="989" fg:w="9"/><text x="79.4333%" y="143.50"></text></g><g><title>[unknown] (9 samples, 0.72%)</title><rect x="79.1833%" y="117" width="0.7206%" height="15" fill="rgb(247,70,30)" fg:x="989" fg:w="9"/><text x="79.4333%" y="127.50"></text></g><g><title>[unknown] (7 samples, 0.56%)</title><rect x="79.3435%" y="101" width="0.5604%" height="15" fill="rgb(212,68,19)" fg:x="991" fg:w="7"/><text x="79.5935%" y="111.50"></text></g><g><title>[unknown] (6 samples, 0.48%)</title><rect x="79.4235%" y="85" width="0.4804%" height="15" fill="rgb(240,187,13)" fg:x="992" fg:w="6"/><text x="79.6735%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.40%)</title><rect x="79.5036%" y="69" width="0.4003%" height="15" fill="rgb(223,113,26)" fg:x="993" fg:w="5"/><text x="79.7536%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="79.6637%" y="53" width="0.2402%" height="15" fill="rgb(206,192,2)" fg:x="995" fg:w="3"/><text x="79.9137%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="79.8239%" y="37" width="0.0801%" height="15" fill="rgb(241,108,4)" fg:x="997" fg:w="1"/><text x="80.0739%" y="47.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (54 samples, 4.32%)</title><rect x="76.3811%" y="325" width="4.3235%" height="15" fill="rgb(247,173,49)" fg:x="954" fg:w="54"/><text x="76.6311%" y="335.50">rayon..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (54 samples, 4.32%)</title><rect x="76.3811%" y="309" width="4.3235%" height="15" fill="rgb(224,114,35)" fg:x="954" fg:w="54"/><text x="76.6311%" y="319.50">_ZN10..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (54 samples, 4.32%)</title><rect x="76.3811%" y="293" width="4.3235%" height="15" fill="rgb(245,159,27)" fg:x="954" fg:w="54"/><text x="76.6311%" y="303.50">rayon..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (54 samples, 4.32%)</title><rect x="76.3811%" y="277" width="4.3235%" height="15" fill="rgb(245,172,44)" fg:x="954" fg:w="54"/><text x="76.6311%" y="287.50">_ZN10..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (54 samples, 4.32%)</title><rect x="76.3811%" y="261" width="4.3235%" height="15" fill="rgb(236,23,11)" fg:x="954" fg:w="54"/><text x="76.6311%" y="271.50">rayon..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (54 samples, 4.32%)</title><rect x="76.3811%" y="245" width="4.3235%" height="15" fill="rgb(205,117,38)" fg:x="954" fg:w="54"/><text x="76.6311%" y="255.50">_ZN10..</text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (54 samples, 4.32%)</title><rect x="76.3811%" y="229" width="4.3235%" height="15" fill="rgb(237,72,25)" fg:x="954" fg:w="54"/><text x="76.6311%" y="239.50">&lt;&amp;ray..</text></g><g><title>syscall (10 samples, 0.80%)</title><rect x="79.9039%" y="213" width="0.8006%" height="15" fill="rgb(244,70,9)" fg:x="998" fg:w="10"/><text x="80.1539%" y="223.50"></text></g><g><title>[unknown] (10 samples, 0.80%)</title><rect x="79.9039%" y="197" width="0.8006%" height="15" fill="rgb(217,125,39)" fg:x="998" fg:w="10"/><text x="80.1539%" y="207.50"></text></g><g><title>[unknown] (9 samples, 0.72%)</title><rect x="79.9840%" y="181" width="0.7206%" height="15" fill="rgb(235,36,10)" fg:x="999" fg:w="9"/><text x="80.2340%" y="191.50"></text></g><g><title>[unknown] (9 samples, 0.72%)</title><rect x="79.9840%" y="165" width="0.7206%" height="15" fill="rgb(251,123,47)" fg:x="999" fg:w="9"/><text x="80.2340%" y="175.50"></text></g><g><title>[unknown] (8 samples, 0.64%)</title><rect x="80.0641%" y="149" width="0.6405%" height="15" fill="rgb(221,13,13)" fg:x="1000" fg:w="8"/><text x="80.3141%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.64%)</title><rect x="80.0641%" y="133" width="0.6405%" height="15" fill="rgb(238,131,9)" fg:x="1000" fg:w="8"/><text x="80.3141%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="80.4644%" y="117" width="0.2402%" height="15" fill="rgb(211,50,8)" fg:x="1005" fg:w="3"/><text x="80.7144%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="80.6245%" y="101" width="0.0801%" height="15" fill="rgb(245,182,24)" fg:x="1007" fg:w="1"/><text x="80.8745%" y="111.50"></text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.14265911014712945648 (55 samples, 4.40%)</title><rect x="76.3811%" y="405" width="4.4035%" height="15" fill="rgb(242,14,37)" fg:x="954" fg:w="55"/><text x="76.6311%" y="415.50">_ZN10..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (55 samples, 4.40%)</title><rect x="76.3811%" y="389" width="4.4035%" height="15" fill="rgb(246,228,12)" fg:x="954" fg:w="55"/><text x="76.6311%" y="399.50">rayon..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (55 samples, 4.40%)</title><rect x="76.3811%" y="373" width="4.4035%" height="15" fill="rgb(213,55,15)" fg:x="954" fg:w="55"/><text x="76.6311%" y="383.50">_ZN10..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (55 samples, 4.40%)</title><rect x="76.3811%" y="357" width="4.4035%" height="15" fill="rgb(209,9,3)" fg:x="954" fg:w="55"/><text x="76.6311%" y="367.50">rayon..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (55 samples, 4.40%)</title><rect x="76.3811%" y="341" width="4.4035%" height="15" fill="rgb(230,59,30)" fg:x="954" fg:w="55"/><text x="76.6311%" y="351.50">_ZN10..</text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (1 samples, 0.08%)</title><rect x="80.7046%" y="325" width="0.0801%" height="15" fill="rgb(209,121,21)" fg:x="1008" fg:w="1"/><text x="80.9546%" y="335.50"></text></g><g><title>_ZN10rayon_core5sleep5Sleep20wake_specific_thread17h2bdc3163ae94435fE.llvm.10230076001019170191 (1 samples, 0.08%)</title><rect x="80.7046%" y="309" width="0.0801%" height="15" fill="rgb(220,109,13)" fg:x="1008" fg:w="1"/><text x="80.9546%" y="319.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.08%)</title><rect x="80.7046%" y="293" width="0.0801%" height="15" fill="rgb(232,18,1)" fg:x="1008" fg:w="1"/><text x="80.9546%" y="303.50"></text></g><g><title>syscall (1 samples, 0.08%)</title><rect x="80.7046%" y="277" width="0.0801%" height="15" fill="rgb(215,41,42)" fg:x="1008" fg:w="1"/><text x="80.9546%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="80.7046%" y="261" width="0.0801%" height="15" fill="rgb(224,123,36)" fg:x="1008" fg:w="1"/><text x="80.9546%" y="271.50"></text></g><g><title>hypot (15 samples, 1.20%)</title><rect x="82.3058%" y="309" width="1.2010%" height="15" fill="rgb(240,125,3)" fg:x="1028" fg:w="15"/><text x="82.5558%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="83.4267%" y="293" width="0.0801%" height="15" fill="rgb(205,98,50)" fg:x="1042" fg:w="1"/><text x="83.6767%" y="303.50"></text></g><g><title>[libm.so.6] (11 samples, 0.88%)</title><rect x="83.6669%" y="293" width="0.8807%" height="15" fill="rgb(205,185,37)" fg:x="1045" fg:w="11"/><text x="83.9169%" y="303.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (37 samples, 2.96%)</title><rect x="81.6653%" y="325" width="2.9624%" height="15" fill="rgb(238,207,15)" fg:x="1020" fg:w="37"/><text x="81.9153%" y="335.50">&lt;ra..</text></g><g><title>pow (14 samples, 1.12%)</title><rect x="83.5068%" y="309" width="1.1209%" height="15" fill="rgb(213,199,42)" fg:x="1043" fg:w="14"/><text x="83.7568%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="84.5476%" y="293" width="0.0801%" height="15" fill="rgb(235,201,11)" fg:x="1056" fg:w="1"/><text x="84.7976%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="84.5476%" y="277" width="0.0801%" height="15" fill="rgb(207,46,11)" fg:x="1056" fg:w="1"/><text x="84.7976%" y="287.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (37 samples, 2.96%)</title><rect x="84.6277%" y="325" width="2.9624%" height="15" fill="rgb(241,35,35)" fg:x="1057" fg:w="37"/><text x="84.8777%" y="335.50">std..</text></g><g><title>syscall (16 samples, 1.28%)</title><rect x="86.3090%" y="309" width="1.2810%" height="15" fill="rgb(243,32,47)" fg:x="1078" fg:w="16"/><text x="86.5590%" y="319.50"></text></g><g><title>[unknown] (16 samples, 1.28%)</title><rect x="86.3090%" y="293" width="1.2810%" height="15" fill="rgb(247,202,23)" fg:x="1078" fg:w="16"/><text x="86.5590%" y="303.50"></text></g><g><title>[unknown] (16 samples, 1.28%)</title><rect x="86.3090%" y="277" width="1.2810%" height="15" fill="rgb(219,102,11)" fg:x="1078" fg:w="16"/><text x="86.5590%" y="287.50"></text></g><g><title>[unknown] (16 samples, 1.28%)</title><rect x="86.3090%" y="261" width="1.2810%" height="15" fill="rgb(243,110,44)" fg:x="1078" fg:w="16"/><text x="86.5590%" y="271.50"></text></g><g><title>[unknown] (16 samples, 1.28%)</title><rect x="86.3090%" y="245" width="1.2810%" height="15" fill="rgb(222,74,54)" fg:x="1078" fg:w="16"/><text x="86.5590%" y="255.50"></text></g><g><title>[unknown] (16 samples, 1.28%)</title><rect x="86.3090%" y="229" width="1.2810%" height="15" fill="rgb(216,99,12)" fg:x="1078" fg:w="16"/><text x="86.5590%" y="239.50"></text></g><g><title>[unknown] (15 samples, 1.20%)</title><rect x="86.3891%" y="213" width="1.2010%" height="15" fill="rgb(226,22,26)" fg:x="1079" fg:w="15"/><text x="86.6391%" y="223.50"></text></g><g><title>[unknown] (15 samples, 1.20%)</title><rect x="86.3891%" y="197" width="1.2010%" height="15" fill="rgb(217,163,10)" fg:x="1079" fg:w="15"/><text x="86.6391%" y="207.50"></text></g><g><title>[unknown] (14 samples, 1.12%)</title><rect x="86.4692%" y="181" width="1.1209%" height="15" fill="rgb(213,25,53)" fg:x="1080" fg:w="14"/><text x="86.7192%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.48%)</title><rect x="87.1097%" y="165" width="0.4804%" height="15" fill="rgb(252,105,26)" fg:x="1088" fg:w="6"/><text x="87.3597%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="87.3499%" y="149" width="0.2402%" height="15" fill="rgb(220,39,43)" fg:x="1091" fg:w="3"/><text x="87.5999%" y="159.50"></text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (106 samples, 8.49%)</title><rect x="80.8647%" y="341" width="8.4868%" height="15" fill="rgb(229,68,48)" fg:x="1010" fg:w="106"/><text x="81.1147%" y="351.50">&lt;&amp;rayon::ite..</text></g><g><title>syscall (22 samples, 1.76%)</title><rect x="87.5901%" y="325" width="1.7614%" height="15" fill="rgb(252,8,32)" fg:x="1094" fg:w="22"/><text x="87.8401%" y="335.50"></text></g><g><title>[unknown] (21 samples, 1.68%)</title><rect x="87.6701%" y="309" width="1.6813%" height="15" fill="rgb(223,20,43)" fg:x="1095" fg:w="21"/><text x="87.9201%" y="319.50"></text></g><g><title>[unknown] (20 samples, 1.60%)</title><rect x="87.7502%" y="293" width="1.6013%" height="15" fill="rgb(229,81,49)" fg:x="1096" fg:w="20"/><text x="88.0002%" y="303.50"></text></g><g><title>[unknown] (18 samples, 1.44%)</title><rect x="87.9103%" y="277" width="1.4412%" height="15" fill="rgb(236,28,36)" fg:x="1098" fg:w="18"/><text x="88.1603%" y="287.50"></text></g><g><title>[unknown] (17 samples, 1.36%)</title><rect x="87.9904%" y="261" width="1.3611%" height="15" fill="rgb(249,185,26)" fg:x="1099" fg:w="17"/><text x="88.2404%" y="271.50"></text></g><g><title>[unknown] (16 samples, 1.28%)</title><rect x="88.0705%" y="245" width="1.2810%" height="15" fill="rgb(249,174,33)" fg:x="1100" fg:w="16"/><text x="88.3205%" y="255.50"></text></g><g><title>[unknown] (10 samples, 0.80%)</title><rect x="88.5508%" y="229" width="0.8006%" height="15" fill="rgb(233,201,37)" fg:x="1106" fg:w="10"/><text x="88.8008%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.56%)</title><rect x="88.7910%" y="213" width="0.5604%" height="15" fill="rgb(221,78,26)" fg:x="1109" fg:w="7"/><text x="89.0410%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="90.0721%" y="181" width="0.1601%" height="15" fill="rgb(250,127,30)" fg:x="1125" fg:w="2"/><text x="90.3221%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="90.0721%" y="165" width="0.1601%" height="15" fill="rgb(230,49,44)" fg:x="1125" fg:w="2"/><text x="90.3221%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="90.0721%" y="149" width="0.1601%" height="15" fill="rgb(229,67,23)" fg:x="1125" fg:w="2"/><text x="90.3221%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="90.1521%" y="133" width="0.0801%" height="15" fill="rgb(249,83,47)" fg:x="1126" fg:w="1"/><text x="90.4021%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="90.1521%" y="117" width="0.0801%" height="15" fill="rgb(215,43,3)" fg:x="1126" fg:w="1"/><text x="90.4021%" y="127.50"></text></g><g><title>hypot (7 samples, 0.56%)</title><rect x="90.2322%" y="181" width="0.5604%" height="15" fill="rgb(238,154,13)" fg:x="1127" fg:w="7"/><text x="90.4822%" y="191.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (16 samples, 1.28%)</title><rect x="89.8319%" y="197" width="1.2810%" height="15" fill="rgb(219,56,2)" fg:x="1122" fg:w="16"/><text x="90.0819%" y="207.50"></text></g><g><title>pow (4 samples, 0.32%)</title><rect x="90.7926%" y="181" width="0.3203%" height="15" fill="rgb(233,0,4)" fg:x="1134" fg:w="4"/><text x="91.0426%" y="191.50"></text></g><g><title>[libm.so.6] (4 samples, 0.32%)</title><rect x="90.7926%" y="165" width="0.3203%" height="15" fill="rgb(235,30,7)" fg:x="1134" fg:w="4"/><text x="91.0426%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="91.1129%" y="197" width="0.1601%" height="15" fill="rgb(250,79,13)" fg:x="1138" fg:w="2"/><text x="91.3629%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="91.1930%" y="181" width="0.0801%" height="15" fill="rgb(211,146,34)" fg:x="1139" fg:w="1"/><text x="91.4430%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="91.1930%" y="165" width="0.0801%" height="15" fill="rgb(228,22,38)" fg:x="1139" fg:w="1"/><text x="91.4430%" y="175.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (25 samples, 2.00%)</title><rect x="91.2730%" y="197" width="2.0016%" height="15" fill="rgb(235,168,5)" fg:x="1140" fg:w="25"/><text x="91.5230%" y="207.50">s..</text></g><g><title>syscall (9 samples, 0.72%)</title><rect x="92.5540%" y="181" width="0.7206%" height="15" fill="rgb(221,155,16)" fg:x="1156" fg:w="9"/><text x="92.8040%" y="191.50"></text></g><g><title>[unknown] (9 samples, 0.72%)</title><rect x="92.5540%" y="165" width="0.7206%" height="15" fill="rgb(215,215,53)" fg:x="1156" fg:w="9"/><text x="92.8040%" y="175.50"></text></g><g><title>[unknown] (8 samples, 0.64%)</title><rect x="92.6341%" y="149" width="0.6405%" height="15" fill="rgb(223,4,10)" fg:x="1157" fg:w="8"/><text x="92.8841%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.64%)</title><rect x="92.6341%" y="133" width="0.6405%" height="15" fill="rgb(234,103,6)" fg:x="1157" fg:w="8"/><text x="92.8841%" y="143.50"></text></g><g><title>[unknown] (8 samples, 0.64%)</title><rect x="92.6341%" y="117" width="0.6405%" height="15" fill="rgb(227,97,0)" fg:x="1157" fg:w="8"/><text x="92.8841%" y="127.50"></text></g><g><title>[unknown] (8 samples, 0.64%)</title><rect x="92.6341%" y="101" width="0.6405%" height="15" fill="rgb(234,150,53)" fg:x="1157" fg:w="8"/><text x="92.8841%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.56%)</title><rect x="92.7142%" y="85" width="0.5604%" height="15" fill="rgb(228,201,54)" fg:x="1158" fg:w="7"/><text x="92.9642%" y="95.50"></text></g><g><title>[unknown] (7 samples, 0.56%)</title><rect x="92.7142%" y="69" width="0.5604%" height="15" fill="rgb(222,22,37)" fg:x="1158" fg:w="7"/><text x="92.9642%" y="79.50"></text></g><g><title>[unknown] (7 samples, 0.56%)</title><rect x="92.7142%" y="53" width="0.5604%" height="15" fill="rgb(237,53,32)" fg:x="1158" fg:w="7"/><text x="92.9642%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="93.1946%" y="37" width="0.0801%" height="15" fill="rgb(233,25,53)" fg:x="1164" fg:w="1"/><text x="93.4446%" y="47.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1,088 samples, 87.11%)</title><rect x="7.6861%" y="421" width="87.1097%" height="15" fill="rgb(210,40,34)" fg:x="96" fg:w="1088"/><text x="7.9361%" y="431.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (175 samples, 14.01%)</title><rect x="80.7846%" y="405" width="14.0112%" height="15" fill="rgb(241,220,44)" fg:x="1009" fg:w="175"/><text x="81.0346%" y="415.50">rayon::iter::plumbing..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (174 samples, 13.93%)</title><rect x="80.8647%" y="389" width="13.9311%" height="15" fill="rgb(235,28,35)" fg:x="1010" fg:w="174"/><text x="81.1147%" y="399.50">_ZN10rayon_core4join1..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (174 samples, 13.93%)</title><rect x="80.8647%" y="373" width="13.9311%" height="15" fill="rgb(210,56,17)" fg:x="1010" fg:w="174"/><text x="81.1147%" y="383.50">rayon::iter::plumbing..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (174 samples, 13.93%)</title><rect x="80.8647%" y="357" width="13.9311%" height="15" fill="rgb(224,130,29)" fg:x="1010" fg:w="174"/><text x="81.1147%" y="367.50">_ZN10rayon_core4join1..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (68 samples, 5.44%)</title><rect x="89.3515%" y="341" width="5.4444%" height="15" fill="rgb(235,212,8)" fg:x="1116" fg:w="68"/><text x="89.6015%" y="351.50">rayon::..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (68 samples, 5.44%)</title><rect x="89.3515%" y="325" width="5.4444%" height="15" fill="rgb(223,33,50)" fg:x="1116" fg:w="68"/><text x="89.6015%" y="335.50">_ZN10ra..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (68 samples, 5.44%)</title><rect x="89.3515%" y="309" width="5.4444%" height="15" fill="rgb(219,149,13)" fg:x="1116" fg:w="68"/><text x="89.6015%" y="319.50">rayon::..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (68 samples, 5.44%)</title><rect x="89.3515%" y="293" width="5.4444%" height="15" fill="rgb(250,156,29)" fg:x="1116" fg:w="68"/><text x="89.6015%" y="303.50">_ZN10ra..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (68 samples, 5.44%)</title><rect x="89.3515%" y="277" width="5.4444%" height="15" fill="rgb(216,193,19)" fg:x="1116" fg:w="68"/><text x="89.6015%" y="287.50">rayon::..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (68 samples, 5.44%)</title><rect x="89.3515%" y="261" width="5.4444%" height="15" fill="rgb(216,135,14)" fg:x="1116" fg:w="68"/><text x="89.6015%" y="271.50">_ZN10ra..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (68 samples, 5.44%)</title><rect x="89.3515%" y="245" width="5.4444%" height="15" fill="rgb(241,47,5)" fg:x="1116" fg:w="68"/><text x="89.6015%" y="255.50">rayon::..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17h2c13059501a4332fE.llvm.8374713244458335299 (68 samples, 5.44%)</title><rect x="89.3515%" y="229" width="5.4444%" height="15" fill="rgb(233,42,35)" fg:x="1116" fg:w="68"/><text x="89.6015%" y="239.50">_ZN10ra..</text></g><g><title>&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (68 samples, 5.44%)</title><rect x="89.3515%" y="213" width="5.4444%" height="15" fill="rgb(231,13,6)" fg:x="1116" fg:w="68"/><text x="89.6015%" y="223.50">&lt;&amp;rayon..</text></g><g><title>syscall (19 samples, 1.52%)</title><rect x="93.2746%" y="197" width="1.5212%" height="15" fill="rgb(207,181,40)" fg:x="1165" fg:w="19"/><text x="93.5246%" y="207.50"></text></g><g><title>[unknown] (19 samples, 1.52%)</title><rect x="93.2746%" y="181" width="1.5212%" height="15" fill="rgb(254,173,49)" fg:x="1165" fg:w="19"/><text x="93.5246%" y="191.50"></text></g><g><title>[unknown] (15 samples, 1.20%)</title><rect x="93.5949%" y="165" width="1.2010%" height="15" fill="rgb(221,1,38)" fg:x="1169" fg:w="15"/><text x="93.8449%" y="175.50"></text></g><g><title>[unknown] (14 samples, 1.12%)</title><rect x="93.6749%" y="149" width="1.1209%" height="15" fill="rgb(206,124,46)" fg:x="1170" fg:w="14"/><text x="93.9249%" y="159.50"></text></g><g><title>[unknown] (13 samples, 1.04%)</title><rect x="93.7550%" y="133" width="1.0408%" height="15" fill="rgb(249,21,11)" fg:x="1171" fg:w="13"/><text x="94.0050%" y="143.50"></text></g><g><title>[unknown] (11 samples, 0.88%)</title><rect x="93.9151%" y="117" width="0.8807%" height="15" fill="rgb(222,201,40)" fg:x="1173" fg:w="11"/><text x="94.1651%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.48%)</title><rect x="94.3155%" y="101" width="0.4804%" height="15" fill="rgb(235,61,29)" fg:x="1178" fg:w="6"/><text x="94.5655%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="94.6357%" y="85" width="0.1601%" height="15" fill="rgb(219,207,3)" fg:x="1182" fg:w="2"/><text x="94.8857%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.96%)</title><rect x="94.8759%" y="405" width="0.9608%" height="15" fill="rgb(222,56,46)" fg:x="1185" fg:w="12"/><text x="95.1259%" y="415.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (9 samples, 0.72%)</title><rect x="95.1161%" y="389" width="0.7206%" height="15" fill="rgb(239,76,54)" fg:x="1188" fg:w="9"/><text x="95.3661%" y="399.50"></text></g><g><title>crossbeam_epoch::default::with_handle (2 samples, 0.16%)</title><rect x="95.6765%" y="373" width="0.1601%" height="15" fill="rgb(231,124,27)" fg:x="1195" fg:w="2"/><text x="95.9265%" y="383.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (1 samples, 0.08%)</title><rect x="95.8367%" y="405" width="0.0801%" height="15" fill="rgb(249,195,6)" fg:x="1197" fg:w="1"/><text x="96.0867%" y="415.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (6 samples, 0.48%)</title><rect x="95.9167%" y="405" width="0.4804%" height="15" fill="rgb(237,174,47)" fg:x="1198" fg:w="6"/><text x="96.1667%" y="415.50"></text></g><g><title>crossbeam_epoch::default::with_handle (3 samples, 0.24%)</title><rect x="96.1569%" y="389" width="0.2402%" height="15" fill="rgb(206,201,31)" fg:x="1201" fg:w="3"/><text x="96.4069%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="96.3171%" y="373" width="0.0801%" height="15" fill="rgb(231,57,52)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="96.3171%" y="357" width="0.0801%" height="15" fill="rgb(248,177,22)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="96.3171%" y="341" width="0.0801%" height="15" fill="rgb(215,211,37)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="96.3171%" y="325" width="0.0801%" height="15" fill="rgb(241,128,51)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="335.50"></text></g><g><title>_ZN10rayon_core8registry12WorkerThread9find_work17hd610e128dad4f778E.llvm.16070861560703822688 (21 samples, 1.68%)</title><rect x="94.7958%" y="421" width="1.6813%" height="15" fill="rgb(227,165,31)" fg:x="1184" fg:w="21"/><text x="95.0458%" y="431.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.08%)</title><rect x="96.3971%" y="405" width="0.0801%" height="15" fill="rgb(228,167,24)" fg:x="1204" fg:w="1"/><text x="96.6471%" y="415.50"></text></g><g><title>__sched_yield (7 samples, 0.56%)</title><rect x="96.4772%" y="421" width="0.5604%" height="15" fill="rgb(228,143,12)" fg:x="1205" fg:w="7"/><text x="96.7272%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.56%)</title><rect x="96.4772%" y="405" width="0.5604%" height="15" fill="rgb(249,149,8)" fg:x="1205" fg:w="7"/><text x="96.7272%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.48%)</title><rect x="96.5572%" y="389" width="0.4804%" height="15" fill="rgb(243,35,44)" fg:x="1206" fg:w="6"/><text x="96.8072%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.48%)</title><rect x="96.5572%" y="373" width="0.4804%" height="15" fill="rgb(246,89,9)" fg:x="1206" fg:w="6"/><text x="96.8072%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.32%)</title><rect x="96.7174%" y="357" width="0.3203%" height="15" fill="rgb(233,213,13)" fg:x="1208" fg:w="4"/><text x="96.9674%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="96.8775%" y="341" width="0.1601%" height="15" fill="rgb(233,141,41)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="351.50"></text></g><g><title>_ZN3std3sys12thread_local10fast_local12Key$LT$T$GT$14try_initialize17h153542a2ec90f127E.llvm.18001887446347980344 (1 samples, 0.08%)</title><rect x="97.0376%" y="405" width="0.0801%" height="15" fill="rgb(239,167,4)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="415.50"></text></g><g><title>crossbeam_epoch::collector::Collector::register (1 samples, 0.08%)</title><rect x="97.0376%" y="389" width="0.0801%" height="15" fill="rgb(209,217,16)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="399.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (2 samples, 0.16%)</title><rect x="97.0376%" y="421" width="0.1601%" height="15" fill="rgb(219,88,35)" fg:x="1212" fg:w="2"/><text x="97.2876%" y="431.50"></text></g><g><title>crossbeam_epoch::default::with_handle (1 samples, 0.08%)</title><rect x="97.1177%" y="405" width="0.0801%" height="15" fill="rgb(220,193,23)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="415.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.08%)</title><rect x="97.1177%" y="389" width="0.0801%" height="15" fill="rgb(230,90,52)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="399.50"></text></g><g><title>_ZN15crossbeam_epoch8internal6Global11try_advance17hd59bd27913f52834E.llvm.14406209016570208827 (1 samples, 0.08%)</title><rect x="97.1177%" y="373" width="0.0801%" height="15" fill="rgb(252,106,19)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,126 samples, 90.15%)</title><rect x="7.2858%" y="485" width="90.1521%" height="15" fill="rgb(206,74,20)" fg:x="91" fg:w="1126"/><text x="7.5358%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,124 samples, 89.99%)</title><rect x="7.4460%" y="469" width="89.9920%" height="15" fill="rgb(230,138,44)" fg:x="93" fg:w="1124"/><text x="7.6960%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rayon_core::registry::ThreadBuilder::run (1,124 samples, 89.99%)</title><rect x="7.4460%" y="453" width="89.9920%" height="15" fill="rgb(235,182,43)" fg:x="93" fg:w="1124"/><text x="7.6960%" y="463.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1,123 samples, 89.91%)</title><rect x="7.5260%" y="437" width="89.9119%" height="15" fill="rgb(242,16,51)" fg:x="94" fg:w="1123"/><text x="7.7760%" y="447.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon_core::sleep::Sleep::sleep (3 samples, 0.24%)</title><rect x="97.1978%" y="421" width="0.2402%" height="15" fill="rgb(248,9,4)" fg:x="1214" fg:w="3"/><text x="97.4478%" y="431.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (1 samples, 0.08%)</title><rect x="97.3579%" y="405" width="0.0801%" height="15" fill="rgb(210,31,22)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="415.50"></text></g><g><title>__GI___sigaltstack (1 samples, 0.08%)</title><rect x="97.5180%" y="469" width="0.0801%" height="15" fill="rgb(239,54,39)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="97.5180%" y="453" width="0.0801%" height="15" fill="rgb(230,99,41)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="97.5180%" y="437" width="0.0801%" height="15" fill="rgb(253,106,12)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="97.5180%" y="421" width="0.0801%" height="15" fill="rgb(213,46,41)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="97.5180%" y="405" width="0.0801%" height="15" fill="rgb(215,133,35)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="97.5180%" y="389" width="0.0801%" height="15" fill="rgb(213,28,5)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="399.50"></text></g><g><title>pthread_attr_getguardsize@@GLIBC_2.34 (1 samples, 0.08%)</title><rect x="97.5981%" y="469" width="0.0801%" height="15" fill="rgb(215,77,49)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="97.9984%" y="437" width="0.0801%" height="15" fill="rgb(248,100,22)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="447.50"></text></g><g><title>_int_malloc (1 samples, 0.08%)</title><rect x="97.9984%" y="421" width="0.0801%" height="15" fill="rgb(208,67,9)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="431.50"></text></g><g><title>alloc_new_heap (1 samples, 0.08%)</title><rect x="97.9984%" y="405" width="0.0801%" height="15" fill="rgb(219,133,21)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="97.9984%" y="389" width="0.0801%" height="15" fill="rgb(246,46,29)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="399.50"></text></g><g><title>_int_malloc (1 samples, 0.08%)</title><rect x="98.0785%" y="421" width="0.0801%" height="15" fill="rgb(246,185,52)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="98.9592%" y="389" width="0.1601%" height="15" fill="rgb(252,136,11)" fg:x="1236" fg:w="2"/><text x="99.2092%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="98.9592%" y="373" width="0.1601%" height="15" fill="rgb(219,138,53)" fg:x="1236" fg:w="2"/><text x="99.2092%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.0392%" y="357" width="0.0801%" height="15" fill="rgb(211,51,23)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.0392%" y="341" width="0.0801%" height="15" fill="rgb(247,221,28)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.0392%" y="325" width="0.0801%" height="15" fill="rgb(251,222,45)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.0392%" y="309" width="0.0801%" height="15" fill="rgb(217,162,53)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="319.50"></text></g><g><title>__mmap (4 samples, 0.32%)</title><rect x="99.1193%" y="389" width="0.3203%" height="15" fill="rgb(229,93,14)" fg:x="1238" fg:w="4"/><text x="99.3693%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="99.1994%" y="373" width="0.2402%" height="15" fill="rgb(209,67,49)" fg:x="1239" fg:w="3"/><text x="99.4494%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="99.1994%" y="357" width="0.2402%" height="15" fill="rgb(213,87,29)" fg:x="1239" fg:w="3"/><text x="99.4494%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="99.1994%" y="341" width="0.2402%" height="15" fill="rgb(205,151,52)" fg:x="1239" fg:w="3"/><text x="99.4494%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="99.1994%" y="325" width="0.2402%" height="15" fill="rgb(253,215,39)" fg:x="1239" fg:w="3"/><text x="99.4494%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.3595%" y="309" width="0.0801%" height="15" fill="rgb(221,220,41)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="319.50"></text></g><g><title>alloc_new_heap (9 samples, 0.72%)</title><rect x="98.7990%" y="405" width="0.7206%" height="15" fill="rgb(218,133,21)" fg:x="1234" fg:w="9"/><text x="99.0490%" y="415.50"></text></g><g><title>__munmap (1 samples, 0.08%)</title><rect x="99.4396%" y="389" width="0.0801%" height="15" fill="rgb(221,193,43)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.4396%" y="373" width="0.0801%" height="15" fill="rgb(240,128,52)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.4396%" y="357" width="0.0801%" height="15" fill="rgb(253,114,12)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.4396%" y="341" width="0.0801%" height="15" fill="rgb(215,223,47)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.4396%" y="325" width="0.0801%" height="15" fill="rgb(248,225,23)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.4396%" y="309" width="0.0801%" height="15" fill="rgb(250,108,0)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.4396%" y="293" width="0.0801%" height="15" fill="rgb(228,208,7)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.4396%" y="277" width="0.0801%" height="15" fill="rgb(244,45,10)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="287.50"></text></g><g><title>arena_get2.part.0 (19 samples, 1.52%)</title><rect x="98.1585%" y="421" width="1.5212%" height="15" fill="rgb(207,125,25)" fg:x="1226" fg:w="19"/><text x="98.4085%" y="431.50"></text></g><g><title>new_heap (2 samples, 0.16%)</title><rect x="99.5196%" y="405" width="0.1601%" height="15" fill="rgb(210,195,18)" fg:x="1243" fg:w="2"/><text x="99.7696%" y="415.50"></text></g><g><title>malloc (22 samples, 1.76%)</title><rect x="97.9984%" y="453" width="1.7614%" height="15" fill="rgb(249,80,12)" fg:x="1224" fg:w="22"/><text x="98.2484%" y="463.50"></text></g><g><title>tcache_init.part.0 (21 samples, 1.68%)</title><rect x="98.0785%" y="437" width="1.6813%" height="15" fill="rgb(221,65,9)" fg:x="1225" fg:w="21"/><text x="98.3285%" y="447.50"></text></g><g><title>get_free_list (1 samples, 0.08%)</title><rect x="99.6797%" y="421" width="0.0801%" height="15" fill="rgb(235,49,36)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="431.50"></text></g><g><title>clone3 (1,207 samples, 96.64%)</title><rect x="3.2826%" y="533" width="96.6373%" height="15" fill="rgb(225,32,20)" fg:x="41" fg:w="1207"/><text x="3.5326%" y="543.50">clone3</text></g><g><title>start_thread (1,204 samples, 96.40%)</title><rect x="3.5228%" y="517" width="96.3971%" height="15" fill="rgb(215,141,46)" fg:x="44" fg:w="1204"/><text x="3.7728%" y="527.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1,157 samples, 92.63%)</title><rect x="7.2858%" y="501" width="92.6341%" height="15" fill="rgb(250,160,47)" fg:x="91" fg:w="1157"/><text x="7.5358%" y="511.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (31 samples, 2.48%)</title><rect x="97.4380%" y="485" width="2.4820%" height="15" fill="rgb(216,222,40)" fg:x="1217" fg:w="31"/><text x="97.6880%" y="495.50">st..</text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (28 samples, 2.24%)</title><rect x="97.6781%" y="469" width="2.2418%" height="15" fill="rgb(234,217,39)" fg:x="1220" fg:w="28"/><text x="97.9281%" y="479.50">p..</text></g><g><title>pthread_attr_init@@GLIBC_2.2.5 (2 samples, 0.16%)</title><rect x="99.7598%" y="453" width="0.1601%" height="15" fill="rgb(207,178,40)" fg:x="1246" fg:w="2"/><text x="100.0098%" y="463.50"></text></g><g><title>all (1,249 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="575.50"></text></g><g><title>julia (1,249 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="559.50">julia</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.08%)</title><rect x="99.9199%" y="533" width="0.0801%" height="15" fill="rgb(249,222,13)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="543.50"></text></g><g><title>hypot (1 samples, 0.08%)</title><rect x="99.9199%" y="517" width="0.0801%" height="15" fill="rgb(244,185,38)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.08%)</title><rect x="99.9199%" y="501" width="0.0801%" height="15" fill="rgb(236,202,9)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="511.50"></text></g></svg></svg>