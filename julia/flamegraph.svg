<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="430"><g><title>[unknown] (10 samples, 2.33%)</title><rect x="0.0000%" y="869" width="2.3256%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2500%" y="879.50">[..</text></g><g><title>_dl_start_user (1 samples, 0.23%)</title><rect x="2.3256%" y="869" width="0.2326%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="1"/><text x="2.5756%" y="879.50"></text></g><g><title>_dl_start (1 samples, 0.23%)</title><rect x="2.3256%" y="853" width="0.2326%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="1"/><text x="2.5756%" y="863.50"></text></g><g><title>_dl_start_final (1 samples, 0.23%)</title><rect x="2.3256%" y="837" width="0.2326%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="1"/><text x="2.5756%" y="847.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.23%)</title><rect x="2.3256%" y="821" width="0.2326%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="1"/><text x="2.5756%" y="831.50"></text></g><g><title>dl_main (1 samples, 0.23%)</title><rect x="2.3256%" y="805" width="0.2326%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="1"/><text x="2.5756%" y="815.50"></text></g><g><title>_dl_unload_cache (1 samples, 0.23%)</title><rect x="2.3256%" y="789" width="0.2326%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="1"/><text x="2.5756%" y="799.50"></text></g><g><title>__GI_munmap (1 samples, 0.23%)</title><rect x="2.3256%" y="773" width="0.2326%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="1"/><text x="2.5756%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="2.3256%" y="757" width="0.2326%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="2.5756%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.47%)</title><rect x="2.5581%" y="853" width="0.4651%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="2"/><text x="2.8081%" y="863.50"></text></g><g><title>png::filter::filter (1 samples, 0.23%)</title><rect x="3.0233%" y="485" width="0.2326%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="1"/><text x="3.2733%" y="495.50"></text></g><g><title>deflate::chained_hash_table::ChainedHashTable::slide (1 samples, 0.23%)</title><rect x="3.2558%" y="421" width="0.2326%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="1"/><text x="3.5058%" y="431.50"></text></g><g><title>deflate::chained_hash_table::ChainedHashTable::slide_table (1 samples, 0.23%)</title><rect x="3.2558%" y="405" width="0.2326%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="1"/><text x="3.5058%" y="415.50"></text></g><g><title>deflate::chained_hash_table::ChainedHashTable::slide_value (1 samples, 0.23%)</title><rect x="3.2558%" y="389" width="0.2326%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="1"/><text x="3.5058%" y="399.50"></text></g><g><title>deflate::lz77::add_to_hash_table (2 samples, 0.47%)</title><rect x="3.4884%" y="389" width="0.4651%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="2"/><text x="3.7384%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.47%)</title><rect x="3.4884%" y="373" width="0.4651%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="2"/><text x="3.7384%" y="383.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.47%)</title><rect x="3.4884%" y="357" width="0.4651%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="2"/><text x="3.7384%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.47%)</title><rect x="3.4884%" y="341" width="0.4651%" height="15" fill="rgb(210,31,41)" fg:x="15" fg:w="2"/><text x="3.7384%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.47%)</title><rect x="3.4884%" y="325" width="0.4651%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="2"/><text x="3.7384%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (2 samples, 0.47%)</title><rect x="3.4884%" y="309" width="0.4651%" height="15" fill="rgb(226,26,5)" fg:x="15" fg:w="2"/><text x="3.7384%" y="319.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::save (5 samples, 1.16%)</title><rect x="3.0233%" y="597" width="1.1628%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="5"/><text x="3.2733%" y="607.50"></text></g><g><title>image::dynimage::save_buffer (5 samples, 1.16%)</title><rect x="3.0233%" y="581" width="1.1628%" height="15" fill="rgb(235,183,28)" fg:x="13" fg:w="5"/><text x="3.2733%" y="591.50"></text></g><g><title>image::io::free_functions::save_buffer_impl (5 samples, 1.16%)</title><rect x="3.0233%" y="565" width="1.1628%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="5"/><text x="3.2733%" y="575.50"></text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (5 samples, 1.16%)</title><rect x="3.0233%" y="549" width="1.1628%" height="15" fill="rgb(247,18,42)" fg:x="13" fg:w="5"/><text x="3.2733%" y="559.50"></text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (5 samples, 1.16%)</title><rect x="3.0233%" y="533" width="1.1628%" height="15" fill="rgb(241,131,45)" fg:x="13" fg:w="5"/><text x="3.2733%" y="543.50"></text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode (5 samples, 1.16%)</title><rect x="3.0233%" y="517" width="1.1628%" height="15" fill="rgb(249,31,29)" fg:x="13" fg:w="5"/><text x="3.2733%" y="527.50"></text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (5 samples, 1.16%)</title><rect x="3.0233%" y="501" width="1.1628%" height="15" fill="rgb(225,111,53)" fg:x="13" fg:w="5"/><text x="3.2733%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.93%)</title><rect x="3.2558%" y="485" width="0.9302%" height="15" fill="rgb(238,160,17)" fg:x="14" fg:w="4"/><text x="3.5058%" y="495.50"></text></g><g><title>&lt;deflate::writer::ZlibEncoder&lt;W&gt; as std::io::Write&gt;::write (4 samples, 0.93%)</title><rect x="3.2558%" y="469" width="0.9302%" height="15" fill="rgb(214,148,48)" fg:x="14" fg:w="4"/><text x="3.5058%" y="479.50"></text></g><g><title>deflate::compress::compress_data_dynamic_n (4 samples, 0.93%)</title><rect x="3.2558%" y="453" width="0.9302%" height="15" fill="rgb(232,36,49)" fg:x="14" fg:w="4"/><text x="3.5058%" y="463.50"></text></g><g><title>deflate::lz77::lz77_compress_block (4 samples, 0.93%)</title><rect x="3.2558%" y="437" width="0.9302%" height="15" fill="rgb(209,103,24)" fg:x="14" fg:w="4"/><text x="3.5058%" y="447.50"></text></g><g><title>deflate::lz77::process_chunk (3 samples, 0.70%)</title><rect x="3.4884%" y="421" width="0.6977%" height="15" fill="rgb(229,88,8)" fg:x="15" fg:w="3"/><text x="3.7384%" y="431.50"></text></g><g><title>deflate::lz77::process_chunk_greedy (3 samples, 0.70%)</title><rect x="3.4884%" y="405" width="0.6977%" height="15" fill="rgb(213,181,19)" fg:x="15" fg:w="3"/><text x="3.7384%" y="415.50"></text></g><g><title>deflate::matching::longest_match (1 samples, 0.23%)</title><rect x="3.9535%" y="389" width="0.2326%" height="15" fill="rgb(254,191,54)" fg:x="17" fg:w="1"/><text x="4.2035%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (2 samples, 0.47%)</title><rect x="4.1860%" y="581" width="0.4651%" height="15" fill="rgb(241,83,37)" fg:x="18" fg:w="2"/><text x="4.4360%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.47%)</title><rect x="4.1860%" y="565" width="0.4651%" height="15" fill="rgb(233,36,39)" fg:x="18" fg:w="2"/><text x="4.4360%" y="575.50"></text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::put_pixel (2 samples, 0.47%)</title><rect x="4.6512%" y="581" width="0.4651%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="2"/><text x="4.9012%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.47%)</title><rect x="4.6512%" y="565" width="0.4651%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="2"/><text x="4.9012%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.47%)</title><rect x="4.6512%" y="549" width="0.4651%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="2"/><text x="4.9012%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.47%)</title><rect x="4.6512%" y="533" width="0.4651%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="2"/><text x="4.9012%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.47%)</title><rect x="4.6512%" y="517" width="0.4651%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="2"/><text x="4.9012%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.47%)</title><rect x="4.6512%" y="501" width="0.4651%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="2"/><text x="4.9012%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="4.8837%" y="485" width="0.2326%" height="15" fill="rgb(235,93,37)" fg:x="21" fg:w="1"/><text x="5.1337%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="5.1163%" y="389" width="0.2326%" height="15" fill="rgb(213,116,39)" fg:x="22" fg:w="1"/><text x="5.3663%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="5.1163%" y="373" width="0.2326%" height="15" fill="rgb(222,207,29)" fg:x="22" fg:w="1"/><text x="5.3663%" y="383.50"></text></g><g><title>__libc_calloc (4 samples, 0.93%)</title><rect x="5.1163%" y="453" width="0.9302%" height="15" fill="rgb(206,96,30)" fg:x="22" fg:w="4"/><text x="5.3663%" y="463.50"></text></g><g><title>_int_malloc (4 samples, 0.93%)</title><rect x="5.1163%" y="437" width="0.9302%" height="15" fill="rgb(218,138,4)" fg:x="22" fg:w="4"/><text x="5.3663%" y="447.50"></text></g><g><title>sysmalloc (4 samples, 0.93%)</title><rect x="5.1163%" y="421" width="0.9302%" height="15" fill="rgb(250,191,14)" fg:x="22" fg:w="4"/><text x="5.3663%" y="431.50"></text></g><g><title>sysmalloc_mmap.isra.0 (4 samples, 0.93%)</title><rect x="5.1163%" y="405" width="0.9302%" height="15" fill="rgb(239,60,40)" fg:x="22" fg:w="4"/><text x="5.3663%" y="415.50"></text></g><g><title>__mmap (3 samples, 0.70%)</title><rect x="5.3488%" y="389" width="0.6977%" height="15" fill="rgb(206,27,48)" fg:x="23" fg:w="3"/><text x="5.5988%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.47%)</title><rect x="5.5814%" y="373" width="0.4651%" height="15" fill="rgb(225,35,8)" fg:x="24" fg:w="2"/><text x="5.8314%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.47%)</title><rect x="5.5814%" y="357" width="0.4651%" height="15" fill="rgb(250,213,24)" fg:x="24" fg:w="2"/><text x="5.8314%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.47%)</title><rect x="5.5814%" y="341" width="0.4651%" height="15" fill="rgb(247,123,22)" fg:x="24" fg:w="2"/><text x="5.8314%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="5.8140%" y="325" width="0.2326%" height="15" fill="rgb(231,138,38)" fg:x="25" fg:w="1"/><text x="6.0640%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="5.8140%" y="309" width="0.2326%" height="15" fill="rgb(231,145,46)" fg:x="25" fg:w="1"/><text x="6.0640%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="5.8140%" y="293" width="0.2326%" height="15" fill="rgb(251,118,11)" fg:x="25" fg:w="1"/><text x="6.0640%" y="303.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (14 samples, 3.26%)</title><rect x="3.0233%" y="853" width="3.2558%" height="15" fill="rgb(217,147,25)" fg:x="13" fg:w="14"/><text x="3.2733%" y="863.50">__l..</text></g><g><title>__libc_start_call_main (14 samples, 3.26%)</title><rect x="3.0233%" y="837" width="3.2558%" height="15" fill="rgb(247,81,37)" fg:x="13" fg:w="14"/><text x="3.2733%" y="847.50">__l..</text></g><g><title>main (14 samples, 3.26%)</title><rect x="3.0233%" y="821" width="3.2558%" height="15" fill="rgb(209,12,38)" fg:x="13" fg:w="14"/><text x="3.2733%" y="831.50">main</text></g><g><title>std::rt::lang_start_internal (14 samples, 3.26%)</title><rect x="3.0233%" y="805" width="3.2558%" height="15" fill="rgb(227,1,9)" fg:x="13" fg:w="14"/><text x="3.2733%" y="815.50">std..</text></g><g><title>std::panic::catch_unwind (14 samples, 3.26%)</title><rect x="3.0233%" y="789" width="3.2558%" height="15" fill="rgb(248,47,43)" fg:x="13" fg:w="14"/><text x="3.2733%" y="799.50">std..</text></g><g><title>std::panicking::try (14 samples, 3.26%)</title><rect x="3.0233%" y="773" width="3.2558%" height="15" fill="rgb(221,10,30)" fg:x="13" fg:w="14"/><text x="3.2733%" y="783.50">std..</text></g><g><title>std::panicking::try::do_call (14 samples, 3.26%)</title><rect x="3.0233%" y="757" width="3.2558%" height="15" fill="rgb(210,229,1)" fg:x="13" fg:w="14"/><text x="3.2733%" y="767.50">std..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (14 samples, 3.26%)</title><rect x="3.0233%" y="741" width="3.2558%" height="15" fill="rgb(222,148,37)" fg:x="13" fg:w="14"/><text x="3.2733%" y="751.50">std..</text></g><g><title>std::panic::catch_unwind (14 samples, 3.26%)</title><rect x="3.0233%" y="725" width="3.2558%" height="15" fill="rgb(234,67,33)" fg:x="13" fg:w="14"/><text x="3.2733%" y="735.50">std..</text></g><g><title>std::panicking::try (14 samples, 3.26%)</title><rect x="3.0233%" y="709" width="3.2558%" height="15" fill="rgb(247,98,35)" fg:x="13" fg:w="14"/><text x="3.2733%" y="719.50">std..</text></g><g><title>std::panicking::try::do_call (14 samples, 3.26%)</title><rect x="3.0233%" y="693" width="3.2558%" height="15" fill="rgb(247,138,52)" fg:x="13" fg:w="14"/><text x="3.2733%" y="703.50">std..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (14 samples, 3.26%)</title><rect x="3.0233%" y="677" width="3.2558%" height="15" fill="rgb(213,79,30)" fg:x="13" fg:w="14"/><text x="3.2733%" y="687.50">cor..</text></g><g><title>std::rt::lang_start::_{{closure}} (14 samples, 3.26%)</title><rect x="3.0233%" y="661" width="3.2558%" height="15" fill="rgb(246,177,23)" fg:x="13" fg:w="14"/><text x="3.2733%" y="671.50">std..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14 samples, 3.26%)</title><rect x="3.0233%" y="645" width="3.2558%" height="15" fill="rgb(230,62,27)" fg:x="13" fg:w="14"/><text x="3.2733%" y="655.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once (14 samples, 3.26%)</title><rect x="3.0233%" y="629" width="3.2558%" height="15" fill="rgb(216,154,8)" fg:x="13" fg:w="14"/><text x="3.2733%" y="639.50">cor..</text></g><g><title>julia::main (14 samples, 3.26%)</title><rect x="3.0233%" y="613" width="3.2558%" height="15" fill="rgb(244,35,45)" fg:x="13" fg:w="14"/><text x="3.2733%" y="623.50">jul..</text></g><g><title>julia::generate_image_buffer (9 samples, 2.09%)</title><rect x="4.1860%" y="597" width="2.0930%" height="15" fill="rgb(251,115,12)" fg:x="18" fg:w="9"/><text x="4.4360%" y="607.50">j..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,alloc::vec::Vec&lt;&lt;P as image::traits::Pixel&gt;::Subpixel&gt;&gt;::new (5 samples, 1.16%)</title><rect x="5.1163%" y="581" width="1.1628%" height="15" fill="rgb(240,54,50)" fg:x="22" fg:w="5"/><text x="5.3663%" y="591.50"></text></g><g><title>alloc::vec::from_elem (5 samples, 1.16%)</title><rect x="5.1163%" y="565" width="1.1628%" height="15" fill="rgb(233,84,52)" fg:x="22" fg:w="5"/><text x="5.3663%" y="575.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (5 samples, 1.16%)</title><rect x="5.1163%" y="549" width="1.1628%" height="15" fill="rgb(207,117,47)" fg:x="22" fg:w="5"/><text x="5.3663%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (5 samples, 1.16%)</title><rect x="5.1163%" y="533" width="1.1628%" height="15" fill="rgb(249,43,39)" fg:x="22" fg:w="5"/><text x="5.3663%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (5 samples, 1.16%)</title><rect x="5.1163%" y="517" width="1.1628%" height="15" fill="rgb(209,38,44)" fg:x="22" fg:w="5"/><text x="5.3663%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (5 samples, 1.16%)</title><rect x="5.1163%" y="501" width="1.1628%" height="15" fill="rgb(236,212,23)" fg:x="22" fg:w="5"/><text x="5.3663%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 1.16%)</title><rect x="5.1163%" y="485" width="1.1628%" height="15" fill="rgb(242,79,21)" fg:x="22" fg:w="5"/><text x="5.3663%" y="495.50"></text></g><g><title>alloc::alloc::alloc_zeroed (5 samples, 1.16%)</title><rect x="5.1163%" y="469" width="1.1628%" height="15" fill="rgb(211,96,35)" fg:x="22" fg:w="5"/><text x="5.3663%" y="479.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.23%)</title><rect x="6.0465%" y="453" width="0.2326%" height="15" fill="rgb(253,215,40)" fg:x="26" fg:w="1"/><text x="6.2965%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.47%)</title><rect x="6.2791%" y="837" width="0.4651%" height="15" fill="rgb(211,81,21)" fg:x="27" fg:w="2"/><text x="6.5291%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="6.5116%" y="821" width="0.2326%" height="15" fill="rgb(208,190,38)" fg:x="28" fg:w="1"/><text x="6.7616%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="6.5116%" y="805" width="0.2326%" height="15" fill="rgb(235,213,38)" fg:x="28" fg:w="1"/><text x="6.7616%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="6.5116%" y="789" width="0.2326%" height="15" fill="rgb(237,122,38)" fg:x="28" fg:w="1"/><text x="6.7616%" y="799.50"></text></g><g><title>_dl_start_final (1 samples, 0.23%)</title><rect x="6.7442%" y="837" width="0.2326%" height="15" fill="rgb(244,218,35)" fg:x="29" fg:w="1"/><text x="6.9942%" y="847.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.23%)</title><rect x="6.7442%" y="821" width="0.2326%" height="15" fill="rgb(240,68,47)" fg:x="29" fg:w="1"/><text x="6.9942%" y="831.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.23%)</title><rect x="6.7442%" y="805" width="0.2326%" height="15" fill="rgb(210,16,53)" fg:x="29" fg:w="1"/><text x="6.9942%" y="815.50"></text></g><g><title>handle_amd (1 samples, 0.23%)</title><rect x="6.7442%" y="789" width="0.2326%" height="15" fill="rgb(235,124,12)" fg:x="29" fg:w="1"/><text x="6.9942%" y="799.50"></text></g><g><title>_start (21 samples, 4.88%)</title><rect x="2.5581%" y="869" width="4.8837%" height="15" fill="rgb(224,169,11)" fg:x="11" fg:w="21"/><text x="2.8081%" y="879.50">_start</text></g><g><title>_dl_start (5 samples, 1.16%)</title><rect x="6.2791%" y="853" width="1.1628%" height="15" fill="rgb(250,166,2)" fg:x="27" fg:w="5"/><text x="6.5291%" y="863.50"></text></g><g><title>elf_get_dynamic_info (2 samples, 0.47%)</title><rect x="6.9767%" y="837" width="0.4651%" height="15" fill="rgb(242,216,29)" fg:x="30" fg:w="2"/><text x="7.2267%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="7.2093%" y="821" width="0.2326%" height="15" fill="rgb(230,116,27)" fg:x="31" fg:w="1"/><text x="7.4593%" y="831.50"></text></g><g><title>[unknown] (12 samples, 2.79%)</title><rect x="8.1395%" y="837" width="2.7907%" height="15" fill="rgb(228,99,48)" fg:x="35" fg:w="12"/><text x="8.3895%" y="847.50">[u..</text></g><g><title>[unknown] (11 samples, 2.56%)</title><rect x="8.3721%" y="821" width="2.5581%" height="15" fill="rgb(253,11,6)" fg:x="36" fg:w="11"/><text x="8.6221%" y="831.50">[u..</text></g><g><title>[unknown] (9 samples, 2.09%)</title><rect x="8.8372%" y="805" width="2.0930%" height="15" fill="rgb(247,143,39)" fg:x="38" fg:w="9"/><text x="9.0872%" y="815.50">[..</text></g><g><title>[unknown] (5 samples, 1.16%)</title><rect x="9.7674%" y="789" width="1.1628%" height="15" fill="rgb(236,97,10)" fg:x="42" fg:w="5"/><text x="10.0174%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="10.6977%" y="773" width="0.2326%" height="15" fill="rgb(233,208,19)" fg:x="46" fg:w="1"/><text x="10.9477%" y="783.50"></text></g><g><title>__sigsetjmp (2 samples, 0.47%)</title><rect x="10.9302%" y="837" width="0.4651%" height="15" fill="rgb(216,164,2)" fg:x="47" fg:w="2"/><text x="11.1802%" y="847.50"></text></g><g><title>_setjmp (7 samples, 1.63%)</title><rect x="11.3953%" y="837" width="1.6279%" height="15" fill="rgb(220,129,5)" fg:x="49" fg:w="7"/><text x="11.6453%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="12.7907%" y="821" width="0.2326%" height="15" fill="rgb(242,17,10)" fg:x="55" fg:w="1"/><text x="13.0407%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="12.7907%" y="805" width="0.2326%" height="15" fill="rgb(242,107,0)" fg:x="55" fg:w="1"/><text x="13.0407%" y="815.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.23%)</title><rect x="13.0233%" y="469" width="0.2326%" height="15" fill="rgb(251,28,31)" fg:x="56" fg:w="1"/><text x="13.2733%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 6.28%)</title><rect x="13.0233%" y="517" width="6.2791%" height="15" fill="rgb(233,223,10)" fg:x="56" fg:w="27"/><text x="13.2733%" y="527.50">&lt;alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 6.28%)</title><rect x="13.0233%" y="501" width="6.2791%" height="15" fill="rgb(215,21,27)" fg:x="56" fg:w="27"/><text x="13.2733%" y="511.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (27 samples, 6.28%)</title><rect x="13.0233%" y="485" width="6.2791%" height="15" fill="rgb(232,23,21)" fg:x="56" fg:w="27"/><text x="13.2733%" y="495.50">alloc::a..</text></g><g><title>cfree@GLIBC_2.2.5 (26 samples, 6.05%)</title><rect x="13.2558%" y="469" width="6.0465%" height="15" fill="rgb(244,5,23)" fg:x="57" fg:w="26"/><text x="13.5058%" y="479.50">cfree@GL..</text></g><g><title>_int_free (24 samples, 5.58%)</title><rect x="13.7209%" y="453" width="5.5814%" height="15" fill="rgb(226,81,46)" fg:x="59" fg:w="24"/><text x="13.9709%" y="463.50">_int_fr..</text></g><g><title>&lt;rayon_core::latch::CountLatch as rayon_core::latch::Latch&gt;::set (11 samples, 2.56%)</title><rect x="19.3023%" y="469" width="2.5581%" height="15" fill="rgb(247,70,30)" fg:x="83" fg:w="11"/><text x="19.5523%" y="479.50">&lt;r..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 1.63%)</title><rect x="23.2558%" y="357" width="1.6279%" height="15" fill="rgb(212,68,19)" fg:x="100" fg:w="7"/><text x="23.5058%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 1.63%)</title><rect x="23.2558%" y="341" width="1.6279%" height="15" fill="rgb(240,187,13)" fg:x="100" fg:w="7"/><text x="23.5058%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 1.63%)</title><rect x="23.2558%" y="325" width="1.6279%" height="15" fill="rgb(223,113,26)" fg:x="100" fg:w="7"/><text x="23.5058%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;julia::generate_image_buffer::{{closure}}::{{closure}}&gt; (8 samples, 1.86%)</title><rect x="24.8837%" y="357" width="1.8605%" height="15" fill="rgb(206,192,2)" fg:x="107" fg:w="8"/><text x="25.1337%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;julia::AtomicTuple&gt;&gt;&gt;&gt; (8 samples, 1.86%)</title><rect x="24.8837%" y="341" width="1.8605%" height="15" fill="rgb(241,108,4)" fg:x="107" fg:w="8"/><text x="25.1337%" y="351.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 1.86%)</title><rect x="24.8837%" y="325" width="1.8605%" height="15" fill="rgb(247,173,49)" fg:x="107" fg:w="8"/><text x="25.1337%" y="335.50">&lt;..</text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (1 samples, 0.23%)</title><rect x="27.6744%" y="341" width="0.2326%" height="15" fill="rgb(224,114,35)" fg:x="119" fg:w="1"/><text x="27.9244%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1 samples, 0.23%)</title><rect x="27.6744%" y="325" width="0.2326%" height="15" fill="rgb(245,159,27)" fg:x="119" fg:w="1"/><text x="27.9244%" y="335.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::norm (12 samples, 2.79%)</title><rect x="27.9070%" y="341" width="2.7907%" height="15" fill="rgb(245,172,44)" fg:x="120" fg:w="12"/><text x="28.1570%" y="351.50">nu..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::hypot (12 samples, 2.79%)</title><rect x="27.9070%" y="325" width="2.7907%" height="15" fill="rgb(236,23,11)" fg:x="120" fg:w="12"/><text x="28.1570%" y="335.50">&lt;f..</text></g><g><title>std::f64::&lt;impl f64&gt;::hypot (12 samples, 2.79%)</title><rect x="27.9070%" y="309" width="2.7907%" height="15" fill="rgb(205,117,38)" fg:x="120" fg:w="12"/><text x="28.1570%" y="319.50">st..</text></g><g><title>hypot (12 samples, 2.79%)</title><rect x="27.9070%" y="293" width="2.7907%" height="15" fill="rgb(237,72,25)" fg:x="120" fg:w="12"/><text x="28.1570%" y="303.50">hy..</text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (86 samples, 20.00%)</title><rect x="13.0233%" y="533" width="20.0000%" height="15" fill="rgb(244,70,9)" fg:x="56" fg:w="86"/><text x="13.2733%" y="543.50">&lt;rayon_core::job::HeapJob&lt;BODY&gt;..</text></g><g><title>rayon_core::scope::Scope::spawn::_{{closure}} (59 samples, 13.72%)</title><rect x="19.3023%" y="517" width="13.7209%" height="15" fill="rgb(217,125,39)" fg:x="83" fg:w="59"/><text x="19.5523%" y="527.50">rayon_core::scope::Sc..</text></g><g><title>rayon_core::scope::ScopeBase::execute_job (59 samples, 13.72%)</title><rect x="19.3023%" y="501" width="13.7209%" height="15" fill="rgb(235,36,10)" fg:x="83" fg:w="59"/><text x="19.5523%" y="511.50">rayon_core::scope::Sc..</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (59 samples, 13.72%)</title><rect x="19.3023%" y="485" width="13.7209%" height="15" fill="rgb(251,123,47)" fg:x="83" fg:w="59"/><text x="19.5523%" y="495.50">rayon_core::scope::Sc..</text></g><g><title>rayon_core::unwind::halt_unwinding (48 samples, 11.16%)</title><rect x="21.8605%" y="469" width="11.1628%" height="15" fill="rgb(221,13,13)" fg:x="94" fg:w="48"/><text x="22.1105%" y="479.50">rayon_core::unwi..</text></g><g><title>std::panic::catch_unwind (48 samples, 11.16%)</title><rect x="21.8605%" y="453" width="11.1628%" height="15" fill="rgb(238,131,9)" fg:x="94" fg:w="48"/><text x="22.1105%" y="463.50">std::panic::catc..</text></g><g><title>std::panicking::try (48 samples, 11.16%)</title><rect x="21.8605%" y="437" width="11.1628%" height="15" fill="rgb(211,50,8)" fg:x="94" fg:w="48"/><text x="22.1105%" y="447.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (44 samples, 10.23%)</title><rect x="22.7907%" y="421" width="10.2326%" height="15" fill="rgb(245,182,24)" fg:x="98" fg:w="44"/><text x="23.0407%" y="431.50">std::panicking:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (44 samples, 10.23%)</title><rect x="22.7907%" y="405" width="10.2326%" height="15" fill="rgb(242,14,37)" fg:x="98" fg:w="44"/><text x="23.0407%" y="415.50">&lt;core::panic::u..</text></g><g><title>rayon_core::scope::Scope::spawn::_{{closure}}::_{{closure}} (44 samples, 10.23%)</title><rect x="22.7907%" y="389" width="10.2326%" height="15" fill="rgb(246,228,12)" fg:x="98" fg:w="44"/><text x="23.0407%" y="399.50">rayon_core::sco..</text></g><g><title>julia::generate_image_buffer::_{{closure}}::_{{closure}} (44 samples, 10.23%)</title><rect x="22.7907%" y="373" width="10.2326%" height="15" fill="rgb(213,55,15)" fg:x="98" fg:w="44"/><text x="23.0407%" y="383.50">julia::generate..</text></g><g><title>julia::color_generator (27 samples, 6.28%)</title><rect x="26.7442%" y="357" width="6.2791%" height="15" fill="rgb(209,9,3)" fg:x="115" fg:w="27"/><text x="26.9942%" y="367.50">julia::c..</text></g><g><title>std::f64::&lt;impl f64&gt;::powf (10 samples, 2.33%)</title><rect x="30.6977%" y="341" width="2.3256%" height="15" fill="rgb(230,59,30)" fg:x="132" fg:w="10"/><text x="30.9477%" y="351.50">s..</text></g><g><title>pow (10 samples, 2.33%)</title><rect x="30.6977%" y="325" width="2.3256%" height="15" fill="rgb(209,121,21)" fg:x="132" fg:w="10"/><text x="30.9477%" y="335.50">p..</text></g><g><title>[libm.so.6] (9 samples, 2.09%)</title><rect x="30.9302%" y="309" width="2.0930%" height="15" fill="rgb(220,109,13)" fg:x="133" fg:w="9"/><text x="31.1802%" y="319.50">[..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 2.09%)</title><rect x="33.9535%" y="165" width="2.0930%" height="15" fill="rgb(232,18,1)" fg:x="146" fg:w="9"/><text x="34.2035%" y="175.50">&lt;..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 1.16%)</title><rect x="36.2791%" y="149" width="1.1628%" height="15" fill="rgb(215,41,42)" fg:x="156" fg:w="5"/><text x="36.5291%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (5 samples, 1.16%)</title><rect x="36.2791%" y="133" width="1.1628%" height="15" fill="rgb(224,123,36)" fg:x="156" fg:w="5"/><text x="36.5291%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (5 samples, 1.16%)</title><rect x="36.2791%" y="117" width="1.1628%" height="15" fill="rgb(240,125,3)" fg:x="156" fg:w="5"/><text x="36.5291%" y="127.50"></text></g><g><title>rayon_core::job::HeapJob&lt;BODY&gt;::new (11 samples, 2.56%)</title><rect x="37.4419%" y="149" width="2.5581%" height="15" fill="rgb(205,98,50)" fg:x="161" fg:w="11"/><text x="37.6919%" y="159.50">ra..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (11 samples, 2.56%)</title><rect x="37.4419%" y="133" width="2.5581%" height="15" fill="rgb(205,185,37)" fg:x="161" fg:w="11"/><text x="37.6919%" y="143.50">al..</text></g><g><title>alloc::alloc::exchange_malloc (10 samples, 2.33%)</title><rect x="37.6744%" y="117" width="2.3256%" height="15" fill="rgb(238,207,15)" fg:x="162" fg:w="10"/><text x="37.9244%" y="127.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 2.33%)</title><rect x="37.6744%" y="101" width="2.3256%" height="15" fill="rgb(213,199,42)" fg:x="162" fg:w="10"/><text x="37.9244%" y="111.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 2.33%)</title><rect x="37.6744%" y="85" width="2.3256%" height="15" fill="rgb(235,201,11)" fg:x="162" fg:w="10"/><text x="37.9244%" y="95.50">a..</text></g><g><title>alloc::alloc::alloc (10 samples, 2.33%)</title><rect x="37.6744%" y="69" width="2.3256%" height="15" fill="rgb(207,46,11)" fg:x="162" fg:w="10"/><text x="37.9244%" y="79.50">a..</text></g><g><title>malloc (10 samples, 2.33%)</title><rect x="37.6744%" y="53" width="2.3256%" height="15" fill="rgb(241,35,35)" fg:x="162" fg:w="10"/><text x="37.9244%" y="63.50">m..</text></g><g><title>_int_malloc (8 samples, 1.86%)</title><rect x="38.1395%" y="37" width="1.8605%" height="15" fill="rgb(243,32,47)" fg:x="164" fg:w="8"/><text x="38.3895%" y="47.50">_..</text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::is_empty (7 samples, 1.63%)</title><rect x="40.0000%" y="117" width="1.6279%" height="15" fill="rgb(247,202,23)" fg:x="172" fg:w="7"/><text x="40.2500%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (7 samples, 1.63%)</title><rect x="40.0000%" y="101" width="1.6279%" height="15" fill="rgb(219,102,11)" fg:x="172" fg:w="7"/><text x="40.2500%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 1.63%)</title><rect x="40.0000%" y="85" width="1.6279%" height="15" fill="rgb(243,110,44)" fg:x="172" fg:w="7"/><text x="40.2500%" y="95.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::push (3 samples, 0.70%)</title><rect x="41.6279%" y="117" width="0.6977%" height="15" fill="rgb(222,74,54)" fg:x="179" fg:w="3"/><text x="41.8779%" y="127.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.70%)</title><rect x="41.6279%" y="101" width="0.6977%" height="15" fill="rgb(216,99,12)" fg:x="179" fg:w="3"/><text x="41.8779%" y="111.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (3 samples, 0.70%)</title><rect x="41.6279%" y="85" width="0.6977%" height="15" fill="rgb(226,22,26)" fg:x="179" fg:w="3"/><text x="41.8779%" y="95.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.70%)</title><rect x="41.6279%" y="69" width="0.6977%" height="15" fill="rgb(217,163,10)" fg:x="179" fg:w="3"/><text x="41.8779%" y="79.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (132 samples, 30.70%)</title><rect x="13.0233%" y="565" width="30.6977%" height="15" fill="rgb(213,25,53)" fg:x="56" fg:w="132"/><text x="13.2733%" y="575.50">rayon_core::registry::WorkerThread::execute</text></g><g><title>rayon_core::job::JobRef::execute (132 samples, 30.70%)</title><rect x="13.0233%" y="549" width="30.6977%" height="15" fill="rgb(252,105,26)" fg:x="56" fg:w="132"/><text x="13.2733%" y="559.50">rayon_core::job::JobRef::execute</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (46 samples, 10.70%)</title><rect x="33.0233%" y="533" width="10.6977%" height="15" fill="rgb(220,39,43)" fg:x="142" fg:w="46"/><text x="33.2733%" y="543.50">&lt;rayon_core::job..</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (46 samples, 10.70%)</title><rect x="33.0233%" y="517" width="10.6977%" height="15" fill="rgb(229,68,48)" fg:x="142" fg:w="46"/><text x="33.2733%" y="527.50">rayon_core::job:..</text></g><g><title>rayon_core::unwind::halt_unwinding (46 samples, 10.70%)</title><rect x="33.0233%" y="501" width="10.6977%" height="15" fill="rgb(252,8,32)" fg:x="142" fg:w="46"/><text x="33.2733%" y="511.50">rayon_core::unwi..</text></g><g><title>std::panic::catch_unwind (46 samples, 10.70%)</title><rect x="33.0233%" y="485" width="10.6977%" height="15" fill="rgb(223,20,43)" fg:x="142" fg:w="46"/><text x="33.2733%" y="495.50">std::panic::catc..</text></g><g><title>std::panicking::try (46 samples, 10.70%)</title><rect x="33.0233%" y="469" width="10.6977%" height="15" fill="rgb(229,81,49)" fg:x="142" fg:w="46"/><text x="33.2733%" y="479.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (46 samples, 10.70%)</title><rect x="33.0233%" y="453" width="10.6977%" height="15" fill="rgb(236,28,36)" fg:x="142" fg:w="46"/><text x="33.2733%" y="463.50">std::panicking::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (46 samples, 10.70%)</title><rect x="33.0233%" y="437" width="10.6977%" height="15" fill="rgb(249,185,26)" fg:x="142" fg:w="46"/><text x="33.2733%" y="447.50">&lt;core::panic::un..</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::_{{closure}} (46 samples, 10.70%)</title><rect x="33.0233%" y="421" width="10.6977%" height="15" fill="rgb(249,174,33)" fg:x="142" fg:w="46"/><text x="33.2733%" y="431.50">rayon_core::job:..</text></g><g><title>rayon_core::registry::Registry::in_worker_cold::_{{closure}}::_{{closure}} (46 samples, 10.70%)</title><rect x="33.0233%" y="405" width="10.6977%" height="15" fill="rgb(233,201,37)" fg:x="142" fg:w="46"/><text x="33.2733%" y="415.50">rayon_core::regi..</text></g><g><title>rayon_core::thread_pool::ThreadPool::install::_{{closure}} (46 samples, 10.70%)</title><rect x="33.0233%" y="389" width="10.6977%" height="15" fill="rgb(221,78,26)" fg:x="142" fg:w="46"/><text x="33.2733%" y="399.50">rayon_core::thre..</text></g><g><title>rayon_core::thread_pool::ThreadPool::scope::_{{closure}} (46 samples, 10.70%)</title><rect x="33.0233%" y="373" width="10.6977%" height="15" fill="rgb(250,127,30)" fg:x="142" fg:w="46"/><text x="33.2733%" y="383.50">rayon_core::thre..</text></g><g><title>rayon_core::scope::scope (46 samples, 10.70%)</title><rect x="33.0233%" y="357" width="10.6977%" height="15" fill="rgb(230,49,44)" fg:x="142" fg:w="46"/><text x="33.2733%" y="367.50">rayon_core::scop..</text></g><g><title>rayon_core::registry::in_worker (46 samples, 10.70%)</title><rect x="33.0233%" y="341" width="10.6977%" height="15" fill="rgb(229,67,23)" fg:x="142" fg:w="46"/><text x="33.2733%" y="351.50">rayon_core::regi..</text></g><g><title>rayon_core::scope::scope::_{{closure}} (46 samples, 10.70%)</title><rect x="33.0233%" y="325" width="10.6977%" height="15" fill="rgb(249,83,47)" fg:x="142" fg:w="46"/><text x="33.2733%" y="335.50">rayon_core::scop..</text></g><g><title>rayon_core::scope::ScopeBase::complete (46 samples, 10.70%)</title><rect x="33.0233%" y="309" width="10.6977%" height="15" fill="rgb(215,43,3)" fg:x="142" fg:w="46"/><text x="33.2733%" y="319.50">rayon_core::scop..</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (46 samples, 10.70%)</title><rect x="33.0233%" y="293" width="10.6977%" height="15" fill="rgb(238,154,13)" fg:x="142" fg:w="46"/><text x="33.2733%" y="303.50">rayon_core::scop..</text></g><g><title>rayon_core::unwind::halt_unwinding (46 samples, 10.70%)</title><rect x="33.0233%" y="277" width="10.6977%" height="15" fill="rgb(219,56,2)" fg:x="142" fg:w="46"/><text x="33.2733%" y="287.50">rayon_core::unwi..</text></g><g><title>std::panic::catch_unwind (46 samples, 10.70%)</title><rect x="33.0233%" y="261" width="10.6977%" height="15" fill="rgb(233,0,4)" fg:x="142" fg:w="46"/><text x="33.2733%" y="271.50">std::panic::catc..</text></g><g><title>std::panicking::try (46 samples, 10.70%)</title><rect x="33.0233%" y="245" width="10.6977%" height="15" fill="rgb(235,30,7)" fg:x="142" fg:w="46"/><text x="33.2733%" y="255.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (46 samples, 10.70%)</title><rect x="33.0233%" y="229" width="10.6977%" height="15" fill="rgb(250,79,13)" fg:x="142" fg:w="46"/><text x="33.2733%" y="239.50">std::panicking::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (46 samples, 10.70%)</title><rect x="33.0233%" y="213" width="10.6977%" height="15" fill="rgb(211,146,34)" fg:x="142" fg:w="46"/><text x="33.2733%" y="223.50">&lt;core::panic::un..</text></g><g><title>rayon_core::scope::scope::_{{closure}}::_{{closure}} (46 samples, 10.70%)</title><rect x="33.0233%" y="197" width="10.6977%" height="15" fill="rgb(228,22,38)" fg:x="142" fg:w="46"/><text x="33.2733%" y="207.50">rayon_core::scop..</text></g><g><title>julia::generate_image_buffer::_{{closure}} (46 samples, 10.70%)</title><rect x="33.0233%" y="181" width="10.6977%" height="15" fill="rgb(235,168,5)" fg:x="142" fg:w="46"/><text x="33.2733%" y="191.50">julia::generate_..</text></g><g><title>rayon_core::scope::Scope::spawn (33 samples, 7.67%)</title><rect x="36.0465%" y="165" width="7.6744%" height="15" fill="rgb(221,155,16)" fg:x="155" fg:w="33"/><text x="36.2965%" y="175.50">rayon_core:..</text></g><g><title>rayon_core::registry::Registry::inject_or_push (16 samples, 3.72%)</title><rect x="40.0000%" y="149" width="3.7209%" height="15" fill="rgb(215,215,53)" fg:x="172" fg:w="16"/><text x="40.2500%" y="159.50">rayo..</text></g><g><title>rayon_core::registry::WorkerThread::push (16 samples, 3.72%)</title><rect x="40.0000%" y="133" width="3.7209%" height="15" fill="rgb(223,4,10)" fg:x="172" fg:w="16"/><text x="40.2500%" y="143.50">rayo..</text></g><g><title>rayon_core::sleep::Sleep::new_internal_jobs (6 samples, 1.40%)</title><rect x="42.3256%" y="117" width="1.3953%" height="15" fill="rgb(234,103,6)" fg:x="182" fg:w="6"/><text x="42.5756%" y="127.50"></text></g><g><title>rayon_core::sleep::Sleep::new_jobs (6 samples, 1.40%)</title><rect x="42.3256%" y="101" width="1.3953%" height="15" fill="rgb(227,97,0)" fg:x="182" fg:w="6"/><text x="42.5756%" y="111.50"></text></g><g><title>rayon_core::sleep::counters::AtomicCounters::increment_jobs_event_counter_if (6 samples, 1.40%)</title><rect x="42.3256%" y="85" width="1.3953%" height="15" fill="rgb(234,150,53)" fg:x="182" fg:w="6"/><text x="42.5756%" y="95.50"></text></g><g><title>core::ops::function::Fn::call (6 samples, 1.40%)</title><rect x="42.3256%" y="69" width="1.3953%" height="15" fill="rgb(228,201,54)" fg:x="182" fg:w="6"/><text x="42.5756%" y="79.50"></text></g><g><title>rayon_core::sleep::counters::JobsEventCounter::is_sleepy (6 samples, 1.40%)</title><rect x="42.3256%" y="53" width="1.3953%" height="15" fill="rgb(222,22,37)" fg:x="182" fg:w="6"/><text x="42.5756%" y="63.50"></text></g><g><title>rayon_core::registry::Registry::pop_injected_job (2 samples, 0.47%)</title><rect x="43.7209%" y="517" width="0.4651%" height="15" fill="rgb(237,53,32)" fg:x="188" fg:w="2"/><text x="43.9709%" y="527.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (2 samples, 0.47%)</title><rect x="43.7209%" y="501" width="0.4651%" height="15" fill="rgb(233,25,53)" fg:x="188" fg:w="2"/><text x="43.9709%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.47%)</title><rect x="43.7209%" y="485" width="0.4651%" height="15" fill="rgb(210,40,34)" fg:x="188" fg:w="2"/><text x="43.9709%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.47%)</title><rect x="43.7209%" y="469" width="0.4651%" height="15" fill="rgb(241,220,44)" fg:x="188" fg:w="2"/><text x="43.9709%" y="479.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (2 samples, 0.47%)</title><rect x="46.2791%" y="373" width="0.4651%" height="15" fill="rgb(235,28,35)" fg:x="199" fg:w="2"/><text x="46.5291%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::guard::Guard&gt; (1 samples, 0.23%)</title><rect x="46.7442%" y="373" width="0.2326%" height="15" fill="rgb(210,56,17)" fg:x="201" fg:w="1"/><text x="46.9942%" y="383.50"></text></g><g><title>&lt;crossbeam_epoch::guard::Guard as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="46.7442%" y="357" width="0.2326%" height="15" fill="rgb(224,130,29)" fg:x="201" fg:w="1"/><text x="46.9942%" y="367.50"></text></g><g><title>crossbeam_epoch::internal::Local::unpin (1 samples, 0.23%)</title><rect x="46.7442%" y="341" width="0.2326%" height="15" fill="rgb(235,212,8)" fg:x="201" fg:w="1"/><text x="46.9942%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (9 samples, 2.09%)</title><rect x="46.9767%" y="373" width="2.0930%" height="15" fill="rgb(223,33,50)" fg:x="202" fg:w="9"/><text x="47.2267%" y="383.50">c..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (9 samples, 2.09%)</title><rect x="46.9767%" y="357" width="2.0930%" height="15" fill="rgb(219,149,13)" fg:x="202" fg:w="9"/><text x="47.2267%" y="367.50">c..</text></g><g><title>crossbeam_deque::deque::Buffer&lt;T&gt;::read (3 samples, 0.70%)</title><rect x="49.0698%" y="373" width="0.6977%" height="15" fill="rgb(250,156,29)" fg:x="211" fg:w="3"/><text x="49.3198%" y="383.50"></text></g><g><title>core::ptr::read_volatile (3 samples, 0.70%)</title><rect x="49.0698%" y="357" width="0.6977%" height="15" fill="rgb(216,193,19)" fg:x="211" fg:w="3"/><text x="49.3198%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (2 samples, 0.47%)</title><rect x="49.7674%" y="341" width="0.4651%" height="15" fill="rgb(216,135,14)" fg:x="214" fg:w="2"/><text x="50.0174%" y="351.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (19 samples, 4.42%)</title><rect x="49.7674%" y="373" width="4.4186%" height="15" fill="rgb(241,47,5)" fg:x="214" fg:w="19"/><text x="50.0174%" y="383.50">cross..</text></g><g><title>crossbeam_epoch::default::with_handle (19 samples, 4.42%)</title><rect x="49.7674%" y="357" width="4.4186%" height="15" fill="rgb(233,42,35)" fg:x="214" fg:w="19"/><text x="50.0174%" y="367.50">cross..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17 samples, 3.95%)</title><rect x="50.2326%" y="341" width="3.9535%" height="15" fill="rgb(231,13,6)" fg:x="216" fg:w="17"/><text x="50.4826%" y="351.50">std:..</text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (17 samples, 3.95%)</title><rect x="50.2326%" y="325" width="3.9535%" height="15" fill="rgb(207,181,40)" fg:x="216" fg:w="17"/><text x="50.4826%" y="335.50">cros..</text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (17 samples, 3.95%)</title><rect x="50.2326%" y="309" width="3.9535%" height="15" fill="rgb(254,173,49)" fg:x="216" fg:w="17"/><text x="50.4826%" y="319.50">std:..</text></g><g><title>std::sys::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (17 samples, 3.95%)</title><rect x="50.2326%" y="293" width="3.9535%" height="15" fill="rgb(221,1,38)" fg:x="216" fg:w="17"/><text x="50.4826%" y="303.50">std:..</text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 3.95%)</title><rect x="50.2326%" y="277" width="3.9535%" height="15" fill="rgb(206,124,46)" fg:x="216" fg:w="17"/><text x="50.4826%" y="287.50">core..</text></g><g><title>core::cell::Cell&lt;T&gt;::get (6 samples, 1.40%)</title><rect x="54.1860%" y="261" width="1.3953%" height="15" fill="rgb(249,21,11)" fg:x="233" fg:w="6"/><text x="54.4360%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.47%)</title><rect x="55.5814%" y="261" width="0.4651%" height="15" fill="rgb(222,201,40)" fg:x="239" fg:w="2"/><text x="55.8314%" y="271.50"></text></g><g><title>crossbeam_epoch::epoch::Epoch::pinned (3 samples, 0.70%)</title><rect x="56.0465%" y="261" width="0.6977%" height="15" fill="rgb(235,61,29)" fg:x="241" fg:w="3"/><text x="56.2965%" y="271.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (53 samples, 12.33%)</title><rect x="45.1163%" y="437" width="12.3256%" height="15" fill="rgb(219,207,3)" fg:x="194" fg:w="53"/><text x="45.3663%" y="447.50">core::iter::adapte..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (53 samples, 12.33%)</title><rect x="45.1163%" y="421" width="12.3256%" height="15" fill="rgb(222,56,46)" fg:x="194" fg:w="53"/><text x="45.3663%" y="431.50">core::iter::traits..</text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (53 samples, 12.33%)</title><rect x="45.1163%" y="405" width="12.3256%" height="15" fill="rgb(239,76,54)" fg:x="194" fg:w="53"/><text x="45.3663%" y="415.50">rayon_core::regist..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (53 samples, 12.33%)</title><rect x="45.1163%" y="389" width="12.3256%" height="15" fill="rgb(231,124,27)" fg:x="194" fg:w="53"/><text x="45.3663%" y="399.50">crossbeam_deque::d..</text></g><g><title>crossbeam_epoch::default::pin (14 samples, 3.26%)</title><rect x="54.1860%" y="373" width="3.2558%" height="15" fill="rgb(249,195,6)" fg:x="233" fg:w="14"/><text x="54.4360%" y="383.50">cro..</text></g><g><title>crossbeam_epoch::default::with_handle (14 samples, 3.26%)</title><rect x="54.1860%" y="357" width="3.2558%" height="15" fill="rgb(237,174,47)" fg:x="233" fg:w="14"/><text x="54.4360%" y="367.50">cro..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14 samples, 3.26%)</title><rect x="54.1860%" y="341" width="3.2558%" height="15" fill="rgb(206,201,31)" fg:x="233" fg:w="14"/><text x="54.4360%" y="351.50">std..</text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (14 samples, 3.26%)</title><rect x="54.1860%" y="325" width="3.2558%" height="15" fill="rgb(231,57,52)" fg:x="233" fg:w="14"/><text x="54.4360%" y="335.50">cro..</text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (14 samples, 3.26%)</title><rect x="54.1860%" y="309" width="3.2558%" height="15" fill="rgb(248,177,22)" fg:x="233" fg:w="14"/><text x="54.4360%" y="319.50">cro..</text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (14 samples, 3.26%)</title><rect x="54.1860%" y="293" width="3.2558%" height="15" fill="rgb(215,211,37)" fg:x="233" fg:w="14"/><text x="54.4360%" y="303.50">cro..</text></g><g><title>crossbeam_epoch::internal::Local::pin (14 samples, 3.26%)</title><rect x="54.1860%" y="277" width="3.2558%" height="15" fill="rgb(241,128,51)" fg:x="233" fg:w="14"/><text x="54.4360%" y="287.50">cro..</text></g><g><title>crossbeam_epoch::internal::Global::collect (3 samples, 0.70%)</title><rect x="56.7442%" y="261" width="0.6977%" height="15" fill="rgb(227,165,31)" fg:x="244" fg:w="3"/><text x="56.9942%" y="271.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (2 samples, 0.47%)</title><rect x="56.9767%" y="245" width="0.4651%" height="15" fill="rgb(228,167,24)" fg:x="245" fg:w="2"/><text x="57.2267%" y="255.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (2 samples, 0.47%)</title><rect x="56.9767%" y="229" width="0.4651%" height="15" fill="rgb(228,143,12)" fg:x="245" fg:w="2"/><text x="57.2267%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.47%)</title><rect x="56.9767%" y="213" width="0.4651%" height="15" fill="rgb(249,149,8)" fg:x="245" fg:w="2"/><text x="57.2267%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.47%)</title><rect x="56.9767%" y="197" width="0.4651%" height="15" fill="rgb(243,35,44)" fg:x="245" fg:w="2"/><text x="57.2267%" y="207.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (6 samples, 1.40%)</title><rect x="58.1395%" y="357" width="1.3953%" height="15" fill="rgb(246,89,9)" fg:x="250" fg:w="6"/><text x="58.3895%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::guard::Guard&gt; (2 samples, 0.47%)</title><rect x="59.5349%" y="357" width="0.4651%" height="15" fill="rgb(233,213,13)" fg:x="256" fg:w="2"/><text x="59.7849%" y="367.50"></text></g><g><title>&lt;crossbeam_epoch::guard::Guard as core::ops::drop::Drop&gt;::drop (2 samples, 0.47%)</title><rect x="59.5349%" y="341" width="0.4651%" height="15" fill="rgb(233,141,41)" fg:x="256" fg:w="2"/><text x="59.7849%" y="351.50"></text></g><g><title>crossbeam_epoch::internal::Local::unpin (2 samples, 0.47%)</title><rect x="59.5349%" y="325" width="0.4651%" height="15" fill="rgb(239,167,4)" fg:x="256" fg:w="2"/><text x="59.7849%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.23%)</title><rect x="59.7674%" y="309" width="0.2326%" height="15" fill="rgb(209,217,16)" fg:x="257" fg:w="1"/><text x="60.0174%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.23%)</title><rect x="59.7674%" y="293" width="0.2326%" height="15" fill="rgb(219,88,35)" fg:x="257" fg:w="1"/><text x="60.0174%" y="303.50"></text></g><g><title>core::mem::replace (1 samples, 0.23%)</title><rect x="59.7674%" y="277" width="0.2326%" height="15" fill="rgb(220,193,23)" fg:x="257" fg:w="1"/><text x="60.0174%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.23%)</title><rect x="59.7674%" y="261" width="0.2326%" height="15" fill="rgb(230,90,52)" fg:x="257" fg:w="1"/><text x="60.0174%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (24 samples, 5.58%)</title><rect x="60.0000%" y="357" width="5.5814%" height="15" fill="rgb(252,106,19)" fg:x="258" fg:w="24"/><text x="60.2500%" y="367.50">core::r..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (24 samples, 5.58%)</title><rect x="60.0000%" y="341" width="5.5814%" height="15" fill="rgb(206,74,20)" fg:x="258" fg:w="24"/><text x="60.2500%" y="351.50">core::r..</text></g><g><title>crossbeam_deque::deque::Buffer&lt;T&gt;::read (12 samples, 2.79%)</title><rect x="65.5814%" y="357" width="2.7907%" height="15" fill="rgb(230,138,44)" fg:x="282" fg:w="12"/><text x="65.8314%" y="367.50">cr..</text></g><g><title>core::ptr::read_volatile (12 samples, 2.79%)</title><rect x="65.5814%" y="341" width="2.7907%" height="15" fill="rgb(235,182,43)" fg:x="282" fg:w="12"/><text x="65.8314%" y="351.50">co..</text></g><g><title>crossbeam_epoch::atomic::Shared&lt;T&gt;::deref (1 samples, 0.23%)</title><rect x="68.3721%" y="357" width="0.2326%" height="15" fill="rgb(242,16,51)" fg:x="294" fg:w="1"/><text x="68.6221%" y="367.50"></text></g><g><title>crossbeam_epoch::atomic::decompose_tag (1 samples, 0.23%)</title><rect x="68.3721%" y="341" width="0.2326%" height="15" fill="rgb(248,9,4)" fg:x="294" fg:w="1"/><text x="68.6221%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (1 samples, 0.23%)</title><rect x="68.6047%" y="325" width="0.2326%" height="15" fill="rgb(210,31,22)" fg:x="295" fg:w="1"/><text x="68.8547%" y="335.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (36 samples, 8.37%)</title><rect x="68.6047%" y="357" width="8.3721%" height="15" fill="rgb(239,54,39)" fg:x="295" fg:w="36"/><text x="68.8547%" y="367.50">crossbeam_ep..</text></g><g><title>crossbeam_epoch::default::with_handle (36 samples, 8.37%)</title><rect x="68.6047%" y="341" width="8.3721%" height="15" fill="rgb(230,99,41)" fg:x="295" fg:w="36"/><text x="68.8547%" y="351.50">crossbeam_ep..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (35 samples, 8.14%)</title><rect x="68.8372%" y="325" width="8.1395%" height="15" fill="rgb(253,106,12)" fg:x="296" fg:w="35"/><text x="69.0872%" y="335.50">std::thread..</text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (35 samples, 8.14%)</title><rect x="68.8372%" y="309" width="8.1395%" height="15" fill="rgb(213,46,41)" fg:x="296" fg:w="35"/><text x="69.0872%" y="319.50">crossbeam_e..</text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (35 samples, 8.14%)</title><rect x="68.8372%" y="293" width="8.1395%" height="15" fill="rgb(215,133,35)" fg:x="296" fg:w="35"/><text x="69.0872%" y="303.50">std::sys::t..</text></g><g><title>std::sys::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (35 samples, 8.14%)</title><rect x="68.8372%" y="277" width="8.1395%" height="15" fill="rgb(213,28,5)" fg:x="296" fg:w="35"/><text x="69.0872%" y="287.50">std::sys::t..</text></g><g><title>core::option::Option&lt;T&gt;::as_ref (35 samples, 8.14%)</title><rect x="68.8372%" y="261" width="8.1395%" height="15" fill="rgb(215,77,49)" fg:x="296" fg:w="35"/><text x="69.0872%" y="271.50">core::optio..</text></g><g><title>core::cell::Cell&lt;T&gt;::get (9 samples, 2.09%)</title><rect x="76.9767%" y="245" width="2.0930%" height="15" fill="rgb(248,100,22)" fg:x="331" fg:w="9"/><text x="77.2267%" y="255.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.47%)</title><rect x="79.0698%" y="245" width="0.4651%" height="15" fill="rgb(208,67,9)" fg:x="340" fg:w="2"/><text x="79.3198%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.23%)</title><rect x="79.3023%" y="229" width="0.2326%" height="15" fill="rgb(219,133,21)" fg:x="341" fg:w="1"/><text x="79.5523%" y="239.50"></text></g><g><title>crossbeam_epoch::epoch::Epoch::pinned (5 samples, 1.16%)</title><rect x="79.5349%" y="245" width="1.1628%" height="15" fill="rgb(246,46,29)" fg:x="342" fg:w="5"/><text x="79.7849%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (158 samples, 36.74%)</title><rect x="44.1860%" y="501" width="36.7442%" height="15" fill="rgb(246,185,52)" fg:x="190" fg:w="158"/><text x="44.4360%" y="511.50">core::iter::traits::iterator::Iterator::find_map</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (158 samples, 36.74%)</title><rect x="44.1860%" y="485" width="36.7442%" height="15" fill="rgb(252,136,11)" fg:x="190" fg:w="158"/><text x="44.4360%" y="495.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::tr..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (158 samples, 36.74%)</title><rect x="44.1860%" y="469" width="36.7442%" height="15" fill="rgb(219,138,53)" fg:x="190" fg:w="158"/><text x="44.4360%" y="479.50">&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::trai..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (156 samples, 36.28%)</title><rect x="44.6512%" y="453" width="36.2791%" height="15" fill="rgb(211,51,23)" fg:x="192" fg:w="156"/><text x="44.9012%" y="463.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (101 samples, 23.49%)</title><rect x="57.4419%" y="437" width="23.4884%" height="15" fill="rgb(247,221,28)" fg:x="247" fg:w="101"/><text x="57.6919%" y="447.50">core::ops::function::impls::&lt;impl cor..</text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (101 samples, 23.49%)</title><rect x="57.4419%" y="421" width="23.4884%" height="15" fill="rgb(251,222,45)" fg:x="247" fg:w="101"/><text x="57.6919%" y="431.50">core::iter::adapters::filter::filter_..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (101 samples, 23.49%)</title><rect x="57.4419%" y="405" width="23.4884%" height="15" fill="rgb(217,162,53)" fg:x="247" fg:w="101"/><text x="57.6919%" y="415.50">core::iter::traits::iterator::Iterato..</text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (101 samples, 23.49%)</title><rect x="57.4419%" y="389" width="23.4884%" height="15" fill="rgb(229,93,14)" fg:x="247" fg:w="101"/><text x="57.6919%" y="399.50">rayon_core::registry::WorkerThread::s..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (100 samples, 23.26%)</title><rect x="57.6744%" y="373" width="23.2558%" height="15" fill="rgb(209,67,49)" fg:x="248" fg:w="100"/><text x="57.9244%" y="383.50">crossbeam_deque::deque::Stealer&lt;T&gt;::s..</text></g><g><title>crossbeam_epoch::default::pin (17 samples, 3.95%)</title><rect x="76.9767%" y="357" width="3.9535%" height="15" fill="rgb(213,87,29)" fg:x="331" fg:w="17"/><text x="77.2267%" y="367.50">cros..</text></g><g><title>crossbeam_epoch::default::with_handle (17 samples, 3.95%)</title><rect x="76.9767%" y="341" width="3.9535%" height="15" fill="rgb(205,151,52)" fg:x="331" fg:w="17"/><text x="77.2267%" y="351.50">cros..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17 samples, 3.95%)</title><rect x="76.9767%" y="325" width="3.9535%" height="15" fill="rgb(253,215,39)" fg:x="331" fg:w="17"/><text x="77.2267%" y="335.50">std:..</text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (17 samples, 3.95%)</title><rect x="76.9767%" y="309" width="3.9535%" height="15" fill="rgb(221,220,41)" fg:x="331" fg:w="17"/><text x="77.2267%" y="319.50">cros..</text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (17 samples, 3.95%)</title><rect x="76.9767%" y="293" width="3.9535%" height="15" fill="rgb(218,133,21)" fg:x="331" fg:w="17"/><text x="77.2267%" y="303.50">cros..</text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (17 samples, 3.95%)</title><rect x="76.9767%" y="277" width="3.9535%" height="15" fill="rgb(221,193,43)" fg:x="331" fg:w="17"/><text x="77.2267%" y="287.50">cros..</text></g><g><title>crossbeam_epoch::internal::Local::pin (17 samples, 3.95%)</title><rect x="76.9767%" y="261" width="3.9535%" height="15" fill="rgb(240,128,52)" fg:x="331" fg:w="17"/><text x="77.2267%" y="271.50">cros..</text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.23%)</title><rect x="80.6977%" y="245" width="0.2326%" height="15" fill="rgb(253,114,12)" fg:x="347" fg:w="1"/><text x="80.9477%" y="255.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (1 samples, 0.23%)</title><rect x="80.6977%" y="229" width="0.2326%" height="15" fill="rgb(215,223,47)" fg:x="347" fg:w="1"/><text x="80.9477%" y="239.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (1 samples, 0.23%)</title><rect x="80.6977%" y="213" width="0.2326%" height="15" fill="rgb(248,225,23)" fg:x="347" fg:w="1"/><text x="80.9477%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.23%)</title><rect x="80.6977%" y="197" width="0.2326%" height="15" fill="rgb(250,108,0)" fg:x="347" fg:w="1"/><text x="80.9477%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.23%)</title><rect x="80.6977%" y="181" width="0.2326%" height="15" fill="rgb(228,208,7)" fg:x="347" fg:w="1"/><text x="80.9477%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (161 samples, 37.44%)</title><rect x="43.7209%" y="549" width="37.4419%" height="15" fill="rgb(244,45,10)" fg:x="188" fg:w="161"/><text x="43.9709%" y="559.50">core::option::Option&lt;T&gt;::or_else</text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (161 samples, 37.44%)</title><rect x="43.7209%" y="533" width="37.4419%" height="15" fill="rgb(207,125,25)" fg:x="188" fg:w="161"/><text x="43.9709%" y="543.50">rayon_core::registry::WorkerThread::find_work::_{{closure}}</text></g><g><title>rayon_core::registry::WorkerThread::steal (159 samples, 36.98%)</title><rect x="44.1860%" y="517" width="36.9767%" height="15" fill="rgb(210,195,18)" fg:x="190" fg:w="159"/><text x="44.4360%" y="527.50">rayon_core::registry::WorkerThread::steal</text></g><g><title>rayon_core::registry::XorShift64Star::next_usize (1 samples, 0.23%)</title><rect x="80.9302%" y="501" width="0.2326%" height="15" fill="rgb(249,80,12)" fg:x="348" fg:w="1"/><text x="81.1802%" y="511.50"></text></g><g><title>rayon_core::registry::XorShift64Star::next (1 samples, 0.23%)</title><rect x="80.9302%" y="485" width="0.2326%" height="15" fill="rgb(221,65,9)" fg:x="348" fg:w="1"/><text x="81.1802%" y="495.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.23%)</title><rect x="81.1628%" y="533" width="0.2326%" height="15" fill="rgb(235,49,36)" fg:x="349" fg:w="1"/><text x="81.4128%" y="543.50"></text></g><g><title>crossbeam_epoch::default::pin (1 samples, 0.23%)</title><rect x="81.1628%" y="517" width="0.2326%" height="15" fill="rgb(225,32,20)" fg:x="349" fg:w="1"/><text x="81.4128%" y="527.50"></text></g><g><title>crossbeam_epoch::default::with_handle (1 samples, 0.23%)</title><rect x="81.1628%" y="501" width="0.2326%" height="15" fill="rgb(215,141,46)" fg:x="349" fg:w="1"/><text x="81.4128%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.23%)</title><rect x="81.1628%" y="485" width="0.2326%" height="15" fill="rgb(250,160,47)" fg:x="349" fg:w="1"/><text x="81.4128%" y="495.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (1 samples, 0.23%)</title><rect x="81.1628%" y="469" width="0.2326%" height="15" fill="rgb(216,222,40)" fg:x="349" fg:w="1"/><text x="81.4128%" y="479.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (1 samples, 0.23%)</title><rect x="81.1628%" y="453" width="0.2326%" height="15" fill="rgb(234,217,39)" fg:x="349" fg:w="1"/><text x="81.4128%" y="463.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (1 samples, 0.23%)</title><rect x="81.1628%" y="437" width="0.2326%" height="15" fill="rgb(207,178,40)" fg:x="349" fg:w="1"/><text x="81.4128%" y="447.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (1 samples, 0.23%)</title><rect x="81.1628%" y="421" width="0.2326%" height="15" fill="rgb(221,136,13)" fg:x="349" fg:w="1"/><text x="81.4128%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.23%)</title><rect x="81.1628%" y="405" width="0.2326%" height="15" fill="rgb(249,199,10)" fg:x="349" fg:w="1"/><text x="81.4128%" y="415.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (163 samples, 37.91%)</title><rect x="43.7209%" y="565" width="37.9070%" height="15" fill="rgb(249,222,13)" fg:x="188" fg:w="163"/><text x="43.9709%" y="575.50">rayon_core::registry::WorkerThread::find_work</text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (2 samples, 0.47%)</title><rect x="81.1628%" y="549" width="0.4651%" height="15" fill="rgb(244,185,38)" fg:x="349" fg:w="2"/><text x="81.4128%" y="559.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.23%)</title><rect x="81.3953%" y="533" width="0.2326%" height="15" fill="rgb(236,202,9)" fg:x="350" fg:w="1"/><text x="81.6453%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.23%)</title><rect x="81.3953%" y="517" width="0.2326%" height="15" fill="rgb(250,229,37)" fg:x="350" fg:w="1"/><text x="81.6453%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.23%)</title><rect x="81.3953%" y="501" width="0.2326%" height="15" fill="rgb(206,174,23)" fg:x="350" fg:w="1"/><text x="81.6453%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.23%)</title><rect x="81.3953%" y="485" width="0.2326%" height="15" fill="rgb(211,33,43)" fg:x="350" fg:w="1"/><text x="81.6453%" y="495.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (2 samples, 0.47%)</title><rect x="81.8605%" y="533" width="0.4651%" height="15" fill="rgb(245,58,50)" fg:x="352" fg:w="2"/><text x="82.1105%" y="543.50"></text></g><g><title>crossbeam_epoch::default::with_handle (2 samples, 0.47%)</title><rect x="81.8605%" y="517" width="0.4651%" height="15" fill="rgb(244,68,36)" fg:x="352" fg:w="2"/><text x="82.1105%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.47%)</title><rect x="81.8605%" y="501" width="0.4651%" height="15" fill="rgb(232,229,15)" fg:x="352" fg:w="2"/><text x="82.1105%" y="511.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (2 samples, 0.47%)</title><rect x="81.8605%" y="485" width="0.4651%" height="15" fill="rgb(254,30,23)" fg:x="352" fg:w="2"/><text x="82.1105%" y="495.50"></text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (2 samples, 0.47%)</title><rect x="81.8605%" y="469" width="0.4651%" height="15" fill="rgb(235,160,14)" fg:x="352" fg:w="2"/><text x="82.1105%" y="479.50"></text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.23%)</title><rect x="82.0930%" y="453" width="0.2326%" height="15" fill="rgb(212,155,44)" fg:x="353" fg:w="1"/><text x="82.3430%" y="463.50"></text></g><g><title>std::sys::thread_local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.23%)</title><rect x="82.0930%" y="437" width="0.2326%" height="15" fill="rgb(226,2,50)" fg:x="353" fg:w="1"/><text x="82.3430%" y="447.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit::_{{closure}} (1 samples, 0.23%)</title><rect x="82.0930%" y="421" width="0.2326%" height="15" fill="rgb(234,177,6)" fg:x="353" fg:w="1"/><text x="82.3430%" y="431.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__init (1 samples, 0.23%)</title><rect x="82.0930%" y="405" width="0.2326%" height="15" fill="rgb(217,24,9)" fg:x="353" fg:w="1"/><text x="82.3430%" y="415.50"></text></g><g><title>crossbeam_epoch::collector::Collector::register (1 samples, 0.23%)</title><rect x="82.0930%" y="389" width="0.2326%" height="15" fill="rgb(220,13,46)" fg:x="353" fg:w="1"/><text x="82.3430%" y="399.50"></text></g><g><title>crossbeam_epoch::internal::Local::register (1 samples, 0.23%)</title><rect x="82.0930%" y="373" width="0.2326%" height="15" fill="rgb(239,221,27)" fg:x="353" fg:w="1"/><text x="82.3430%" y="383.50"></text></g><g><title>crossbeam_epoch::atomic::Owned&lt;T&gt;::new (1 samples, 0.23%)</title><rect x="82.0930%" y="357" width="0.2326%" height="15" fill="rgb(222,198,25)" fg:x="353" fg:w="1"/><text x="82.3430%" y="367.50"></text></g><g><title>crossbeam_epoch::atomic::Owned&lt;T&gt;::init (1 samples, 0.23%)</title><rect x="82.0930%" y="341" width="0.2326%" height="15" fill="rgb(211,99,13)" fg:x="353" fg:w="1"/><text x="82.3430%" y="351.50"></text></g><g><title>&lt;T as crossbeam_epoch::atomic::Pointable&gt;::init (1 samples, 0.23%)</title><rect x="82.0930%" y="325" width="0.2326%" height="15" fill="rgb(232,111,31)" fg:x="353" fg:w="1"/><text x="82.3430%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.23%)</title><rect x="82.0930%" y="309" width="0.2326%" height="15" fill="rgb(245,82,37)" fg:x="353" fg:w="1"/><text x="82.3430%" y="319.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.23%)</title><rect x="82.0930%" y="293" width="0.2326%" height="15" fill="rgb(227,149,46)" fg:x="353" fg:w="1"/><text x="82.3430%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.23%)</title><rect x="82.0930%" y="277" width="0.2326%" height="15" fill="rgb(218,36,50)" fg:x="353" fg:w="1"/><text x="82.3430%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.23%)</title><rect x="82.0930%" y="261" width="0.2326%" height="15" fill="rgb(226,80,48)" fg:x="353" fg:w="1"/><text x="82.3430%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.23%)</title><rect x="82.0930%" y="245" width="0.2326%" height="15" fill="rgb(238,224,15)" fg:x="353" fg:w="1"/><text x="82.3430%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.23%)</title><rect x="82.0930%" y="229" width="0.2326%" height="15" fill="rgb(241,136,10)" fg:x="353" fg:w="1"/><text x="82.3430%" y="239.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.23%)</title><rect x="82.0930%" y="213" width="0.2326%" height="15" fill="rgb(208,32,45)" fg:x="353" fg:w="1"/><text x="82.3430%" y="223.50"></text></g><g><title>std::sys::pal::unix::alloc::aligned_malloc (1 samples, 0.23%)</title><rect x="82.0930%" y="197" width="0.2326%" height="15" fill="rgb(207,135,9)" fg:x="353" fg:w="1"/><text x="82.3430%" y="207.50"></text></g><g><title>__posix_memalign (1 samples, 0.23%)</title><rect x="82.0930%" y="181" width="0.2326%" height="15" fill="rgb(206,86,44)" fg:x="353" fg:w="1"/><text x="82.3430%" y="191.50"></text></g><g><title>_mid_memalign.isra.0 (1 samples, 0.23%)</title><rect x="82.0930%" y="165" width="0.2326%" height="15" fill="rgb(245,177,15)" fg:x="353" fg:w="1"/><text x="82.3430%" y="175.50"></text></g><g><title>_int_memalign (1 samples, 0.23%)</title><rect x="82.0930%" y="149" width="0.2326%" height="15" fill="rgb(206,64,50)" fg:x="353" fg:w="1"/><text x="82.3430%" y="159.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.23%)</title><rect x="82.0930%" y="133" width="0.2326%" height="15" fill="rgb(234,36,40)" fg:x="353" fg:w="1"/><text x="82.3430%" y="143.50"></text></g><g><title>crossbeam_epoch::epoch::Epoch::pinned (1 samples, 0.23%)</title><rect x="82.5581%" y="421" width="0.2326%" height="15" fill="rgb(213,64,8)" fg:x="355" fg:w="1"/><text x="82.8081%" y="431.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (6 samples, 1.40%)</title><rect x="81.6279%" y="549" width="1.3953%" height="15" fill="rgb(210,75,36)" fg:x="351" fg:w="6"/><text x="81.8779%" y="559.50"></text></g><g><title>crossbeam_epoch::default::pin (3 samples, 0.70%)</title><rect x="82.3256%" y="533" width="0.6977%" height="15" fill="rgb(229,88,21)" fg:x="354" fg:w="3"/><text x="82.5756%" y="543.50"></text></g><g><title>crossbeam_epoch::default::with_handle (3 samples, 0.70%)</title><rect x="82.3256%" y="517" width="0.6977%" height="15" fill="rgb(252,204,47)" fg:x="354" fg:w="3"/><text x="82.5756%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.70%)</title><rect x="82.3256%" y="501" width="0.6977%" height="15" fill="rgb(208,77,27)" fg:x="354" fg:w="3"/><text x="82.5756%" y="511.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (3 samples, 0.70%)</title><rect x="82.3256%" y="485" width="0.6977%" height="15" fill="rgb(221,76,26)" fg:x="354" fg:w="3"/><text x="82.5756%" y="495.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (3 samples, 0.70%)</title><rect x="82.3256%" y="469" width="0.6977%" height="15" fill="rgb(225,139,18)" fg:x="354" fg:w="3"/><text x="82.5756%" y="479.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (3 samples, 0.70%)</title><rect x="82.3256%" y="453" width="0.6977%" height="15" fill="rgb(230,137,11)" fg:x="354" fg:w="3"/><text x="82.5756%" y="463.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (3 samples, 0.70%)</title><rect x="82.3256%" y="437" width="0.6977%" height="15" fill="rgb(212,28,1)" fg:x="354" fg:w="3"/><text x="82.5756%" y="447.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.23%)</title><rect x="82.7907%" y="421" width="0.2326%" height="15" fill="rgb(248,164,17)" fg:x="356" fg:w="1"/><text x="83.0407%" y="431.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (1 samples, 0.23%)</title><rect x="82.7907%" y="405" width="0.2326%" height="15" fill="rgb(222,171,42)" fg:x="356" fg:w="1"/><text x="83.0407%" y="415.50"></text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (7 samples, 1.63%)</title><rect x="81.6279%" y="565" width="1.6279%" height="15" fill="rgb(243,84,45)" fg:x="351" fg:w="7"/><text x="81.8779%" y="575.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.23%)</title><rect x="83.0233%" y="549" width="0.2326%" height="15" fill="rgb(252,49,23)" fg:x="357" fg:w="1"/><text x="83.2733%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (1 samples, 0.23%)</title><rect x="83.0233%" y="533" width="0.2326%" height="15" fill="rgb(215,19,7)" fg:x="357" fg:w="1"/><text x="83.2733%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.23%)</title><rect x="83.0233%" y="517" width="0.2326%" height="15" fill="rgb(238,81,41)" fg:x="357" fg:w="1"/><text x="83.2733%" y="527.50"></text></g><g><title>rayon_core::sleep::Sleep::no_work_found (39 samples, 9.07%)</title><rect x="83.2558%" y="565" width="9.0698%" height="15" fill="rgb(210,199,37)" fg:x="358" fg:w="39"/><text x="83.5058%" y="575.50">rayon_core::s..</text></g><g><title>__sched_yield (39 samples, 9.07%)</title><rect x="83.2558%" y="549" width="9.0698%" height="15" fill="rgb(244,192,49)" fg:x="358" fg:w="39"/><text x="83.5058%" y="559.50">__sched_yield</text></g><g><title>[unknown] (39 samples, 9.07%)</title><rect x="83.2558%" y="533" width="9.0698%" height="15" fill="rgb(226,211,11)" fg:x="358" fg:w="39"/><text x="83.5058%" y="543.50">[unknown]</text></g><g><title>[unknown] (33 samples, 7.67%)</title><rect x="84.6512%" y="517" width="7.6744%" height="15" fill="rgb(236,162,54)" fg:x="364" fg:w="33"/><text x="84.9012%" y="527.50">[unknown]</text></g><g><title>[unknown] (33 samples, 7.67%)</title><rect x="84.6512%" y="501" width="7.6744%" height="15" fill="rgb(220,229,9)" fg:x="364" fg:w="33"/><text x="84.9012%" y="511.50">[unknown]</text></g><g><title>[unknown] (33 samples, 7.67%)</title><rect x="84.6512%" y="485" width="7.6744%" height="15" fill="rgb(250,87,22)" fg:x="364" fg:w="33"/><text x="84.9012%" y="495.50">[unknown]</text></g><g><title>[unknown] (29 samples, 6.74%)</title><rect x="85.5814%" y="469" width="6.7442%" height="15" fill="rgb(239,43,17)" fg:x="368" fg:w="29"/><text x="85.8314%" y="479.50">[unknown]</text></g><g><title>[unknown] (27 samples, 6.28%)</title><rect x="86.0465%" y="453" width="6.2791%" height="15" fill="rgb(231,177,25)" fg:x="370" fg:w="27"/><text x="86.2965%" y="463.50">[unknown]</text></g><g><title>[unknown] (17 samples, 3.95%)</title><rect x="88.3721%" y="437" width="3.9535%" height="15" fill="rgb(219,179,1)" fg:x="380" fg:w="17"/><text x="88.6221%" y="447.50">[unk..</text></g><g><title>[unknown] (6 samples, 1.40%)</title><rect x="90.9302%" y="421" width="1.3953%" height="15" fill="rgb(238,219,53)" fg:x="391" fg:w="6"/><text x="91.1802%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.93%)</title><rect x="91.3953%" y="405" width="0.9302%" height="15" fill="rgb(232,167,36)" fg:x="393" fg:w="4"/><text x="91.6453%" y="415.50"></text></g><g><title>rayon_core::sleep::Sleep::start_looking (7 samples, 1.63%)</title><rect x="92.3256%" y="565" width="1.6279%" height="15" fill="rgb(244,19,51)" fg:x="397" fg:w="7"/><text x="92.5756%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (360 samples, 83.72%)</title><rect x="13.0233%" y="821" width="83.7209%" height="15" fill="rgb(224,6,22)" fg:x="56" fg:w="360"/><text x="13.2733%" y="831.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (360 samples, 83.72%)</title><rect x="13.0233%" y="805" width="83.7209%" height="15" fill="rgb(224,145,5)" fg:x="56" fg:w="360"/><text x="13.2733%" y="815.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (360 samples, 83.72%)</title><rect x="13.0233%" y="789" width="83.7209%" height="15" fill="rgb(234,130,49)" fg:x="56" fg:w="360"/><text x="13.2733%" y="799.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (360 samples, 83.72%)</title><rect x="13.0233%" y="773" width="83.7209%" height="15" fill="rgb(254,6,2)" fg:x="56" fg:w="360"/><text x="13.2733%" y="783.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (360 samples, 83.72%)</title><rect x="13.0233%" y="757" width="83.7209%" height="15" fill="rgb(208,96,46)" fg:x="56" fg:w="360"/><text x="13.2733%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (360 samples, 83.72%)</title><rect x="13.0233%" y="741" width="83.7209%" height="15" fill="rgb(239,3,39)" fg:x="56" fg:w="360"/><text x="13.2733%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (360 samples, 83.72%)</title><rect x="13.0233%" y="725" width="83.7209%" height="15" fill="rgb(233,210,1)" fg:x="56" fg:w="360"/><text x="13.2733%" y="735.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (360 samples, 83.72%)</title><rect x="13.0233%" y="709" width="83.7209%" height="15" fill="rgb(244,137,37)" fg:x="56" fg:w="360"/><text x="13.2733%" y="719.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (360 samples, 83.72%)</title><rect x="13.0233%" y="693" width="83.7209%" height="15" fill="rgb(240,136,2)" fg:x="56" fg:w="360"/><text x="13.2733%" y="703.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (360 samples, 83.72%)</title><rect x="13.0233%" y="677" width="83.7209%" height="15" fill="rgb(239,18,37)" fg:x="56" fg:w="360"/><text x="13.2733%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}} (360 samples, 83.72%)</title><rect x="13.0233%" y="661" width="83.7209%" height="15" fill="rgb(218,185,22)" fg:x="56" fg:w="360"/><text x="13.2733%" y="671.50">&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}}</text></g><g><title>rayon_core::registry::ThreadBuilder::run (360 samples, 83.72%)</title><rect x="13.0233%" y="645" width="83.7209%" height="15" fill="rgb(225,218,4)" fg:x="56" fg:w="360"/><text x="13.2733%" y="655.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::main_loop (360 samples, 83.72%)</title><rect x="13.0233%" y="629" width="83.7209%" height="15" fill="rgb(230,182,32)" fg:x="56" fg:w="360"/><text x="13.2733%" y="639.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_out_of_work (360 samples, 83.72%)</title><rect x="13.0233%" y="613" width="83.7209%" height="15" fill="rgb(242,56,43)" fg:x="56" fg:w="360"/><text x="13.2733%" y="623.50">rayon_core::registry::WorkerThread::wait_until_out_of_work</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (360 samples, 83.72%)</title><rect x="13.0233%" y="597" width="83.7209%" height="15" fill="rgb(233,99,24)" fg:x="56" fg:w="360"/><text x="13.2733%" y="607.50">rayon_core::registry::WorkerThread::wait_until</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (360 samples, 83.72%)</title><rect x="13.0233%" y="581" width="83.7209%" height="15" fill="rgb(234,209,42)" fg:x="56" fg:w="360"/><text x="13.2733%" y="591.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon_core::sleep::Sleep::work_found (12 samples, 2.79%)</title><rect x="93.9535%" y="565" width="2.7907%" height="15" fill="rgb(227,7,12)" fg:x="404" fg:w="12"/><text x="94.2035%" y="575.50">ra..</text></g><g><title>rayon_core::sleep::counters::AtomicCounters::sub_inactive_thread (12 samples, 2.79%)</title><rect x="93.9535%" y="549" width="2.7907%" height="15" fill="rgb(245,203,43)" fg:x="404" fg:w="12"/><text x="94.2035%" y="559.50">ra..</text></g><g><title>rayon_core::sleep::counters::Counters::sleeping_threads (12 samples, 2.79%)</title><rect x="93.9535%" y="533" width="2.7907%" height="15" fill="rgb(238,205,33)" fg:x="404" fg:w="12"/><text x="94.2035%" y="543.50">ra..</text></g><g><title>rayon_core::sleep::counters::select_thread (12 samples, 2.79%)</title><rect x="93.9535%" y="517" width="2.7907%" height="15" fill="rgb(231,56,7)" fg:x="404" fg:w="12"/><text x="94.2035%" y="527.50">ra..</text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="97.2093%" y="725" width="0.2326%" height="15" fill="rgb(244,186,29)" fg:x="418" fg:w="1"/><text x="97.4593%" y="735.50"></text></g><g><title>malloc (7 samples, 1.63%)</title><rect x="96.9767%" y="757" width="1.6279%" height="15" fill="rgb(234,111,31)" fg:x="417" fg:w="7"/><text x="97.2267%" y="767.50"></text></g><g><title>tcache_init.part.0 (7 samples, 1.63%)</title><rect x="96.9767%" y="741" width="1.6279%" height="15" fill="rgb(241,149,10)" fg:x="417" fg:w="7"/><text x="97.2267%" y="751.50"></text></g><g><title>arena_get2.part.0 (5 samples, 1.16%)</title><rect x="97.4419%" y="725" width="1.1628%" height="15" fill="rgb(249,206,44)" fg:x="419" fg:w="5"/><text x="97.6919%" y="735.50"></text></g><g><title>alloc_new_heap (4 samples, 0.93%)</title><rect x="97.6744%" y="709" width="0.9302%" height="15" fill="rgb(251,153,30)" fg:x="420" fg:w="4"/><text x="97.9244%" y="719.50"></text></g><g><title>__mmap (4 samples, 0.93%)</title><rect x="97.6744%" y="693" width="0.9302%" height="15" fill="rgb(239,152,38)" fg:x="420" fg:w="4"/><text x="97.9244%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.93%)</title><rect x="97.6744%" y="677" width="0.9302%" height="15" fill="rgb(249,139,47)" fg:x="420" fg:w="4"/><text x="97.9244%" y="687.50"></text></g><g><title>[unknown] (4 samples, 0.93%)</title><rect x="97.6744%" y="661" width="0.9302%" height="15" fill="rgb(244,64,35)" fg:x="420" fg:w="4"/><text x="97.9244%" y="671.50"></text></g><g><title>[unknown] (4 samples, 0.93%)</title><rect x="97.6744%" y="645" width="0.9302%" height="15" fill="rgb(216,46,15)" fg:x="420" fg:w="4"/><text x="97.9244%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.93%)</title><rect x="97.6744%" y="629" width="0.9302%" height="15" fill="rgb(250,74,19)" fg:x="420" fg:w="4"/><text x="97.9244%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="98.3721%" y="613" width="0.2326%" height="15" fill="rgb(249,42,33)" fg:x="423" fg:w="1"/><text x="98.6221%" y="623.50"></text></g><g><title>all (430 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="430"/><text x="0.2500%" y="911.50"></text></g><g><title>julia (430 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="430"/><text x="0.2500%" y="895.50">julia</text></g><g><title>clone3 (398 samples, 92.56%)</title><rect x="7.4419%" y="869" width="92.5581%" height="15" fill="rgb(220,130,37)" fg:x="32" fg:w="398"/><text x="7.6919%" y="879.50">clone3</text></g><g><title>start_thread (398 samples, 92.56%)</title><rect x="7.4419%" y="853" width="92.5581%" height="15" fill="rgb(211,67,2)" fg:x="32" fg:w="398"/><text x="7.6919%" y="863.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (374 samples, 86.98%)</title><rect x="13.0233%" y="837" width="86.9767%" height="15" fill="rgb(235,68,52)" fg:x="56" fg:w="374"/><text x="13.2733%" y="847.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (14 samples, 3.26%)</title><rect x="96.7442%" y="821" width="3.2558%" height="15" fill="rgb(246,142,3)" fg:x="416" fg:w="14"/><text x="96.9942%" y="831.50">std..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (14 samples, 3.26%)</title><rect x="96.7442%" y="805" width="3.2558%" height="15" fill="rgb(241,25,7)" fg:x="416" fg:w="14"/><text x="96.9942%" y="815.50">std..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::current_guard (13 samples, 3.02%)</title><rect x="96.9767%" y="789" width="3.0233%" height="15" fill="rgb(242,119,39)" fg:x="417" fg:w="13"/><text x="97.2267%" y="799.50">std..</text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (13 samples, 3.02%)</title><rect x="96.9767%" y="773" width="3.0233%" height="15" fill="rgb(241,98,45)" fg:x="417" fg:w="13"/><text x="97.2267%" y="783.50">pth..</text></g><g><title>pthread_attr_init@@GLIBC_2.2.5 (6 samples, 1.40%)</title><rect x="98.6047%" y="757" width="1.3953%" height="15" fill="rgb(254,28,30)" fg:x="424" fg:w="6"/><text x="98.8547%" y="767.50"></text></g><g><title>__getpagesize (3 samples, 0.70%)</title><rect x="99.3023%" y="741" width="0.6977%" height="15" fill="rgb(241,142,54)" fg:x="427" fg:w="3"/><text x="99.5523%" y="751.50"></text></g></svg></svg>