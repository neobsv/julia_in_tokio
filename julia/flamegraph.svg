<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="332"><g><title>[unknown] (3 samples, 0.90%)</title><rect x="0.0000%" y="357" width="0.9036%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="367.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (2 samples, 0.60%)</title><rect x="0.3012%" y="341" width="0.6024%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.5512%" y="351.50"></text></g><g><title>malloc (2 samples, 0.60%)</title><rect x="0.3012%" y="325" width="0.6024%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.5512%" y="335.50"></text></g><g><title>_int_malloc (2 samples, 0.60%)</title><rect x="0.3012%" y="309" width="0.6024%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="0.5512%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="0.3012%" y="293" width="0.6024%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="2"/><text x="0.5512%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="0.6024%" y="277" width="0.3012%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.8524%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="0.9036%" y="341" width="0.6024%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="2"/><text x="1.1536%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="1.2048%" y="325" width="0.3012%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="1.4548%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="1.2048%" y="309" width="0.3012%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="1.4548%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="1.2048%" y="293" width="0.3012%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="1.4548%" y="303.50"></text></g><g><title>_ZN10async_task3raw28RawTask$LT$F$C$T$C$S$C$M$GT$11clone_waker17h2cad84f1ee4d9b7cE.llvm.14483207589909457024 (3 samples, 0.90%)</title><rect x="9.6386%" y="213" width="0.9036%" height="15" fill="rgb(250,228,42)" fg:x="32" fg:w="3"/><text x="9.8886%" y="223.50"></text></g><g><title>_ZN10async_task3raw28RawTask$LT$F$C$T$C$S$C$M$GT$8schedule17h2797b516d7b3a6c0E.llvm.14483207589909457024 (15 samples, 4.52%)</title><rect x="10.5422%" y="213" width="4.5181%" height="15" fill="rgb(240,193,28)" fg:x="35" fg:w="15"/><text x="10.7922%" y="223.50">_ZN10..</text></g><g><title>&lt;F as async_task::runnable::Schedule&lt;M&gt;&gt;::schedule (12 samples, 3.61%)</title><rect x="11.4458%" y="197" width="3.6145%" height="15" fill="rgb(216,20,37)" fg:x="38" fg:w="12"/><text x="11.6958%" y="207.50">&lt;F a..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (9 samples, 2.71%)</title><rect x="12.3494%" y="181" width="2.7108%" height="15" fill="rgb(206,188,39)" fg:x="41" fg:w="9"/><text x="12.5994%" y="191.50">co..</text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.30%)</title><rect x="14.7590%" y="165" width="0.3012%" height="15" fill="rgb(217,207,13)" fg:x="49" fg:w="1"/><text x="15.0090%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.90%)</title><rect x="15.0602%" y="213" width="0.9036%" height="15" fill="rgb(231,73,38)" fg:x="50" fg:w="3"/><text x="15.3102%" y="223.50"></text></g><g><title>__rust_alloc (1 samples, 0.30%)</title><rect x="15.9639%" y="213" width="0.3012%" height="15" fill="rgb(225,20,46)" fg:x="53" fg:w="1"/><text x="16.2139%" y="223.50"></text></g><g><title>async_executor::Executor::schedule (2 samples, 0.60%)</title><rect x="16.2651%" y="213" width="0.6024%" height="15" fill="rgb(210,31,41)" fg:x="54" fg:w="2"/><text x="16.5151%" y="223.50"></text></g><g><title>async_lock::once_cell::OnceCell&lt;T&gt;::get_or_try_init_blocking (1 samples, 0.30%)</title><rect x="16.5663%" y="197" width="0.3012%" height="15" fill="rgb(221,200,47)" fg:x="55" fg:w="1"/><text x="16.8163%" y="207.50"></text></g><g><title>__lll_lock_wait_private (2 samples, 0.60%)</title><rect x="17.4699%" y="197" width="0.6024%" height="15" fill="rgb(226,26,5)" fg:x="58" fg:w="2"/><text x="17.7199%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="17.4699%" y="181" width="0.6024%" height="15" fill="rgb(249,33,26)" fg:x="58" fg:w="2"/><text x="17.7199%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="17.4699%" y="165" width="0.6024%" height="15" fill="rgb(235,183,28)" fg:x="58" fg:w="2"/><text x="17.7199%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="17.4699%" y="149" width="0.6024%" height="15" fill="rgb(221,5,38)" fg:x="58" fg:w="2"/><text x="17.7199%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="17.4699%" y="133" width="0.6024%" height="15" fill="rgb(247,18,42)" fg:x="58" fg:w="2"/><text x="17.7199%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="17.7711%" y="117" width="0.3012%" height="15" fill="rgb(241,131,45)" fg:x="59" fg:w="1"/><text x="18.0211%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="17.7711%" y="101" width="0.3012%" height="15" fill="rgb(249,31,29)" fg:x="59" fg:w="1"/><text x="18.0211%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="17.7711%" y="85" width="0.3012%" height="15" fill="rgb(225,111,53)" fg:x="59" fg:w="1"/><text x="18.0211%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="17.7711%" y="69" width="0.3012%" height="15" fill="rgb(238,160,17)" fg:x="59" fg:w="1"/><text x="18.0211%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="17.7711%" y="53" width="0.3012%" height="15" fill="rgb(214,148,48)" fg:x="59" fg:w="1"/><text x="18.0211%" y="63.50"></text></g><g><title>__lll_lock_wake_private (2 samples, 0.60%)</title><rect x="18.0723%" y="197" width="0.6024%" height="15" fill="rgb(232,36,49)" fg:x="60" fg:w="2"/><text x="18.3223%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="18.0723%" y="181" width="0.6024%" height="15" fill="rgb(209,103,24)" fg:x="60" fg:w="2"/><text x="18.3223%" y="191.50"></text></g><g><title>[unknown] (12 samples, 3.61%)</title><rect x="18.9759%" y="181" width="3.6145%" height="15" fill="rgb(229,88,8)" fg:x="63" fg:w="12"/><text x="19.2259%" y="191.50">[unk..</text></g><g><title>[unknown] (11 samples, 3.31%)</title><rect x="19.2771%" y="165" width="3.3133%" height="15" fill="rgb(213,181,19)" fg:x="64" fg:w="11"/><text x="19.5271%" y="175.50">[un..</text></g><g><title>[unknown] (8 samples, 2.41%)</title><rect x="20.1807%" y="149" width="2.4096%" height="15" fill="rgb(254,191,54)" fg:x="67" fg:w="8"/><text x="20.4307%" y="159.50">[u..</text></g><g><title>[unknown] (6 samples, 1.81%)</title><rect x="20.7831%" y="133" width="1.8072%" height="15" fill="rgb(241,83,37)" fg:x="69" fg:w="6"/><text x="21.0331%" y="143.50">[..</text></g><g><title>[unknown] (3 samples, 0.90%)</title><rect x="21.6867%" y="117" width="0.9036%" height="15" fill="rgb(233,36,39)" fg:x="72" fg:w="3"/><text x="21.9367%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="21.9880%" y="101" width="0.6024%" height="15" fill="rgb(226,3,54)" fg:x="73" fg:w="2"/><text x="22.2380%" y="111.50"></text></g><g><title>malloc (20 samples, 6.02%)</title><rect x="16.8675%" y="213" width="6.0241%" height="15" fill="rgb(245,192,40)" fg:x="56" fg:w="20"/><text x="17.1175%" y="223.50">malloc</text></g><g><title>_int_malloc (14 samples, 4.22%)</title><rect x="18.6747%" y="197" width="4.2169%" height="15" fill="rgb(238,167,29)" fg:x="62" fg:w="14"/><text x="18.9247%" y="207.50">_int_..</text></g><g><title>sysmalloc (1 samples, 0.30%)</title><rect x="22.5904%" y="181" width="0.3012%" height="15" fill="rgb(232,182,51)" fg:x="75" fg:w="1"/><text x="22.8404%" y="191.50"></text></g><g><title>__default_morecore@GLIBC_2.2.5 (1 samples, 0.30%)</title><rect x="22.5904%" y="165" width="0.3012%" height="15" fill="rgb(231,60,39)" fg:x="75" fg:w="1"/><text x="22.8404%" y="175.50"></text></g><g><title>__sbrk (1 samples, 0.30%)</title><rect x="22.5904%" y="149" width="0.3012%" height="15" fill="rgb(208,69,12)" fg:x="75" fg:w="1"/><text x="22.8404%" y="159.50"></text></g><g><title>__brk (1 samples, 0.30%)</title><rect x="22.5904%" y="133" width="0.3012%" height="15" fill="rgb(235,93,37)" fg:x="75" fg:w="1"/><text x="22.8404%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="22.5904%" y="117" width="0.3012%" height="15" fill="rgb(213,116,39)" fg:x="75" fg:w="1"/><text x="22.8404%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="22.5904%" y="101" width="0.3012%" height="15" fill="rgb(222,207,29)" fg:x="75" fg:w="1"/><text x="22.8404%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="22.5904%" y="85" width="0.3012%" height="15" fill="rgb(206,96,30)" fg:x="75" fg:w="1"/><text x="22.8404%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="22.5904%" y="69" width="0.3012%" height="15" fill="rgb(218,138,4)" fg:x="75" fg:w="1"/><text x="22.8404%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="22.5904%" y="53" width="0.3012%" height="15" fill="rgb(250,191,14)" fg:x="75" fg:w="1"/><text x="22.8404%" y="63.50"></text></g><g><title>slab::VacantEntry&lt;T&gt;::insert (3 samples, 0.90%)</title><rect x="22.8916%" y="213" width="0.9036%" height="15" fill="rgb(239,60,40)" fg:x="76" fg:w="3"/><text x="23.1416%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="23.4940%" y="197" width="0.3012%" height="15" fill="rgb(206,27,48)" fg:x="78" fg:w="1"/><text x="23.7440%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="23.4940%" y="181" width="0.3012%" height="15" fill="rgb(225,35,8)" fg:x="78" fg:w="1"/><text x="23.7440%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="23.4940%" y="165" width="0.3012%" height="15" fill="rgb(250,213,24)" fg:x="78" fg:w="1"/><text x="23.7440%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="23.4940%" y="149" width="0.3012%" height="15" fill="rgb(247,123,22)" fg:x="78" fg:w="1"/><text x="23.7440%" y="159.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (15 samples, 4.52%)</title><rect x="23.7952%" y="213" width="4.5181%" height="15" fill="rgb(231,138,38)" fg:x="79" fg:w="15"/><text x="24.0452%" y="223.50">std::..</text></g><g><title>syscall (2 samples, 0.60%)</title><rect x="27.7108%" y="197" width="0.6024%" height="15" fill="rgb(231,145,46)" fg:x="92" fg:w="2"/><text x="27.9608%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="27.7108%" y="181" width="0.6024%" height="15" fill="rgb(251,118,11)" fg:x="92" fg:w="2"/><text x="27.9608%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="27.7108%" y="165" width="0.6024%" height="15" fill="rgb(217,147,25)" fg:x="92" fg:w="2"/><text x="27.9608%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="27.7108%" y="149" width="0.6024%" height="15" fill="rgb(247,81,37)" fg:x="92" fg:w="2"/><text x="27.9608%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="27.7108%" y="133" width="0.6024%" height="15" fill="rgb(209,12,38)" fg:x="92" fg:w="2"/><text x="27.9608%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="27.7108%" y="117" width="0.6024%" height="15" fill="rgb(227,1,9)" fg:x="92" fg:w="2"/><text x="27.9608%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="27.7108%" y="101" width="0.6024%" height="15" fill="rgb(248,47,43)" fg:x="92" fg:w="2"/><text x="27.9608%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="27.7108%" y="85" width="0.6024%" height="15" fill="rgb(221,10,30)" fg:x="92" fg:w="2"/><text x="27.9608%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="27.7108%" y="69" width="0.6024%" height="15" fill="rgb(210,229,1)" fg:x="92" fg:w="2"/><text x="27.9608%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="28.0120%" y="53" width="0.3012%" height="15" fill="rgb(222,148,37)" fg:x="93" fg:w="1"/><text x="28.2620%" y="63.50"></text></g><g><title>async_executor::Executor::spawn (84 samples, 25.30%)</title><rect x="4.5181%" y="229" width="25.3012%" height="15" fill="rgb(234,67,33)" fg:x="15" fg:w="84"/><text x="4.7681%" y="239.50">async_executor::Executor::spawn</text></g><g><title>syscall (5 samples, 1.51%)</title><rect x="28.3133%" y="213" width="1.5060%" height="15" fill="rgb(247,98,35)" fg:x="94" fg:w="5"/><text x="28.5633%" y="223.50"></text></g><g><title>[unknown] (5 samples, 1.51%)</title><rect x="28.3133%" y="197" width="1.5060%" height="15" fill="rgb(247,138,52)" fg:x="94" fg:w="5"/><text x="28.5633%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="29.2169%" y="181" width="0.6024%" height="15" fill="rgb(213,79,30)" fg:x="97" fg:w="2"/><text x="29.4669%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="29.5181%" y="165" width="0.3012%" height="15" fill="rgb(246,177,23)" fg:x="98" fg:w="1"/><text x="29.7681%" y="175.50"></text></g><g><title>&lt;async_task::task::Task&lt;T,M&gt; as core::future::future::Future&gt;::poll (5 samples, 1.51%)</title><rect x="30.1205%" y="213" width="1.5060%" height="15" fill="rgb(230,62,27)" fg:x="100" fg:w="5"/><text x="30.3705%" y="223.50"></text></g><g><title>async_task::header::Header&lt;M&gt;::register (4 samples, 1.20%)</title><rect x="30.4217%" y="197" width="1.2048%" height="15" fill="rgb(216,154,8)" fg:x="101" fg:w="4"/><text x="30.6717%" y="207.50"></text></g><g><title>_ZN10async_task3raw28RawTask$LT$F$C$T$C$S$C$M$GT$7destroy17h1022e1a30a46ab71E.llvm.14483207589909457024 (8 samples, 2.41%)</title><rect x="32.5301%" y="197" width="2.4096%" height="15" fill="rgb(244,35,45)" fg:x="108" fg:w="8"/><text x="32.7801%" y="207.50">_Z..</text></g><g><title>__rdl_dealloc (1 samples, 0.30%)</title><rect x="34.9398%" y="197" width="0.3012%" height="15" fill="rgb(251,115,12)" fg:x="116" fg:w="1"/><text x="35.1898%" y="207.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.30%)</title><rect x="35.2410%" y="181" width="0.3012%" height="15" fill="rgb(240,54,50)" fg:x="117" fg:w="1"/><text x="35.4910%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="35.2410%" y="165" width="0.3012%" height="15" fill="rgb(233,84,52)" fg:x="117" fg:w="1"/><text x="35.4910%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="35.2410%" y="149" width="0.3012%" height="15" fill="rgb(207,117,47)" fg:x="117" fg:w="1"/><text x="35.4910%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="35.2410%" y="133" width="0.3012%" height="15" fill="rgb(249,43,39)" fg:x="117" fg:w="1"/><text x="35.4910%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="35.2410%" y="117" width="0.3012%" height="15" fill="rgb(209,38,44)" fg:x="117" fg:w="1"/><text x="35.4910%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="35.2410%" y="101" width="0.3012%" height="15" fill="rgb(236,212,23)" fg:x="117" fg:w="1"/><text x="35.4910%" y="111.50"></text></g><g><title>_int_free_create_chunk (7 samples, 2.11%)</title><rect x="36.7470%" y="149" width="2.1084%" height="15" fill="rgb(242,79,21)" fg:x="122" fg:w="7"/><text x="36.9970%" y="159.50">_..</text></g><g><title>&lt;async_task::task::Task&lt;T,M&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 7.53%)</title><rect x="31.6265%" y="213" width="7.5301%" height="15" fill="rgb(211,96,35)" fg:x="105" fg:w="25"/><text x="31.8765%" y="223.50">&lt;async_tas..</text></g><g><title>cfree@GLIBC_2.2.5 (13 samples, 3.92%)</title><rect x="35.2410%" y="197" width="3.9157%" height="15" fill="rgb(253,215,40)" fg:x="117" fg:w="13"/><text x="35.4910%" y="207.50">cfre..</text></g><g><title>_int_free (12 samples, 3.61%)</title><rect x="35.5422%" y="181" width="3.6145%" height="15" fill="rgb(211,81,21)" fg:x="118" fg:w="12"/><text x="35.7922%" y="191.50">_int..</text></g><g><title>_int_free_merge_chunk (10 samples, 3.01%)</title><rect x="36.1446%" y="165" width="3.0120%" height="15" fill="rgb(208,190,38)" fg:x="120" fg:w="10"/><text x="36.3946%" y="175.50">_in..</text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.30%)</title><rect x="38.8554%" y="149" width="0.3012%" height="15" fill="rgb(235,213,38)" fg:x="129" fg:w="1"/><text x="39.1054%" y="159.50"></text></g><g><title>futures_lite::future::block_on (49 samples, 14.76%)</title><rect x="29.8193%" y="229" width="14.7590%" height="15" fill="rgb(237,122,38)" fg:x="99" fg:w="49"/><text x="30.0693%" y="239.50">futures_lite::future::b..</text></g><g><title>parking::Inner::park (18 samples, 5.42%)</title><rect x="39.1566%" y="213" width="5.4217%" height="15" fill="rgb(244,218,35)" fg:x="130" fg:w="18"/><text x="39.4066%" y="223.50">parking..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (16 samples, 4.82%)</title><rect x="39.7590%" y="197" width="4.8193%" height="15" fill="rgb(240,68,47)" fg:x="132" fg:w="16"/><text x="40.0090%" y="207.50">std::s..</text></g><g><title>syscall (15 samples, 4.52%)</title><rect x="40.0602%" y="181" width="4.5181%" height="15" fill="rgb(210,16,53)" fg:x="133" fg:w="15"/><text x="40.3102%" y="191.50">sysca..</text></g><g><title>[unknown] (14 samples, 4.22%)</title><rect x="40.3614%" y="165" width="4.2169%" height="15" fill="rgb(235,124,12)" fg:x="134" fg:w="14"/><text x="40.6114%" y="175.50">[unkn..</text></g><g><title>[unknown] (14 samples, 4.22%)</title><rect x="40.3614%" y="149" width="4.2169%" height="15" fill="rgb(224,169,11)" fg:x="134" fg:w="14"/><text x="40.6114%" y="159.50">[unkn..</text></g><g><title>[unknown] (12 samples, 3.61%)</title><rect x="40.9639%" y="133" width="3.6145%" height="15" fill="rgb(250,166,2)" fg:x="136" fg:w="12"/><text x="41.2139%" y="143.50">[unk..</text></g><g><title>[unknown] (11 samples, 3.31%)</title><rect x="41.2651%" y="117" width="3.3133%" height="15" fill="rgb(242,216,29)" fg:x="137" fg:w="11"/><text x="41.5151%" y="127.50">[un..</text></g><g><title>[unknown] (9 samples, 2.71%)</title><rect x="41.8675%" y="101" width="2.7108%" height="15" fill="rgb(230,116,27)" fg:x="139" fg:w="9"/><text x="42.1175%" y="111.50">[u..</text></g><g><title>[unknown] (9 samples, 2.71%)</title><rect x="41.8675%" y="85" width="2.7108%" height="15" fill="rgb(228,99,48)" fg:x="139" fg:w="9"/><text x="42.1175%" y="95.50">[u..</text></g><g><title>[unknown] (9 samples, 2.71%)</title><rect x="41.8675%" y="69" width="2.7108%" height="15" fill="rgb(253,11,6)" fg:x="139" fg:w="9"/><text x="42.1175%" y="79.50">[u..</text></g><g><title>[unknown] (7 samples, 2.11%)</title><rect x="42.4699%" y="53" width="2.1084%" height="15" fill="rgb(247,143,39)" fg:x="141" fg:w="7"/><text x="42.7199%" y="63.50">[..</text></g><g><title>[unknown] (4 samples, 1.20%)</title><rect x="43.3735%" y="37" width="1.2048%" height="15" fill="rgb(236,97,10)" fg:x="144" fg:w="4"/><text x="43.6235%" y="47.50"></text></g><g><title>deflate::writer::ZlibEncoder&lt;W&gt;::finish (1 samples, 0.30%)</title><rect x="44.5783%" y="149" width="0.3012%" height="15" fill="rgb(233,208,19)" fg:x="148" fg:w="1"/><text x="44.8283%" y="159.50"></text></g><g><title>deflate::writer::ZlibEncoder&lt;W&gt;::output_all (1 samples, 0.30%)</title><rect x="44.5783%" y="133" width="0.3012%" height="15" fill="rgb(216,164,2)" fg:x="148" fg:w="1"/><text x="44.8283%" y="143.50"></text></g><g><title>deflate::compress::compress_data_dynamic_n (1 samples, 0.30%)</title><rect x="44.5783%" y="117" width="0.3012%" height="15" fill="rgb(220,129,5)" fg:x="148" fg:w="1"/><text x="44.8283%" y="127.50"></text></g><g><title>deflate::lz77::lz77_compress_block (1 samples, 0.30%)</title><rect x="44.5783%" y="101" width="0.3012%" height="15" fill="rgb(242,17,10)" fg:x="148" fg:w="1"/><text x="44.8283%" y="111.50"></text></g><g><title>png::filter::filter (1 samples, 0.30%)</title><rect x="44.8795%" y="149" width="0.3012%" height="15" fill="rgb(242,107,0)" fg:x="149" fg:w="1"/><text x="45.1295%" y="159.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (150 samples, 45.18%)</title><rect x="1.5060%" y="341" width="45.1807%" height="15" fill="rgb(251,28,31)" fg:x="5" fg:w="150"/><text x="1.7560%" y="351.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (150 samples, 45.18%)</title><rect x="1.5060%" y="325" width="45.1807%" height="15" fill="rgb(233,223,10)" fg:x="5" fg:w="150"/><text x="1.7560%" y="335.50">__libc_start_call_main</text></g><g><title>main (150 samples, 45.18%)</title><rect x="1.5060%" y="309" width="45.1807%" height="15" fill="rgb(215,21,27)" fg:x="5" fg:w="150"/><text x="1.7560%" y="319.50">main</text></g><g><title>std::rt::lang_start_internal (150 samples, 45.18%)</title><rect x="1.5060%" y="293" width="45.1807%" height="15" fill="rgb(232,23,21)" fg:x="5" fg:w="150"/><text x="1.7560%" y="303.50">std::rt::lang_start_internal</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h0f9193a4b1c55cecE.llvm.6767742548483891421 (150 samples, 45.18%)</title><rect x="1.5060%" y="277" width="45.1807%" height="15" fill="rgb(244,5,23)" fg:x="5" fg:w="150"/><text x="1.7560%" y="287.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h0f9193a4b1c55cecE.l..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (150 samples, 45.18%)</title><rect x="1.5060%" y="261" width="45.1807%" height="15" fill="rgb(226,81,46)" fg:x="5" fg:w="150"/><text x="1.7560%" y="271.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>julia::main (150 samples, 45.18%)</title><rect x="1.5060%" y="245" width="45.1807%" height="15" fill="rgb(247,70,30)" fg:x="5" fg:w="150"/><text x="1.7560%" y="255.50">julia::main</text></g><g><title>image::io::free_functions::save_buffer_impl (7 samples, 2.11%)</title><rect x="44.5783%" y="229" width="2.1084%" height="15" fill="rgb(212,68,19)" fg:x="148" fg:w="7"/><text x="44.8283%" y="239.50">i..</text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (7 samples, 2.11%)</title><rect x="44.5783%" y="213" width="2.1084%" height="15" fill="rgb(240,187,13)" fg:x="148" fg:w="7"/><text x="44.8283%" y="223.50">i..</text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (7 samples, 2.11%)</title><rect x="44.5783%" y="197" width="2.1084%" height="15" fill="rgb(223,113,26)" fg:x="148" fg:w="7"/><text x="44.8283%" y="207.50">&lt;..</text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode (7 samples, 2.11%)</title><rect x="44.5783%" y="181" width="2.1084%" height="15" fill="rgb(206,192,2)" fg:x="148" fg:w="7"/><text x="44.8283%" y="191.50">i..</text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (7 samples, 2.11%)</title><rect x="44.5783%" y="165" width="2.1084%" height="15" fill="rgb(241,108,4)" fg:x="148" fg:w="7"/><text x="44.8283%" y="175.50">p..</text></g><g><title>std::io::Write::write_all (5 samples, 1.51%)</title><rect x="45.1807%" y="149" width="1.5060%" height="15" fill="rgb(247,173,49)" fg:x="150" fg:w="5"/><text x="45.4307%" y="159.50"></text></g><g><title>deflate::compress::compress_data_dynamic_n (5 samples, 1.51%)</title><rect x="45.1807%" y="133" width="1.5060%" height="15" fill="rgb(224,114,35)" fg:x="150" fg:w="5"/><text x="45.4307%" y="143.50"></text></g><g><title>deflate::lz77::lz77_compress_block (5 samples, 1.51%)</title><rect x="45.1807%" y="117" width="1.5060%" height="15" fill="rgb(245,159,27)" fg:x="150" fg:w="5"/><text x="45.4307%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="46.6867%" y="325" width="0.6024%" height="15" fill="rgb(245,172,44)" fg:x="155" fg:w="2"/><text x="46.9367%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="46.6867%" y="309" width="0.6024%" height="15" fill="rgb(236,23,11)" fg:x="155" fg:w="2"/><text x="46.9367%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="46.6867%" y="293" width="0.6024%" height="15" fill="rgb(205,117,38)" fg:x="155" fg:w="2"/><text x="46.9367%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="46.9880%" y="277" width="0.3012%" height="15" fill="rgb(237,72,25)" fg:x="156" fg:w="1"/><text x="47.2380%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="46.9880%" y="261" width="0.3012%" height="15" fill="rgb(244,70,9)" fg:x="156" fg:w="1"/><text x="47.2380%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="46.9880%" y="245" width="0.3012%" height="15" fill="rgb(217,125,39)" fg:x="156" fg:w="1"/><text x="47.2380%" y="255.50"></text></g><g><title>dl_main (1 samples, 0.30%)</title><rect x="47.2892%" y="293" width="0.3012%" height="15" fill="rgb(235,36,10)" fg:x="157" fg:w="1"/><text x="47.5392%" y="303.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.30%)</title><rect x="47.2892%" y="277" width="0.3012%" height="15" fill="rgb(251,123,47)" fg:x="157" fg:w="1"/><text x="47.5392%" y="287.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.30%)</title><rect x="47.2892%" y="261" width="0.3012%" height="15" fill="rgb(221,13,13)" fg:x="157" fg:w="1"/><text x="47.5392%" y="271.50"></text></g><g><title>do_lookup_x (1 samples, 0.30%)</title><rect x="47.2892%" y="245" width="0.3012%" height="15" fill="rgb(238,131,9)" fg:x="157" fg:w="1"/><text x="47.5392%" y="255.50"></text></g><g><title>_dl_start_final (2 samples, 0.60%)</title><rect x="47.2892%" y="325" width="0.6024%" height="15" fill="rgb(211,50,8)" fg:x="157" fg:w="2"/><text x="47.5392%" y="335.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.60%)</title><rect x="47.2892%" y="309" width="0.6024%" height="15" fill="rgb(245,182,24)" fg:x="157" fg:w="2"/><text x="47.5392%" y="319.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.30%)</title><rect x="47.5904%" y="293" width="0.3012%" height="15" fill="rgb(242,14,37)" fg:x="158" fg:w="1"/><text x="47.8404%" y="303.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.30%)</title><rect x="47.8916%" y="325" width="0.3012%" height="15" fill="rgb(246,228,12)" fg:x="159" fg:w="1"/><text x="48.1416%" y="335.50"></text></g><g><title>_start (158 samples, 47.59%)</title><rect x="0.9036%" y="357" width="47.5904%" height="15" fill="rgb(213,55,15)" fg:x="3" fg:w="158"/><text x="1.1536%" y="367.50">_start</text></g><g><title>_dl_start (6 samples, 1.81%)</title><rect x="46.6867%" y="341" width="1.8072%" height="15" fill="rgb(209,9,3)" fg:x="155" fg:w="6"/><text x="46.9367%" y="351.50">_..</text></g><g><title>rtld_timer_start (1 samples, 0.30%)</title><rect x="48.1928%" y="325" width="0.3012%" height="15" fill="rgb(230,59,30)" fg:x="160" fg:w="1"/><text x="48.4428%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="48.1928%" y="309" width="0.3012%" height="15" fill="rgb(209,121,21)" fg:x="160" fg:w="1"/><text x="48.4428%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="48.1928%" y="293" width="0.3012%" height="15" fill="rgb(220,109,13)" fg:x="160" fg:w="1"/><text x="48.4428%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="48.1928%" y="277" width="0.3012%" height="15" fill="rgb(232,18,1)" fg:x="160" fg:w="1"/><text x="48.4428%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="48.1928%" y="261" width="0.3012%" height="15" fill="rgb(215,41,42)" fg:x="160" fg:w="1"/><text x="48.4428%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="48.1928%" y="245" width="0.3012%" height="15" fill="rgb(224,123,36)" fg:x="160" fg:w="1"/><text x="48.4428%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.90%)</title><rect x="48.4940%" y="325" width="0.9036%" height="15" fill="rgb(240,125,3)" fg:x="161" fg:w="3"/><text x="48.7440%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.90%)</title><rect x="48.4940%" y="309" width="0.9036%" height="15" fill="rgb(205,98,50)" fg:x="161" fg:w="3"/><text x="48.7440%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="48.7952%" y="293" width="0.6024%" height="15" fill="rgb(205,185,37)" fg:x="162" fg:w="2"/><text x="49.0452%" y="303.50"></text></g><g><title>__ctype_init (1 samples, 0.30%)</title><rect x="49.3976%" y="325" width="0.3012%" height="15" fill="rgb(238,207,15)" fg:x="164" fg:w="1"/><text x="49.6476%" y="335.50"></text></g><g><title>__GI___sigaltstack (1 samples, 0.30%)</title><rect x="49.6988%" y="293" width="0.3012%" height="15" fill="rgb(213,199,42)" fg:x="165" fg:w="1"/><text x="49.9488%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="49.6988%" y="277" width="0.3012%" height="15" fill="rgb(235,201,11)" fg:x="165" fg:w="1"/><text x="49.9488%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="49.6988%" y="261" width="0.3012%" height="15" fill="rgb(207,46,11)" fg:x="165" fg:w="1"/><text x="49.9488%" y="271.50"></text></g><g><title>julia (167 samples, 50.30%)</title><rect x="0.0000%" y="373" width="50.3012%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="167"/><text x="0.2500%" y="383.50">julia</text></g><g><title>clone3 (6 samples, 1.81%)</title><rect x="48.4940%" y="357" width="1.8072%" height="15" fill="rgb(243,32,47)" fg:x="161" fg:w="6"/><text x="48.7440%" y="367.50">c..</text></g><g><title>start_thread (6 samples, 1.81%)</title><rect x="48.4940%" y="341" width="1.8072%" height="15" fill="rgb(247,202,23)" fg:x="161" fg:w="6"/><text x="48.7440%" y="351.50">s..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2 samples, 0.60%)</title><rect x="49.6988%" y="325" width="0.6024%" height="15" fill="rgb(219,102,11)" fg:x="165" fg:w="2"/><text x="49.9488%" y="335.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (2 samples, 0.60%)</title><rect x="49.6988%" y="309" width="0.6024%" height="15" fill="rgb(243,110,44)" fg:x="165" fg:w="2"/><text x="49.9488%" y="319.50"></text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (1 samples, 0.30%)</title><rect x="50.0000%" y="293" width="0.3012%" height="15" fill="rgb(222,74,54)" fg:x="166" fg:w="1"/><text x="50.2500%" y="303.50"></text></g><g><title>pthread_attr_init@@GLIBC_2.2.5 (1 samples, 0.30%)</title><rect x="50.0000%" y="277" width="0.3012%" height="15" fill="rgb(216,99,12)" fg:x="166" fg:w="1"/><text x="50.2500%" y="287.50"></text></g><g><title>__getpagesize (1 samples, 0.30%)</title><rect x="50.0000%" y="261" width="0.3012%" height="15" fill="rgb(226,22,26)" fg:x="166" fg:w="1"/><text x="50.2500%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="50.3012%" y="357" width="0.3012%" height="15" fill="rgb(217,163,10)" fg:x="167" fg:w="1"/><text x="50.5512%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.90%)</title><rect x="50.6024%" y="325" width="0.9036%" height="15" fill="rgb(213,25,53)" fg:x="168" fg:w="3"/><text x="50.8524%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.90%)</title><rect x="50.6024%" y="309" width="0.9036%" height="15" fill="rgb(252,105,26)" fg:x="168" fg:w="3"/><text x="50.8524%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="50.9036%" y="293" width="0.6024%" height="15" fill="rgb(220,39,43)" fg:x="169" fg:w="2"/><text x="51.1536%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="51.2048%" y="277" width="0.3012%" height="15" fill="rgb(229,68,48)" fg:x="170" fg:w="1"/><text x="51.4548%" y="287.50"></text></g><g><title>__ctype_init (1 samples, 0.30%)</title><rect x="51.5060%" y="325" width="0.3012%" height="15" fill="rgb(252,8,32)" fg:x="171" fg:w="1"/><text x="51.7560%" y="335.50"></text></g><g><title>alloc::task::raw_waker::wake (15 samples, 4.52%)</title><rect x="57.2289%" y="229" width="4.5181%" height="15" fill="rgb(223,20,43)" fg:x="190" fg:w="15"/><text x="57.4789%" y="239.50">alloc..</text></g><g><title>parking::Inner::unpark (15 samples, 4.52%)</title><rect x="57.2289%" y="213" width="4.5181%" height="15" fill="rgb(229,81,49)" fg:x="190" fg:w="15"/><text x="57.4789%" y="223.50">parki..</text></g><g><title>syscall (14 samples, 4.22%)</title><rect x="57.5301%" y="197" width="4.2169%" height="15" fill="rgb(236,28,36)" fg:x="191" fg:w="14"/><text x="57.7801%" y="207.50">sysca..</text></g><g><title>[unknown] (14 samples, 4.22%)</title><rect x="57.5301%" y="181" width="4.2169%" height="15" fill="rgb(249,185,26)" fg:x="191" fg:w="14"/><text x="57.7801%" y="191.50">[unkn..</text></g><g><title>[unknown] (12 samples, 3.61%)</title><rect x="58.1325%" y="165" width="3.6145%" height="15" fill="rgb(249,174,33)" fg:x="193" fg:w="12"/><text x="58.3825%" y="175.50">[unk..</text></g><g><title>[unknown] (9 samples, 2.71%)</title><rect x="59.0361%" y="149" width="2.7108%" height="15" fill="rgb(233,201,37)" fg:x="196" fg:w="9"/><text x="59.2861%" y="159.50">[u..</text></g><g><title>[unknown] (8 samples, 2.41%)</title><rect x="59.3373%" y="133" width="2.4096%" height="15" fill="rgb(221,78,26)" fg:x="197" fg:w="8"/><text x="59.5873%" y="143.50">[u..</text></g><g><title>[unknown] (6 samples, 1.81%)</title><rect x="59.9398%" y="117" width="1.8072%" height="15" fill="rgb(250,127,30)" fg:x="199" fg:w="6"/><text x="60.1898%" y="127.50">[..</text></g><g><title>[unknown] (4 samples, 1.20%)</title><rect x="60.5422%" y="101" width="1.2048%" height="15" fill="rgb(230,49,44)" fg:x="201" fg:w="4"/><text x="60.7922%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="61.1446%" y="85" width="0.6024%" height="15" fill="rgb(229,67,23)" fg:x="203" fg:w="2"/><text x="61.3946%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="61.4458%" y="69" width="0.3012%" height="15" fill="rgb(249,83,47)" fg:x="204" fg:w="1"/><text x="61.6958%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="61.4458%" y="53" width="0.3012%" height="15" fill="rgb(215,43,3)" fg:x="204" fg:w="1"/><text x="61.6958%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="61.4458%" y="37" width="0.3012%" height="15" fill="rgb(238,154,13)" fg:x="204" fg:w="1"/><text x="61.6958%" y="47.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::drop_waker (2 samples, 0.60%)</title><rect x="68.3735%" y="197" width="0.6024%" height="15" fill="rgb(219,56,2)" fg:x="227" fg:w="2"/><text x="68.6235%" y="207.50"></text></g><g><title>&lt;async_executor::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 18.07%)</title><rect x="65.6627%" y="213" width="18.0723%" height="15" fill="rgb(233,0,4)" fg:x="218" fg:w="60"/><text x="65.9127%" y="223.50">&lt;async_executor::CallOnDrop&lt;..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (49 samples, 14.76%)</title><rect x="68.9759%" y="197" width="14.7590%" height="15" fill="rgb(235,30,7)" fg:x="229" fg:w="49"/><text x="69.2259%" y="207.50">std::sys::sync::mutex::..</text></g><g><title>syscall (6 samples, 1.81%)</title><rect x="81.9277%" y="181" width="1.8072%" height="15" fill="rgb(250,79,13)" fg:x="272" fg:w="6"/><text x="82.1777%" y="191.50">s..</text></g><g><title>[unknown] (6 samples, 1.81%)</title><rect x="81.9277%" y="165" width="1.8072%" height="15" fill="rgb(211,146,34)" fg:x="272" fg:w="6"/><text x="82.1777%" y="175.50">[..</text></g><g><title>[unknown] (6 samples, 1.81%)</title><rect x="81.9277%" y="149" width="1.8072%" height="15" fill="rgb(228,22,38)" fg:x="272" fg:w="6"/><text x="82.1777%" y="159.50">[..</text></g><g><title>[unknown] (6 samples, 1.81%)</title><rect x="81.9277%" y="133" width="1.8072%" height="15" fill="rgb(235,168,5)" fg:x="272" fg:w="6"/><text x="82.1777%" y="143.50">[..</text></g><g><title>[unknown] (4 samples, 1.20%)</title><rect x="82.5301%" y="117" width="1.2048%" height="15" fill="rgb(221,155,16)" fg:x="274" fg:w="4"/><text x="82.7801%" y="127.50"></text></g><g><title>[unknown] (4 samples, 1.20%)</title><rect x="82.5301%" y="101" width="1.2048%" height="15" fill="rgb(215,215,53)" fg:x="274" fg:w="4"/><text x="82.7801%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.90%)</title><rect x="82.8313%" y="85" width="0.9036%" height="15" fill="rgb(223,4,10)" fg:x="275" fg:w="3"/><text x="83.0813%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.90%)</title><rect x="82.8313%" y="69" width="0.9036%" height="15" fill="rgb(234,103,6)" fg:x="275" fg:w="3"/><text x="83.0813%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.90%)</title><rect x="82.8313%" y="53" width="0.9036%" height="15" fill="rgb(227,97,0)" fg:x="275" fg:w="3"/><text x="83.0813%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.60%)</title><rect x="83.1325%" y="37" width="0.6024%" height="15" fill="rgb(234,150,53)" fg:x="276" fg:w="2"/><text x="83.3825%" y="47.50"></text></g><g><title>hypot (25 samples, 7.53%)</title><rect x="83.7349%" y="213" width="7.5301%" height="15" fill="rgb(228,201,54)" fg:x="278" fg:w="25"/><text x="83.9849%" y="223.50">hypot</text></g><g><title>_ZN10async_task3raw28RawTask$LT$F$C$T$C$S$C$M$GT$3run17hdf9550900efb1e36E.llvm.14483207589909457024 (140 samples, 42.17%)</title><rect x="53.6145%" y="245" width="42.1687%" height="15" fill="rgb(222,22,37)" fg:x="178" fg:w="140"/><text x="53.8645%" y="255.50">_ZN10async_task3raw28RawTask$LT$F$C$T$C$S$C$M$GT$3run17hdf9550900efb1..</text></g><g><title>std::panicking::try (113 samples, 34.04%)</title><rect x="61.7470%" y="229" width="34.0361%" height="15" fill="rgb(237,53,32)" fg:x="205" fg:w="113"/><text x="61.9970%" y="239.50">std::panicking::try</text></g><g><title>pow (15 samples, 4.52%)</title><rect x="91.2651%" y="213" width="4.5181%" height="15" fill="rgb(233,25,53)" fg:x="303" fg:w="15"/><text x="91.5151%" y="223.50">pow</text></g><g><title>[libm.so.6] (11 samples, 3.31%)</title><rect x="92.4699%" y="197" width="3.3133%" height="15" fill="rgb(210,40,34)" fg:x="307" fg:w="11"/><text x="92.7199%" y="207.50">[li..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (2 samples, 0.60%)</title><rect x="96.0843%" y="229" width="0.6024%" height="15" fill="rgb(241,220,44)" fg:x="319" fg:w="2"/><text x="96.3343%" y="239.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.30%)</title><rect x="98.4940%" y="197" width="0.3012%" height="15" fill="rgb(235,28,35)" fg:x="327" fg:w="1"/><text x="98.7440%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.4940%" y="181" width="0.3012%" height="15" fill="rgb(210,56,17)" fg:x="327" fg:w="1"/><text x="98.7440%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.4940%" y="165" width="0.3012%" height="15" fill="rgb(224,130,29)" fg:x="327" fg:w="1"/><text x="98.7440%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.4940%" y="149" width="0.3012%" height="15" fill="rgb(235,212,8)" fg:x="327" fg:w="1"/><text x="98.7440%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.4940%" y="133" width="0.3012%" height="15" fill="rgb(223,33,50)" fg:x="327" fg:w="1"/><text x="98.7440%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.4940%" y="117" width="0.3012%" height="15" fill="rgb(219,149,13)" fg:x="327" fg:w="1"/><text x="98.7440%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.4940%" y="101" width="0.3012%" height="15" fill="rgb(250,156,29)" fg:x="327" fg:w="1"/><text x="98.7440%" y="111.50"></text></g><g><title>async_executor::steal (11 samples, 3.31%)</title><rect x="95.7831%" y="245" width="3.3133%" height="15" fill="rgb(216,193,19)" fg:x="318" fg:w="11"/><text x="96.0331%" y="255.50">asy..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (8 samples, 2.41%)</title><rect x="96.6867%" y="229" width="2.4096%" height="15" fill="rgb(216,135,14)" fg:x="321" fg:w="8"/><text x="96.9367%" y="239.50">co..</text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.90%)</title><rect x="98.1928%" y="213" width="0.9036%" height="15" fill="rgb(241,47,5)" fg:x="326" fg:w="3"/><text x="98.4428%" y="223.50"></text></g><g><title>_int_free (1 samples, 0.30%)</title><rect x="98.7952%" y="197" width="0.3012%" height="15" fill="rgb(233,42,35)" fg:x="328" fg:w="1"/><text x="99.0452%" y="207.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.30%)</title><rect x="98.7952%" y="181" width="0.3012%" height="15" fill="rgb(231,13,6)" fg:x="328" fg:w="1"/><text x="99.0452%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.7952%" y="165" width="0.3012%" height="15" fill="rgb(207,181,40)" fg:x="328" fg:w="1"/><text x="99.0452%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.7952%" y="149" width="0.3012%" height="15" fill="rgb(254,173,49)" fg:x="328" fg:w="1"/><text x="99.0452%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.7952%" y="133" width="0.3012%" height="15" fill="rgb(221,1,38)" fg:x="328" fg:w="1"/><text x="99.0452%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.7952%" y="117" width="0.3012%" height="15" fill="rgb(206,124,46)" fg:x="328" fg:w="1"/><text x="99.0452%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.7952%" y="101" width="0.3012%" height="15" fill="rgb(249,21,11)" fg:x="328" fg:w="1"/><text x="99.0452%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.7952%" y="85" width="0.3012%" height="15" fill="rgb(222,201,40)" fg:x="328" fg:w="1"/><text x="99.0452%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.7952%" y="69" width="0.3012%" height="15" fill="rgb(235,61,29)" fg:x="328" fg:w="1"/><text x="99.0452%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.7952%" y="53" width="0.3012%" height="15" fill="rgb(219,207,3)" fg:x="328" fg:w="1"/><text x="99.0452%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="98.7952%" y="37" width="0.3012%" height="15" fill="rgb(222,56,46)" fg:x="328" fg:w="1"/><text x="99.0452%" y="47.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (158 samples, 47.59%)</title><rect x="51.8072%" y="309" width="47.5904%" height="15" fill="rgb(239,76,54)" fg:x="172" fg:w="158"/><text x="52.0572%" y="319.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (158 samples, 47.59%)</title><rect x="51.8072%" y="293" width="47.5904%" height="15" fill="rgb(231,124,27)" fg:x="172" fg:w="158"/><text x="52.0572%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>async_io::driver::block_on (158 samples, 47.59%)</title><rect x="51.8072%" y="277" width="47.5904%" height="15" fill="rgb(249,195,6)" fg:x="172" fg:w="158"/><text x="52.0572%" y="287.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (158 samples, 47.59%)</title><rect x="51.8072%" y="261" width="47.5904%" height="15" fill="rgb(237,174,47)" fg:x="172" fg:w="158"/><text x="52.0572%" y="271.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1 samples, 0.30%)</title><rect x="99.0964%" y="245" width="0.3012%" height="15" fill="rgb(206,201,31)" fg:x="329" fg:w="1"/><text x="99.3464%" y="255.50"></text></g><g><title>__mmap (1 samples, 0.30%)</title><rect x="99.3976%" y="293" width="0.3012%" height="15" fill="rgb(231,57,52)" fg:x="330" fg:w="1"/><text x="99.6476%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="99.3976%" y="277" width="0.3012%" height="15" fill="rgb(248,177,22)" fg:x="330" fg:w="1"/><text x="99.6476%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="99.3976%" y="261" width="0.3012%" height="15" fill="rgb(215,211,37)" fg:x="330" fg:w="1"/><text x="99.6476%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="99.3976%" y="245" width="0.3012%" height="15" fill="rgb(241,128,51)" fg:x="330" fg:w="1"/><text x="99.6476%" y="255.50"></text></g><g><title>all (332 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="332"/><text x="0.2500%" y="399.50"></text></g><g><title>smol-1 (165 samples, 49.70%)</title><rect x="50.3012%" y="373" width="49.6988%" height="15" fill="rgb(228,167,24)" fg:x="167" fg:w="165"/><text x="50.5512%" y="383.50">smol-1</text></g><g><title>clone3 (164 samples, 49.40%)</title><rect x="50.6024%" y="357" width="49.3976%" height="15" fill="rgb(228,143,12)" fg:x="168" fg:w="164"/><text x="50.8524%" y="367.50">clone3</text></g><g><title>start_thread (164 samples, 49.40%)</title><rect x="50.6024%" y="341" width="49.3976%" height="15" fill="rgb(249,149,8)" fg:x="168" fg:w="164"/><text x="50.8524%" y="351.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (160 samples, 48.19%)</title><rect x="51.8072%" y="325" width="48.1928%" height="15" fill="rgb(243,35,44)" fg:x="172" fg:w="160"/><text x="52.0572%" y="335.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (2 samples, 0.60%)</title><rect x="99.3976%" y="309" width="0.6024%" height="15" fill="rgb(246,89,9)" fg:x="330" fg:w="2"/><text x="99.6476%" y="319.50"></text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (1 samples, 0.30%)</title><rect x="99.6988%" y="293" width="0.3012%" height="15" fill="rgb(233,213,13)" fg:x="331" fg:w="1"/><text x="99.9488%" y="303.50"></text></g><g><title>pthread_attr_init@@GLIBC_2.2.5 (1 samples, 0.30%)</title><rect x="99.6988%" y="277" width="0.3012%" height="15" fill="rgb(233,141,41)" fg:x="331" fg:w="1"/><text x="99.9488%" y="287.50"></text></g><g><title>__getpagesize (1 samples, 0.30%)</title><rect x="99.6988%" y="261" width="0.3012%" height="15" fill="rgb(239,167,4)" fg:x="331" fg:w="1"/><text x="99.9488%" y="271.50"></text></g></svg></svg>