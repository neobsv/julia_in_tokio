<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="145"><g><title>[libc.so.6] (1 samples, 0.69%)</title><rect x="0.0000%" y="357" width="0.6897%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (1 samples, 0.69%)</title><rect x="0.0000%" y="341" width="0.6897%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>malloc (1 samples, 0.69%)</title><rect x="0.0000%" y="325" width="0.6897%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>_int_malloc (1 samples, 0.69%)</title><rect x="0.0000%" y="309" width="0.6897%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="0.0000%" y="293" width="0.6897%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>_int_malloc (1 samples, 0.69%)</title><rect x="0.6897%" y="357" width="0.6897%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.9397%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="0.6897%" y="341" width="0.6897%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.9397%" y="351.50"></text></g><g><title>[unknown] (2 samples, 1.38%)</title><rect x="1.3793%" y="341" width="1.3793%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="2"/><text x="1.6293%" y="351.50"></text></g><g><title>_ZN10async_task3raw28RawTask$LT$F$C$T$C$S$C$M$GT$7destroy17h52db6fac69c6862fE.llvm.15707610339334854943 (1 samples, 0.69%)</title><rect x="6.2069%" y="213" width="0.6897%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="6.4569%" y="223.50"></text></g><g><title>&lt;async_task::task::Task&lt;T,M&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 3.45%)</title><rect x="4.1379%" y="229" width="3.4483%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="5"/><text x="4.3879%" y="239.50">&lt;as..</text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.69%)</title><rect x="6.8966%" y="213" width="0.6897%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="1"/><text x="7.1466%" y="223.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.69%)</title><rect x="6.8966%" y="197" width="0.6897%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="1"/><text x="7.1466%" y="207.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.69%)</title><rect x="6.8966%" y="181" width="0.6897%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="1"/><text x="7.1466%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="7.5862%" y="229" width="0.6897%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="1"/><text x="7.8362%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="7.5862%" y="213" width="0.6897%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="1"/><text x="7.8362%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="7.5862%" y="197" width="0.6897%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="1"/><text x="7.8362%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="7.5862%" y="181" width="0.6897%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="1"/><text x="7.8362%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="7.5862%" y="165" width="0.6897%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="1"/><text x="7.8362%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.69%)</title><rect x="8.2759%" y="229" width="0.6897%" height="15" fill="rgb(221,200,47)" fg:x="12" fg:w="1"/><text x="8.5259%" y="239.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h29326d84564d445fE.llvm.6626259486572493614 (1 samples, 0.69%)</title><rect x="8.2759%" y="213" width="0.6897%" height="15" fill="rgb(226,26,5)" fg:x="12" fg:w="1"/><text x="8.5259%" y="223.50"></text></g><g><title>realloc (1 samples, 0.69%)</title><rect x="8.2759%" y="197" width="0.6897%" height="15" fill="rgb(249,33,26)" fg:x="12" fg:w="1"/><text x="8.5259%" y="207.50"></text></g><g><title>_int_realloc (1 samples, 0.69%)</title><rect x="8.2759%" y="181" width="0.6897%" height="15" fill="rgb(235,183,28)" fg:x="12" fg:w="1"/><text x="8.5259%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.69%)</title><rect x="8.2759%" y="165" width="0.6897%" height="15" fill="rgb(221,5,38)" fg:x="12" fg:w="1"/><text x="8.5259%" y="175.50"></text></g><g><title>_ZN10async_task3raw28RawTask$LT$F$C$T$C$S$C$M$GT$11clone_waker17hb4a9aece71076ddfE.llvm.15707610339334854943 (1 samples, 0.69%)</title><rect x="18.6207%" y="213" width="0.6897%" height="15" fill="rgb(247,18,42)" fg:x="27" fg:w="1"/><text x="18.8707%" y="223.50"></text></g><g><title>_ZN10async_task3raw28RawTask$LT$F$C$T$C$S$C$M$GT$8schedule17ha1d0ec7bfb0802a0E.llvm.15707610339334854943 (15 samples, 10.34%)</title><rect x="19.3103%" y="213" width="10.3448%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="15"/><text x="19.5603%" y="223.50">_ZN10async_task..</text></g><g><title>&lt;F as async_task::runnable::Schedule&lt;M&gt;&gt;::schedule (9 samples, 6.21%)</title><rect x="23.4483%" y="197" width="6.2069%" height="15" fill="rgb(249,31,29)" fg:x="34" fg:w="9"/><text x="23.6983%" y="207.50">&lt;F as as..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (8 samples, 5.52%)</title><rect x="24.1379%" y="181" width="5.5172%" height="15" fill="rgb(225,111,53)" fg:x="35" fg:w="8"/><text x="24.3879%" y="191.50">concurr..</text></g><g><title>malloc (4 samples, 2.76%)</title><rect x="26.8966%" y="165" width="2.7586%" height="15" fill="rgb(238,160,17)" fg:x="39" fg:w="4"/><text x="27.1466%" y="175.50">ma..</text></g><g><title>_int_malloc (4 samples, 2.76%)</title><rect x="26.8966%" y="149" width="2.7586%" height="15" fill="rgb(214,148,48)" fg:x="39" fg:w="4"/><text x="27.1466%" y="159.50">_i..</text></g><g><title>[unknown] (4 samples, 2.76%)</title><rect x="26.8966%" y="133" width="2.7586%" height="15" fill="rgb(232,36,49)" fg:x="39" fg:w="4"/><text x="27.1466%" y="143.50">[u..</text></g><g><title>[unknown] (3 samples, 2.07%)</title><rect x="27.5862%" y="117" width="2.0690%" height="15" fill="rgb(209,103,24)" fg:x="40" fg:w="3"/><text x="27.8362%" y="127.50">[..</text></g><g><title>[unknown] (3 samples, 2.07%)</title><rect x="27.5862%" y="101" width="2.0690%" height="15" fill="rgb(229,88,8)" fg:x="40" fg:w="3"/><text x="27.8362%" y="111.50">[..</text></g><g><title>[unknown] (2 samples, 1.38%)</title><rect x="28.2759%" y="85" width="1.3793%" height="15" fill="rgb(213,181,19)" fg:x="41" fg:w="2"/><text x="28.5259%" y="95.50"></text></g><g><title>[unknown] (2 samples, 1.38%)</title><rect x="28.2759%" y="69" width="1.3793%" height="15" fill="rgb(254,191,54)" fg:x="41" fg:w="2"/><text x="28.5259%" y="79.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 4.14%)</title><rect x="29.6552%" y="213" width="4.1379%" height="15" fill="rgb(241,83,37)" fg:x="43" fg:w="6"/><text x="29.9052%" y="223.50">__mem..</text></g><g><title>async_executor::Executor::schedule (4 samples, 2.76%)</title><rect x="33.7931%" y="213" width="2.7586%" height="15" fill="rgb(233,36,39)" fg:x="49" fg:w="4"/><text x="34.0431%" y="223.50">as..</text></g><g><title>async_lock::once_cell::OnceCell&lt;T&gt;::get_or_try_init_blocking (3 samples, 2.07%)</title><rect x="34.4828%" y="197" width="2.0690%" height="15" fill="rgb(226,3,54)" fg:x="50" fg:w="3"/><text x="34.7328%" y="207.50">a..</text></g><g><title>async_executor::Executor::state (2 samples, 1.38%)</title><rect x="36.5517%" y="213" width="1.3793%" height="15" fill="rgb(245,192,40)" fg:x="53" fg:w="2"/><text x="36.8017%" y="223.50"></text></g><g><title>async_lock::once_cell::OnceCell&lt;T&gt;::get_or_try_init_blocking (3 samples, 2.07%)</title><rect x="37.9310%" y="213" width="2.0690%" height="15" fill="rgb(238,167,29)" fg:x="55" fg:w="3"/><text x="38.1810%" y="223.50">a..</text></g><g><title>&lt;async_lock::once_cell::State as core::convert::From&lt;usize&gt;&gt;::from (2 samples, 1.38%)</title><rect x="38.6207%" y="197" width="1.3793%" height="15" fill="rgb(232,182,51)" fg:x="56" fg:w="2"/><text x="38.8707%" y="207.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::drop_waker (1 samples, 0.69%)</title><rect x="40.0000%" y="213" width="0.6897%" height="15" fill="rgb(231,60,39)" fg:x="58" fg:w="1"/><text x="40.2500%" y="223.50"></text></g><g><title>[unknown] (10 samples, 6.90%)</title><rect x="42.0690%" y="181" width="6.8966%" height="15" fill="rgb(208,69,12)" fg:x="61" fg:w="10"/><text x="42.3190%" y="191.50">[unknown]</text></g><g><title>[unknown] (5 samples, 3.45%)</title><rect x="45.5172%" y="165" width="3.4483%" height="15" fill="rgb(235,93,37)" fg:x="66" fg:w="5"/><text x="45.7672%" y="175.50">[un..</text></g><g><title>[unknown] (4 samples, 2.76%)</title><rect x="46.2069%" y="149" width="2.7586%" height="15" fill="rgb(213,116,39)" fg:x="67" fg:w="4"/><text x="46.4569%" y="159.50">[u..</text></g><g><title>[unknown] (4 samples, 2.76%)</title><rect x="46.2069%" y="133" width="2.7586%" height="15" fill="rgb(222,207,29)" fg:x="67" fg:w="4"/><text x="46.4569%" y="143.50">[u..</text></g><g><title>[unknown] (2 samples, 1.38%)</title><rect x="47.5862%" y="117" width="1.3793%" height="15" fill="rgb(206,96,30)" fg:x="69" fg:w="2"/><text x="47.8362%" y="127.50"></text></g><g><title>_int_malloc (13 samples, 8.97%)</title><rect x="40.6897%" y="197" width="8.9655%" height="15" fill="rgb(218,138,4)" fg:x="59" fg:w="13"/><text x="40.9397%" y="207.50">_int_malloc</text></g><g><title>sysmalloc (1 samples, 0.69%)</title><rect x="48.9655%" y="181" width="0.6897%" height="15" fill="rgb(250,191,14)" fg:x="71" fg:w="1"/><text x="49.2155%" y="191.50"></text></g><g><title>__default_morecore@GLIBC_2.2.5 (1 samples, 0.69%)</title><rect x="48.9655%" y="165" width="0.6897%" height="15" fill="rgb(239,60,40)" fg:x="71" fg:w="1"/><text x="49.2155%" y="175.50"></text></g><g><title>__sbrk (1 samples, 0.69%)</title><rect x="48.9655%" y="149" width="0.6897%" height="15" fill="rgb(206,27,48)" fg:x="71" fg:w="1"/><text x="49.2155%" y="159.50"></text></g><g><title>__brk (1 samples, 0.69%)</title><rect x="48.9655%" y="133" width="0.6897%" height="15" fill="rgb(225,35,8)" fg:x="71" fg:w="1"/><text x="49.2155%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="48.9655%" y="117" width="0.6897%" height="15" fill="rgb(250,213,24)" fg:x="71" fg:w="1"/><text x="49.2155%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="48.9655%" y="101" width="0.6897%" height="15" fill="rgb(247,123,22)" fg:x="71" fg:w="1"/><text x="49.2155%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="48.9655%" y="85" width="0.6897%" height="15" fill="rgb(231,138,38)" fg:x="71" fg:w="1"/><text x="49.2155%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="48.9655%" y="69" width="0.6897%" height="15" fill="rgb(231,145,46)" fg:x="71" fg:w="1"/><text x="49.2155%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="48.9655%" y="53" width="0.6897%" height="15" fill="rgb(251,118,11)" fg:x="71" fg:w="1"/><text x="49.2155%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="48.9655%" y="37" width="0.6897%" height="15" fill="rgb(217,147,25)" fg:x="71" fg:w="1"/><text x="49.2155%" y="47.50"></text></g><g><title>malloc (14 samples, 9.66%)</title><rect x="40.6897%" y="213" width="9.6552%" height="15" fill="rgb(247,81,37)" fg:x="59" fg:w="14"/><text x="40.9397%" y="223.50">malloc</text></g><g><title>sysmalloc (1 samples, 0.69%)</title><rect x="49.6552%" y="197" width="0.6897%" height="15" fill="rgb(209,12,38)" fg:x="72" fg:w="1"/><text x="49.9052%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="49.6552%" y="181" width="0.6897%" height="15" fill="rgb(227,1,9)" fg:x="72" fg:w="1"/><text x="49.9052%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="49.6552%" y="165" width="0.6897%" height="15" fill="rgb(248,47,43)" fg:x="72" fg:w="1"/><text x="49.9052%" y="175.50"></text></g><g><title>async_executor::Executor::spawn (62 samples, 42.76%)</title><rect x="8.9655%" y="229" width="42.7586%" height="15" fill="rgb(221,10,30)" fg:x="13" fg:w="62"/><text x="9.2155%" y="239.50">async_executor::Executor::spawn</text></g><g><title>slab::VacantEntry&lt;T&gt;::insert (2 samples, 1.38%)</title><rect x="50.3448%" y="213" width="1.3793%" height="15" fill="rgb(210,229,1)" fg:x="73" fg:w="2"/><text x="50.5948%" y="223.50"></text></g><g><title>[unknown] (2 samples, 1.38%)</title><rect x="50.3448%" y="197" width="1.3793%" height="15" fill="rgb(222,148,37)" fg:x="73" fg:w="2"/><text x="50.5948%" y="207.50"></text></g><g><title>[unknown] (2 samples, 1.38%)</title><rect x="50.3448%" y="181" width="1.3793%" height="15" fill="rgb(234,67,33)" fg:x="73" fg:w="2"/><text x="50.5948%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="51.0345%" y="165" width="0.6897%" height="15" fill="rgb(247,98,35)" fg:x="74" fg:w="1"/><text x="51.2845%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="51.0345%" y="149" width="0.6897%" height="15" fill="rgb(247,138,52)" fg:x="74" fg:w="1"/><text x="51.2845%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="51.0345%" y="133" width="0.6897%" height="15" fill="rgb(213,79,30)" fg:x="74" fg:w="1"/><text x="51.2845%" y="143.50"></text></g><g><title>&lt;async_executor::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.69%)</title><rect x="71.0345%" y="181" width="0.6897%" height="15" fill="rgb(246,177,23)" fg:x="103" fg:w="1"/><text x="71.2845%" y="191.50"></text></g><g><title>hypot (14 samples, 9.66%)</title><rect x="71.7241%" y="181" width="9.6552%" height="15" fill="rgb(230,62,27)" fg:x="104" fg:w="14"/><text x="71.9741%" y="191.50">hypot</text></g><g><title>_ZN10async_task3raw28RawTask$LT$F$C$T$C$S$C$M$GT$3run17h03fbcacded788130E.llvm.15707610339334854943 (45 samples, 31.03%)</title><rect x="57.2414%" y="213" width="31.0345%" height="15" fill="rgb(216,154,8)" fg:x="83" fg:w="45"/><text x="57.4914%" y="223.50">_ZN10async_task3raw28RawTask$LT$F$C$T$C$S$C$M$GT$3..</text></g><g><title>std::panicking::try (41 samples, 28.28%)</title><rect x="60.0000%" y="197" width="28.2759%" height="15" fill="rgb(244,35,45)" fg:x="87" fg:w="41"/><text x="60.2500%" y="207.50">std::panicking::try</text></g><g><title>pow (10 samples, 6.90%)</title><rect x="81.3793%" y="181" width="6.8966%" height="15" fill="rgb(251,115,12)" fg:x="118" fg:w="10"/><text x="81.6293%" y="191.50">pow</text></g><g><title>[libm.so.6] (7 samples, 4.83%)</title><rect x="83.4483%" y="165" width="4.8276%" height="15" fill="rgb(240,54,50)" fg:x="121" fg:w="7"/><text x="83.6983%" y="175.50">[libm...</text></g><g><title>async_executor::Ticker::wake (1 samples, 0.69%)</title><rect x="88.2759%" y="213" width="0.6897%" height="15" fill="rgb(233,84,52)" fg:x="128" fg:w="1"/><text x="88.5259%" y="223.50"></text></g><g><title>futures_lite::future::block_on (57 samples, 39.31%)</title><rect x="51.7241%" y="229" width="39.3103%" height="15" fill="rgb(207,117,47)" fg:x="75" fg:w="57"/><text x="51.9741%" y="239.50">futures_lite::future::block_on</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (3 samples, 2.07%)</title><rect x="88.9655%" y="213" width="2.0690%" height="15" fill="rgb(249,43,39)" fg:x="129" fg:w="3"/><text x="89.2155%" y="223.50">c..</text></g><g><title>deflate::writer::ZlibEncoder&lt;W&gt;::finish (1 samples, 0.69%)</title><rect x="91.0345%" y="149" width="0.6897%" height="15" fill="rgb(209,38,44)" fg:x="132" fg:w="1"/><text x="91.2845%" y="159.50"></text></g><g><title>deflate::writer::ZlibEncoder&lt;W&gt;::output_all (1 samples, 0.69%)</title><rect x="91.0345%" y="133" width="0.6897%" height="15" fill="rgb(236,212,23)" fg:x="132" fg:w="1"/><text x="91.2845%" y="143.50"></text></g><g><title>deflate::compress::compress_data_dynamic_n (1 samples, 0.69%)</title><rect x="91.0345%" y="117" width="0.6897%" height="15" fill="rgb(242,79,21)" fg:x="132" fg:w="1"/><text x="91.2845%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.69%)</title><rect x="91.0345%" y="101" width="0.6897%" height="15" fill="rgb(211,96,35)" fg:x="132" fg:w="1"/><text x="91.2845%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="91.0345%" y="85" width="0.6897%" height="15" fill="rgb(253,215,40)" fg:x="132" fg:w="1"/><text x="91.2845%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="91.0345%" y="69" width="0.6897%" height="15" fill="rgb(211,81,21)" fg:x="132" fg:w="1"/><text x="91.2845%" y="79.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (134 samples, 92.41%)</title><rect x="2.7586%" y="341" width="92.4138%" height="15" fill="rgb(208,190,38)" fg:x="4" fg:w="134"/><text x="3.0086%" y="351.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (134 samples, 92.41%)</title><rect x="2.7586%" y="325" width="92.4138%" height="15" fill="rgb(235,213,38)" fg:x="4" fg:w="134"/><text x="3.0086%" y="335.50">__libc_start_call_main</text></g><g><title>main (134 samples, 92.41%)</title><rect x="2.7586%" y="309" width="92.4138%" height="15" fill="rgb(237,122,38)" fg:x="4" fg:w="134"/><text x="3.0086%" y="319.50">main</text></g><g><title>std::rt::lang_start_internal (134 samples, 92.41%)</title><rect x="2.7586%" y="293" width="92.4138%" height="15" fill="rgb(244,218,35)" fg:x="4" fg:w="134"/><text x="3.0086%" y="303.50">std::rt::lang_start_internal</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h58e55e6f7aba6551E.llvm.6594527953146834923 (134 samples, 92.41%)</title><rect x="2.7586%" y="277" width="92.4138%" height="15" fill="rgb(240,68,47)" fg:x="4" fg:w="134"/><text x="3.0086%" y="287.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h58e55e6f7aba6551E.llvm.6594527953146834923</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (134 samples, 92.41%)</title><rect x="2.7586%" y="261" width="92.4138%" height="15" fill="rgb(210,16,53)" fg:x="4" fg:w="134"/><text x="3.0086%" y="271.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>julia::main (134 samples, 92.41%)</title><rect x="2.7586%" y="245" width="92.4138%" height="15" fill="rgb(235,124,12)" fg:x="4" fg:w="134"/><text x="3.0086%" y="255.50">julia::main</text></g><g><title>image::io::free_functions::save_buffer_impl (6 samples, 4.14%)</title><rect x="91.0345%" y="229" width="4.1379%" height="15" fill="rgb(224,169,11)" fg:x="132" fg:w="6"/><text x="91.2845%" y="239.50">image..</text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (6 samples, 4.14%)</title><rect x="91.0345%" y="213" width="4.1379%" height="15" fill="rgb(250,166,2)" fg:x="132" fg:w="6"/><text x="91.2845%" y="223.50">image..</text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (6 samples, 4.14%)</title><rect x="91.0345%" y="197" width="4.1379%" height="15" fill="rgb(242,216,29)" fg:x="132" fg:w="6"/><text x="91.2845%" y="207.50">&lt;imag..</text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode (6 samples, 4.14%)</title><rect x="91.0345%" y="181" width="4.1379%" height="15" fill="rgb(230,116,27)" fg:x="132" fg:w="6"/><text x="91.2845%" y="191.50">image..</text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (6 samples, 4.14%)</title><rect x="91.0345%" y="165" width="4.1379%" height="15" fill="rgb(228,99,48)" fg:x="132" fg:w="6"/><text x="91.2845%" y="175.50">png::..</text></g><g><title>std::io::Write::write_all (5 samples, 3.45%)</title><rect x="91.7241%" y="149" width="3.4483%" height="15" fill="rgb(253,11,6)" fg:x="133" fg:w="5"/><text x="91.9741%" y="159.50">std..</text></g><g><title>deflate::compress::compress_data_dynamic_n (5 samples, 3.45%)</title><rect x="91.7241%" y="133" width="3.4483%" height="15" fill="rgb(247,143,39)" fg:x="133" fg:w="5"/><text x="91.9741%" y="143.50">def..</text></g><g><title>deflate::lz77::lz77_compress_block (5 samples, 3.45%)</title><rect x="91.7241%" y="117" width="3.4483%" height="15" fill="rgb(236,97,10)" fg:x="133" fg:w="5"/><text x="91.9741%" y="127.50">def..</text></g><g><title>deflate::matching::longest_match (1 samples, 0.69%)</title><rect x="94.4828%" y="101" width="0.6897%" height="15" fill="rgb(233,208,19)" fg:x="137" fg:w="1"/><text x="94.7328%" y="111.50"></text></g><g><title>[unknown] (2 samples, 1.38%)</title><rect x="95.1724%" y="325" width="1.3793%" height="15" fill="rgb(216,164,2)" fg:x="138" fg:w="2"/><text x="95.4224%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="95.8621%" y="309" width="0.6897%" height="15" fill="rgb(220,129,5)" fg:x="139" fg:w="1"/><text x="96.1121%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="95.8621%" y="293" width="0.6897%" height="15" fill="rgb(242,17,10)" fg:x="139" fg:w="1"/><text x="96.1121%" y="303.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.69%)</title><rect x="96.5517%" y="293" width="0.6897%" height="15" fill="rgb(242,107,0)" fg:x="140" fg:w="1"/><text x="96.8017%" y="303.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.69%)</title><rect x="97.2414%" y="277" width="0.6897%" height="15" fill="rgb(251,28,31)" fg:x="141" fg:w="1"/><text x="97.4914%" y="287.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.69%)</title><rect x="97.2414%" y="261" width="0.6897%" height="15" fill="rgb(233,223,10)" fg:x="141" fg:w="1"/><text x="97.4914%" y="271.50"></text></g><g><title>openaux (1 samples, 0.69%)</title><rect x="97.2414%" y="245" width="0.6897%" height="15" fill="rgb(215,21,27)" fg:x="141" fg:w="1"/><text x="97.4914%" y="255.50"></text></g><g><title>_dl_map_object (1 samples, 0.69%)</title><rect x="97.2414%" y="229" width="0.6897%" height="15" fill="rgb(232,23,21)" fg:x="141" fg:w="1"/><text x="97.4914%" y="239.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.69%)</title><rect x="97.2414%" y="213" width="0.6897%" height="15" fill="rgb(244,5,23)" fg:x="141" fg:w="1"/><text x="97.4914%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.69%)</title><rect x="97.2414%" y="197" width="0.6897%" height="15" fill="rgb(226,81,46)" fg:x="141" fg:w="1"/><text x="97.4914%" y="207.50"></text></g><g><title>_dl_start_final (3 samples, 2.07%)</title><rect x="96.5517%" y="325" width="2.0690%" height="15" fill="rgb(247,70,30)" fg:x="140" fg:w="3"/><text x="96.8017%" y="335.50">_..</text></g><g><title>_dl_sysdep_start (3 samples, 2.07%)</title><rect x="96.5517%" y="309" width="2.0690%" height="15" fill="rgb(212,68,19)" fg:x="140" fg:w="3"/><text x="96.8017%" y="319.50">_..</text></g><g><title>dl_main (2 samples, 1.38%)</title><rect x="97.2414%" y="293" width="1.3793%" height="15" fill="rgb(240,187,13)" fg:x="141" fg:w="2"/><text x="97.4914%" y="303.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.69%)</title><rect x="97.9310%" y="277" width="0.6897%" height="15" fill="rgb(223,113,26)" fg:x="142" fg:w="1"/><text x="98.1810%" y="287.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.69%)</title><rect x="97.9310%" y="261" width="0.6897%" height="15" fill="rgb(206,192,2)" fg:x="142" fg:w="1"/><text x="98.1810%" y="271.50"></text></g><g><title>all (145 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="145"/><text x="0.2500%" y="399.50"></text></g><g><title>julia (145 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="145"/><text x="0.2500%" y="383.50">julia</text></g><g><title>_start (143 samples, 98.62%)</title><rect x="1.3793%" y="357" width="98.6207%" height="15" fill="rgb(224,114,35)" fg:x="2" fg:w="143"/><text x="1.6293%" y="367.50">_start</text></g><g><title>_dl_start (7 samples, 4.83%)</title><rect x="95.1724%" y="341" width="4.8276%" height="15" fill="rgb(245,159,27)" fg:x="138" fg:w="7"/><text x="95.4224%" y="351.50">_dl_st..</text></g><g><title>elf_get_dynamic_info (2 samples, 1.38%)</title><rect x="98.6207%" y="325" width="1.3793%" height="15" fill="rgb(245,172,44)" fg:x="143" fg:w="2"/><text x="98.8707%" y="335.50"></text></g></svg></svg>