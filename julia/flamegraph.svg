<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="450"><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="1.7778%" y="437" width="0.2222%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="1"/><text x="2.0278%" y="447.50"></text></g><g><title>syscall (1 samples, 0.22%)</title><rect x="1.7778%" y="421" width="0.2222%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="1"/><text x="2.0278%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="1.7778%" y="405" width="0.2222%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="1"/><text x="2.0278%" y="415.50"></text></g><g><title>[unknown] (11 samples, 2.44%)</title><rect x="0.0000%" y="453" width="2.4444%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="11"/><text x="0.2500%" y="463.50">[u..</text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="2.0000%" y="437" width="0.4444%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="2"/><text x="2.2500%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="2.4444%" y="437" width="0.4444%" height="15" fill="rgb(232,128,0)" fg:x="11" fg:w="2"/><text x="2.6944%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="2.4444%" y="421" width="0.4444%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="2"/><text x="2.6944%" y="431.50"></text></g><g><title>png::filter::filter (1 samples, 0.22%)</title><rect x="2.8889%" y="245" width="0.2222%" height="15" fill="rgb(228,23,34)" fg:x="13" fg:w="1"/><text x="3.1389%" y="255.50"></text></g><g><title>image::io::free_functions::save_buffer_impl (3 samples, 0.67%)</title><rect x="2.8889%" y="325" width="0.6667%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="3"/><text x="3.1389%" y="335.50"></text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (3 samples, 0.67%)</title><rect x="2.8889%" y="309" width="0.6667%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="3"/><text x="3.1389%" y="319.50"></text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (3 samples, 0.67%)</title><rect x="2.8889%" y="293" width="0.6667%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="3"/><text x="3.1389%" y="303.50"></text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode (3 samples, 0.67%)</title><rect x="2.8889%" y="277" width="0.6667%" height="15" fill="rgb(240,193,28)" fg:x="13" fg:w="3"/><text x="3.1389%" y="287.50"></text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (3 samples, 0.67%)</title><rect x="2.8889%" y="261" width="0.6667%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="3"/><text x="3.1389%" y="271.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.44%)</title><rect x="3.1111%" y="245" width="0.4444%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="2"/><text x="3.3611%" y="255.50"></text></g><g><title>deflate::compress::compress_data_dynamic_n (2 samples, 0.44%)</title><rect x="3.1111%" y="229" width="0.4444%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="2"/><text x="3.3611%" y="239.50"></text></g><g><title>deflate::lz77::lz77_compress_block (2 samples, 0.44%)</title><rect x="3.1111%" y="213" width="0.4444%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="2"/><text x="3.3611%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 1.56%)</title><rect x="4.6667%" y="293" width="1.5556%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="7"/><text x="4.9167%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7 samples, 1.56%)</title><rect x="4.6667%" y="277" width="1.5556%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="7"/><text x="4.9167%" y="287.50"></text></g><g><title>_int_free (7 samples, 1.56%)</title><rect x="4.6667%" y="261" width="1.5556%" height="15" fill="rgb(221,200,47)" fg:x="21" fg:w="7"/><text x="4.9167%" y="271.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (7 samples, 1.56%)</title><rect x="4.6667%" y="245" width="1.5556%" height="15" fill="rgb(226,26,5)" fg:x="21" fg:w="7"/><text x="4.9167%" y="255.50"></text></g><g><title>malloc_consolidate (7 samples, 1.56%)</title><rect x="4.6667%" y="229" width="1.5556%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="7"/><text x="4.9167%" y="239.50"></text></g><g><title>unlink_chunk.isra.0 (5 samples, 1.11%)</title><rect x="5.1111%" y="213" width="1.1111%" height="15" fill="rgb(235,183,28)" fg:x="23" fg:w="5"/><text x="5.3611%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.44%)</title><rect x="6.6667%" y="261" width="0.4444%" height="15" fill="rgb(221,5,38)" fg:x="30" fg:w="2"/><text x="6.9167%" y="271.50"></text></g><g><title>_int_free (1 samples, 0.22%)</title><rect x="6.8889%" y="245" width="0.2222%" height="15" fill="rgb(247,18,42)" fg:x="31" fg:w="1"/><text x="7.1389%" y="255.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.22%)</title><rect x="6.8889%" y="229" width="0.2222%" height="15" fill="rgb(241,131,45)" fg:x="31" fg:w="1"/><text x="7.1389%" y="239.50"></text></g><g><title>std::panicking::try (2 samples, 0.44%)</title><rect x="7.1111%" y="245" width="0.4444%" height="15" fill="rgb(249,31,29)" fg:x="32" fg:w="2"/><text x="7.3611%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (3 samples, 0.67%)</title><rect x="7.1111%" y="261" width="0.6667%" height="15" fill="rgb(225,111,53)" fg:x="32" fg:w="3"/><text x="7.3611%" y="271.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.22%)</title><rect x="7.5556%" y="245" width="0.2222%" height="15" fill="rgb(238,160,17)" fg:x="34" fg:w="1"/><text x="7.8056%" y="255.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 2.44%)</title><rect x="6.2222%" y="277" width="2.4444%" height="15" fill="rgb(214,148,48)" fg:x="28" fg:w="11"/><text x="6.4722%" y="287.50">&lt;f..</text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (4 samples, 0.89%)</title><rect x="7.7778%" y="261" width="0.8889%" height="15" fill="rgb(232,36,49)" fg:x="35" fg:w="4"/><text x="8.0278%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::join_all::JoinAll&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt;&gt; (14 samples, 3.11%)</title><rect x="6.2222%" y="293" width="3.1111%" height="15" fill="rgb(209,103,24)" fg:x="28" fg:w="14"/><text x="6.4722%" y="303.50">cor..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.67%)</title><rect x="8.6667%" y="277" width="0.6667%" height="15" fill="rgb(229,88,8)" fg:x="39" fg:w="3"/><text x="8.9167%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.22%)</title><rect x="9.1111%" y="261" width="0.2222%" height="15" fill="rgb(213,181,19)" fg:x="41" fg:w="1"/><text x="9.3611%" y="271.50"></text></g><g><title>_int_free (1 samples, 0.22%)</title><rect x="9.1111%" y="245" width="0.2222%" height="15" fill="rgb(254,191,54)" fg:x="41" fg:w="1"/><text x="9.3611%" y="255.50"></text></g><g><title>__rust_alloc (1 samples, 0.22%)</title><rect x="10.6667%" y="261" width="0.2222%" height="15" fill="rgb(241,83,37)" fg:x="48" fg:w="1"/><text x="10.9167%" y="271.50"></text></g><g><title>futures_util::future::join_all::join_all (9 samples, 2.00%)</title><rect x="9.3333%" y="293" width="2.0000%" height="15" fill="rgb(233,36,39)" fg:x="42" fg:w="9"/><text x="9.5833%" y="303.50">f..</text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (6 samples, 1.33%)</title><rect x="10.0000%" y="277" width="1.3333%" height="15" fill="rgb(226,3,54)" fg:x="45" fg:w="6"/><text x="10.2500%" y="287.50"></text></g><g><title>malloc (2 samples, 0.44%)</title><rect x="10.8889%" y="261" width="0.4444%" height="15" fill="rgb(245,192,40)" fg:x="49" fg:w="2"/><text x="11.1389%" y="271.50"></text></g><g><title>_int_malloc (2 samples, 0.44%)</title><rect x="10.8889%" y="245" width="0.4444%" height="15" fill="rgb(238,167,29)" fg:x="49" fg:w="2"/><text x="11.1389%" y="255.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.44%)</title><rect x="14.8889%" y="213" width="0.4444%" height="15" fill="rgb(232,182,51)" fg:x="67" fg:w="2"/><text x="15.1389%" y="223.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (2 samples, 0.44%)</title><rect x="15.3333%" y="213" width="0.4444%" height="15" fill="rgb(231,60,39)" fg:x="69" fg:w="2"/><text x="15.5833%" y="223.50"></text></g><g><title>_int_free_merge_chunk (3 samples, 0.67%)</title><rect x="15.7778%" y="213" width="0.6667%" height="15" fill="rgb(208,69,12)" fg:x="71" fg:w="3"/><text x="16.0278%" y="223.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.44%)</title><rect x="16.0000%" y="197" width="0.4444%" height="15" fill="rgb(235,93,37)" fg:x="72" fg:w="2"/><text x="16.2500%" y="207.50"></text></g><g><title>__rdl_alloc (35 samples, 7.78%)</title><rect x="14.2222%" y="277" width="7.7778%" height="15" fill="rgb(213,116,39)" fg:x="64" fg:w="35"/><text x="14.4722%" y="287.50">__rdl_alloc</text></g><g><title>__posix_memalign (34 samples, 7.56%)</title><rect x="14.4444%" y="261" width="7.5556%" height="15" fill="rgb(222,207,29)" fg:x="65" fg:w="34"/><text x="14.6944%" y="271.50">__posix_me..</text></g><g><title>_mid_memalign.isra.0 (34 samples, 7.56%)</title><rect x="14.4444%" y="245" width="7.5556%" height="15" fill="rgb(206,96,30)" fg:x="65" fg:w="34"/><text x="14.6944%" y="255.50">_mid_memal..</text></g><g><title>_int_memalign (33 samples, 7.33%)</title><rect x="14.6667%" y="229" width="7.3333%" height="15" fill="rgb(218,138,4)" fg:x="66" fg:w="33"/><text x="14.9167%" y="239.50">_int_memal..</text></g><g><title>_int_malloc (25 samples, 5.56%)</title><rect x="16.4444%" y="213" width="5.5556%" height="15" fill="rgb(250,191,14)" fg:x="74" fg:w="25"/><text x="16.6944%" y="223.50">_int_ma..</text></g><g><title>[unknown] (18 samples, 4.00%)</title><rect x="18.0000%" y="197" width="4.0000%" height="15" fill="rgb(239,60,40)" fg:x="81" fg:w="18"/><text x="18.2500%" y="207.50">[unk..</text></g><g><title>[unknown] (14 samples, 3.11%)</title><rect x="18.8889%" y="181" width="3.1111%" height="15" fill="rgb(206,27,48)" fg:x="85" fg:w="14"/><text x="19.1389%" y="191.50">[un..</text></g><g><title>[unknown] (14 samples, 3.11%)</title><rect x="18.8889%" y="165" width="3.1111%" height="15" fill="rgb(225,35,8)" fg:x="85" fg:w="14"/><text x="19.1389%" y="175.50">[un..</text></g><g><title>[unknown] (12 samples, 2.67%)</title><rect x="19.3333%" y="149" width="2.6667%" height="15" fill="rgb(250,213,24)" fg:x="87" fg:w="12"/><text x="19.5833%" y="159.50">[u..</text></g><g><title>[unknown] (8 samples, 1.78%)</title><rect x="20.2222%" y="133" width="1.7778%" height="15" fill="rgb(247,123,22)" fg:x="91" fg:w="8"/><text x="20.4722%" y="143.50">[..</text></g><g><title>[unknown] (4 samples, 0.89%)</title><rect x="21.1111%" y="117" width="0.8889%" height="15" fill="rgb(231,138,38)" fg:x="95" fg:w="4"/><text x="21.3611%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="21.5556%" y="101" width="0.4444%" height="15" fill="rgb(231,145,46)" fg:x="97" fg:w="2"/><text x="21.8056%" y="111.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.22%)</title><rect x="23.3333%" y="245" width="0.2222%" height="15" fill="rgb(251,118,11)" fg:x="105" fg:w="1"/><text x="23.5833%" y="255.50"></text></g><g><title>syscall (1 samples, 0.22%)</title><rect x="23.3333%" y="229" width="0.2222%" height="15" fill="rgb(217,147,25)" fg:x="105" fg:w="1"/><text x="23.5833%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="23.3333%" y="213" width="0.2222%" height="15" fill="rgb(247,81,37)" fg:x="105" fg:w="1"/><text x="23.5833%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="23.3333%" y="197" width="0.2222%" height="15" fill="rgb(209,12,38)" fg:x="105" fg:w="1"/><text x="23.5833%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="23.3333%" y="181" width="0.2222%" height="15" fill="rgb(227,1,9)" fg:x="105" fg:w="1"/><text x="23.5833%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="23.3333%" y="165" width="0.2222%" height="15" fill="rgb(248,47,43)" fg:x="105" fg:w="1"/><text x="23.5833%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="23.3333%" y="149" width="0.2222%" height="15" fill="rgb(221,10,30)" fg:x="105" fg:w="1"/><text x="23.5833%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="23.3333%" y="133" width="0.2222%" height="15" fill="rgb(210,229,1)" fg:x="105" fg:w="1"/><text x="23.5833%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="23.3333%" y="117" width="0.2222%" height="15" fill="rgb(222,148,37)" fg:x="105" fg:w="1"/><text x="23.5833%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="23.3333%" y="101" width="0.2222%" height="15" fill="rgb(234,67,33)" fg:x="105" fg:w="1"/><text x="23.5833%" y="111.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (13 samples, 2.89%)</title><rect x="23.5556%" y="245" width="2.8889%" height="15" fill="rgb(247,98,35)" fg:x="106" fg:w="13"/><text x="23.8056%" y="255.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (12 samples, 2.67%)</title><rect x="23.7778%" y="229" width="2.6667%" height="15" fill="rgb(247,138,52)" fg:x="107" fg:w="12"/><text x="24.0278%" y="239.50">to..</text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (2 samples, 0.44%)</title><rect x="26.0000%" y="213" width="0.4444%" height="15" fill="rgb(213,79,30)" fg:x="117" fg:w="2"/><text x="26.2500%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_option_task_without_yield (24 samples, 5.33%)</title><rect x="22.0000%" y="277" width="5.3333%" height="15" fill="rgb(246,177,23)" fg:x="99" fg:w="24"/><text x="22.2500%" y="287.50">tokio::..</text></g><g><title>tokio::runtime::context::with_scheduler (22 samples, 4.89%)</title><rect x="22.4444%" y="261" width="4.8889%" height="15" fill="rgb(230,62,27)" fg:x="101" fg:w="22"/><text x="22.6944%" y="271.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (4 samples, 0.89%)</title><rect x="26.4444%" y="245" width="0.8889%" height="15" fill="rgb(216,154,8)" fg:x="119" fg:w="4"/><text x="26.6944%" y="255.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (114 samples, 25.33%)</title><rect x="2.8889%" y="437" width="25.3333%" height="15" fill="rgb(244,35,45)" fg:x="13" fg:w="114"/><text x="3.1389%" y="447.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (114 samples, 25.33%)</title><rect x="2.8889%" y="421" width="25.3333%" height="15" fill="rgb(251,115,12)" fg:x="13" fg:w="114"/><text x="3.1389%" y="431.50">__libc_start_call_main</text></g><g><title>main (114 samples, 25.33%)</title><rect x="2.8889%" y="405" width="25.3333%" height="15" fill="rgb(240,54,50)" fg:x="13" fg:w="114"/><text x="3.1389%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (114 samples, 25.33%)</title><rect x="2.8889%" y="389" width="25.3333%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="114"/><text x="3.1389%" y="399.50">std::rt::lang_start_internal</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h37453168de3091a6E.llvm.14931542924417414044 (114 samples, 25.33%)</title><rect x="2.8889%" y="373" width="25.3333%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="114"/><text x="3.1389%" y="383.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closu..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (114 samples, 25.33%)</title><rect x="2.8889%" y="357" width="25.3333%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="114"/><text x="3.1389%" y="367.50">std::sys_common::backtrace::__rust_begin..</text></g><g><title>julia::main (114 samples, 25.33%)</title><rect x="2.8889%" y="341" width="25.3333%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="114"/><text x="3.1389%" y="351.50">julia::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (111 samples, 24.67%)</title><rect x="3.5556%" y="325" width="24.6667%" height="15" fill="rgb(236,212,23)" fg:x="16" fg:w="111"/><text x="3.8056%" y="335.50">tokio::runtime::runtime::Runtime::block..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (111 samples, 24.67%)</title><rect x="3.5556%" y="309" width="24.6667%" height="15" fill="rgb(242,79,21)" fg:x="16" fg:w="111"/><text x="3.8056%" y="319.50">tokio::runtime::park::CachedParkThread:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (76 samples, 16.89%)</title><rect x="11.3333%" y="293" width="16.8889%" height="15" fill="rgb(211,96,35)" fg:x="51" fg:w="76"/><text x="11.5833%" y="303.50">tokio::runtime::scheduler:..</text></g><g><title>tokio::util::sharded_list::ShardGuard&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push (4 samples, 0.89%)</title><rect x="27.3333%" y="277" width="0.8889%" height="15" fill="rgb(253,215,40)" fg:x="123" fg:w="4"/><text x="27.5833%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.67%)</title><rect x="28.2222%" y="421" width="0.6667%" height="15" fill="rgb(211,81,21)" fg:x="127" fg:w="3"/><text x="28.4722%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="28.4444%" y="405" width="0.4444%" height="15" fill="rgb(208,190,38)" fg:x="128" fg:w="2"/><text x="28.6944%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="28.6667%" y="389" width="0.2222%" height="15" fill="rgb(235,213,38)" fg:x="129" fg:w="1"/><text x="28.9167%" y="399.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.22%)</title><rect x="28.8889%" y="389" width="0.2222%" height="15" fill="rgb(237,122,38)" fg:x="130" fg:w="1"/><text x="29.1389%" y="399.50"></text></g><g><title>_dl_start_final (2 samples, 0.44%)</title><rect x="28.8889%" y="421" width="0.4444%" height="15" fill="rgb(244,218,35)" fg:x="130" fg:w="2"/><text x="29.1389%" y="431.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.44%)</title><rect x="28.8889%" y="405" width="0.4444%" height="15" fill="rgb(240,68,47)" fg:x="130" fg:w="2"/><text x="29.1389%" y="415.50"></text></g><g><title>dl_main (1 samples, 0.22%)</title><rect x="29.1111%" y="389" width="0.2222%" height="15" fill="rgb(210,16,53)" fg:x="131" fg:w="1"/><text x="29.3611%" y="399.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.22%)</title><rect x="29.1111%" y="373" width="0.2222%" height="15" fill="rgb(235,124,12)" fg:x="131" fg:w="1"/><text x="29.3611%" y="383.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.22%)</title><rect x="29.1111%" y="357" width="0.2222%" height="15" fill="rgb(224,169,11)" fg:x="131" fg:w="1"/><text x="29.3611%" y="367.50"></text></g><g><title>do_lookup_x (1 samples, 0.22%)</title><rect x="29.1111%" y="341" width="0.2222%" height="15" fill="rgb(250,166,2)" fg:x="131" fg:w="1"/><text x="29.3611%" y="351.50"></text></g><g><title>_start (122 samples, 27.11%)</title><rect x="2.4444%" y="453" width="27.1111%" height="15" fill="rgb(242,216,29)" fg:x="11" fg:w="122"/><text x="2.6944%" y="463.50">_start</text></g><g><title>_dl_start (6 samples, 1.33%)</title><rect x="28.2222%" y="437" width="1.3333%" height="15" fill="rgb(230,116,27)" fg:x="127" fg:w="6"/><text x="28.4722%" y="447.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.22%)</title><rect x="29.3333%" y="421" width="0.2222%" height="15" fill="rgb(228,99,48)" fg:x="132" fg:w="1"/><text x="29.5833%" y="431.50"></text></g><g><title>[unknown] (22 samples, 4.89%)</title><rect x="29.7778%" y="421" width="4.8889%" height="15" fill="rgb(253,11,6)" fg:x="134" fg:w="22"/><text x="30.0278%" y="431.50">[unkno..</text></g><g><title>[unknown] (21 samples, 4.67%)</title><rect x="30.0000%" y="405" width="4.6667%" height="15" fill="rgb(247,143,39)" fg:x="135" fg:w="21"/><text x="30.2500%" y="415.50">[unkn..</text></g><g><title>[unknown] (14 samples, 3.11%)</title><rect x="31.5556%" y="389" width="3.1111%" height="15" fill="rgb(236,97,10)" fg:x="142" fg:w="14"/><text x="31.8056%" y="399.50">[un..</text></g><g><title>[unknown] (13 samples, 2.89%)</title><rect x="31.7778%" y="373" width="2.8889%" height="15" fill="rgb(233,208,19)" fg:x="143" fg:w="13"/><text x="32.0278%" y="383.50">[u..</text></g><g><title>[unknown] (5 samples, 1.11%)</title><rect x="33.5556%" y="357" width="1.1111%" height="15" fill="rgb(216,164,2)" fg:x="151" fg:w="5"/><text x="33.8056%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="34.2222%" y="341" width="0.4444%" height="15" fill="rgb(220,129,5)" fg:x="154" fg:w="2"/><text x="34.4722%" y="351.50"></text></g><g><title>__ctype_init (1 samples, 0.22%)</title><rect x="34.6667%" y="421" width="0.2222%" height="15" fill="rgb(242,17,10)" fg:x="156" fg:w="1"/><text x="34.9167%" y="431.50"></text></g><g><title>__sigsetjmp (1 samples, 0.22%)</title><rect x="34.8889%" y="421" width="0.2222%" height="15" fill="rgb(242,107,0)" fg:x="157" fg:w="1"/><text x="35.1389%" y="431.50"></text></g><g><title>_setjmp (6 samples, 1.33%)</title><rect x="35.1111%" y="421" width="1.3333%" height="15" fill="rgb(251,28,31)" fg:x="158" fg:w="6"/><text x="35.3611%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="36.2222%" y="405" width="0.2222%" height="15" fill="rgb(233,223,10)" fg:x="163" fg:w="1"/><text x="36.4722%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="36.2222%" y="389" width="0.2222%" height="15" fill="rgb(215,21,27)" fg:x="163" fg:w="1"/><text x="36.4722%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="36.2222%" y="373" width="0.2222%" height="15" fill="rgb(232,23,21)" fg:x="163" fg:w="1"/><text x="36.4722%" y="383.50"></text></g><g><title>__mmap (2 samples, 0.44%)</title><rect x="36.4444%" y="389" width="0.4444%" height="15" fill="rgb(244,5,23)" fg:x="164" fg:w="2"/><text x="36.6944%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="36.4444%" y="373" width="0.4444%" height="15" fill="rgb(226,81,46)" fg:x="164" fg:w="2"/><text x="36.6944%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="36.4444%" y="357" width="0.4444%" height="15" fill="rgb(247,70,30)" fg:x="164" fg:w="2"/><text x="36.6944%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="36.4444%" y="341" width="0.4444%" height="15" fill="rgb(212,68,19)" fg:x="164" fg:w="2"/><text x="36.6944%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="36.4444%" y="325" width="0.4444%" height="15" fill="rgb(240,187,13)" fg:x="164" fg:w="2"/><text x="36.6944%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="36.6667%" y="309" width="0.2222%" height="15" fill="rgb(223,113,26)" fg:x="165" fg:w="1"/><text x="36.9167%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="36.6667%" y="293" width="0.2222%" height="15" fill="rgb(206,192,2)" fg:x="165" fg:w="1"/><text x="36.9167%" y="303.50"></text></g><g><title>malloc (8 samples, 1.78%)</title><rect x="36.8889%" y="373" width="1.7778%" height="15" fill="rgb(241,108,4)" fg:x="166" fg:w="8"/><text x="37.1389%" y="383.50">m..</text></g><g><title>tcache_init.part.0 (8 samples, 1.78%)</title><rect x="36.8889%" y="357" width="1.7778%" height="15" fill="rgb(247,173,49)" fg:x="166" fg:w="8"/><text x="37.1389%" y="367.50">t..</text></g><g><title>arena_get2.part.0 (8 samples, 1.78%)</title><rect x="36.8889%" y="341" width="1.7778%" height="15" fill="rgb(224,114,35)" fg:x="166" fg:w="8"/><text x="37.1389%" y="351.50">a..</text></g><g><title>alloc_new_heap (7 samples, 1.56%)</title><rect x="37.1111%" y="325" width="1.5556%" height="15" fill="rgb(245,159,27)" fg:x="167" fg:w="7"/><text x="37.3611%" y="335.50"></text></g><g><title>__mmap (6 samples, 1.33%)</title><rect x="37.3333%" y="309" width="1.3333%" height="15" fill="rgb(245,172,44)" fg:x="168" fg:w="6"/><text x="37.5833%" y="319.50"></text></g><g><title>[unknown] (5 samples, 1.11%)</title><rect x="37.5556%" y="293" width="1.1111%" height="15" fill="rgb(236,23,11)" fg:x="169" fg:w="5"/><text x="37.8056%" y="303.50"></text></g><g><title>[unknown] (5 samples, 1.11%)</title><rect x="37.5556%" y="277" width="1.1111%" height="15" fill="rgb(205,117,38)" fg:x="169" fg:w="5"/><text x="37.8056%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.89%)</title><rect x="37.7778%" y="261" width="0.8889%" height="15" fill="rgb(237,72,25)" fg:x="170" fg:w="4"/><text x="38.0278%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="38.2222%" y="245" width="0.4444%" height="15" fill="rgb(244,70,9)" fg:x="172" fg:w="2"/><text x="38.4722%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="38.4444%" y="229" width="0.2222%" height="15" fill="rgb(217,125,39)" fg:x="173" fg:w="1"/><text x="38.6944%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="38.4444%" y="213" width="0.2222%" height="15" fill="rgb(235,36,10)" fg:x="173" fg:w="1"/><text x="38.6944%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="39.5556%" y="357" width="0.2222%" height="15" fill="rgb(251,123,47)" fg:x="178" fg:w="1"/><text x="39.8056%" y="367.50"></text></g><g><title>pthread_attr_init@@GLIBC_2.2.5 (6 samples, 1.33%)</title><rect x="38.6667%" y="373" width="1.3333%" height="15" fill="rgb(221,13,13)" fg:x="174" fg:w="6"/><text x="38.9167%" y="383.50"></text></g><g><title>__getpagesize (1 samples, 0.22%)</title><rect x="39.7778%" y="357" width="0.2222%" height="15" fill="rgb(238,131,9)" fg:x="179" fg:w="1"/><text x="40.0278%" y="367.50"></text></g><g><title>pthread_getaffinity_np@GLIBC_2.3.4 (1 samples, 0.22%)</title><rect x="40.0000%" y="373" width="0.2222%" height="15" fill="rgb(211,50,8)" fg:x="180" fg:w="1"/><text x="40.2500%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="40.0000%" y="357" width="0.2222%" height="15" fill="rgb(245,182,24)" fg:x="180" fg:w="1"/><text x="40.2500%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="40.0000%" y="341" width="0.2222%" height="15" fill="rgb(242,14,37)" fg:x="180" fg:w="1"/><text x="40.2500%" y="351.50"></text></g><g><title>julia (182 samples, 40.44%)</title><rect x="0.0000%" y="469" width="40.4444%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="182"/><text x="0.2500%" y="479.50">julia</text></g><g><title>clone3 (49 samples, 10.89%)</title><rect x="29.5556%" y="453" width="10.8889%" height="15" fill="rgb(213,55,15)" fg:x="133" fg:w="49"/><text x="29.8056%" y="463.50">clone3</text></g><g><title>start_thread (49 samples, 10.89%)</title><rect x="29.5556%" y="437" width="10.8889%" height="15" fill="rgb(209,9,3)" fg:x="133" fg:w="49"/><text x="29.8056%" y="447.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (18 samples, 4.00%)</title><rect x="36.4444%" y="421" width="4.0000%" height="15" fill="rgb(230,59,30)" fg:x="164" fg:w="18"/><text x="36.6944%" y="431.50">std:..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (18 samples, 4.00%)</title><rect x="36.4444%" y="405" width="4.0000%" height="15" fill="rgb(209,121,21)" fg:x="164" fg:w="18"/><text x="36.6944%" y="415.50">std:..</text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (16 samples, 3.56%)</title><rect x="36.8889%" y="389" width="3.5556%" height="15" fill="rgb(220,109,13)" fg:x="166" fg:w="16"/><text x="37.1389%" y="399.50">pthr..</text></g><g><title>realloc (1 samples, 0.22%)</title><rect x="40.2222%" y="373" width="0.2222%" height="15" fill="rgb(232,18,1)" fg:x="181" fg:w="1"/><text x="40.4722%" y="383.50"></text></g><g><title>__getauxval (1 samples, 0.22%)</title><rect x="40.4444%" y="405" width="0.2222%" height="15" fill="rgb(215,41,42)" fg:x="182" fg:w="1"/><text x="40.6944%" y="415.50"></text></g><g><title>_ZN5julia21generate_image_buffer28_$u7b$$u7b$closure$u7d$$u7d$17hadb3a434a24a696cE.llvm.9271599073020077471 (1 samples, 0.22%)</title><rect x="40.6667%" y="357" width="0.2222%" height="15" fill="rgb(224,123,36)" fg:x="183" fg:w="1"/><text x="40.9167%" y="367.50"></text></g><g><title>thread_priority::unix::set_current_thread_priority (1 samples, 0.22%)</title><rect x="40.6667%" y="341" width="0.2222%" height="15" fill="rgb(240,125,3)" fg:x="183" fg:w="1"/><text x="40.9167%" y="351.50"></text></g><g><title>pthread_getschedparam (1 samples, 0.22%)</title><rect x="40.6667%" y="325" width="0.2222%" height="15" fill="rgb(205,98,50)" fg:x="183" fg:w="1"/><text x="40.9167%" y="335.50"></text></g><g><title>__sched_getparam (1 samples, 0.22%)</title><rect x="40.6667%" y="309" width="0.2222%" height="15" fill="rgb(205,185,37)" fg:x="183" fg:w="1"/><text x="40.9167%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="40.6667%" y="293" width="0.2222%" height="15" fill="rgb(238,207,15)" fg:x="183" fg:w="1"/><text x="40.9167%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="40.6667%" y="277" width="0.2222%" height="15" fill="rgb(213,199,42)" fg:x="183" fg:w="1"/><text x="40.9167%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="40.6667%" y="261" width="0.2222%" height="15" fill="rgb(235,201,11)" fg:x="183" fg:w="1"/><text x="40.9167%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="40.6667%" y="245" width="0.2222%" height="15" fill="rgb(207,46,11)" fg:x="183" fg:w="1"/><text x="40.9167%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::Context&gt; (1 samples, 0.22%)</title><rect x="41.1111%" y="293" width="0.2222%" height="15" fill="rgb(241,35,35)" fg:x="185" fg:w="1"/><text x="41.3611%" y="303.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.22%)</title><rect x="41.1111%" y="277" width="0.2222%" height="15" fill="rgb(243,32,47)" fg:x="185" fg:w="1"/><text x="41.3611%" y="287.50"></text></g><g><title>tokio::loom::std::rand::seed (1 samples, 0.22%)</title><rect x="41.3333%" y="293" width="0.2222%" height="15" fill="rgb(247,202,23)" fg:x="186" fg:w="1"/><text x="41.5833%" y="303.50"></text></g><g><title>_ZN3std3sys12thread_local10fast_local12Key$LT$T$GT$14try_initialize17h3cfdf65ec6069cd1E.llvm.14475535639380247630 (1 samples, 0.22%)</title><rect x="41.3333%" y="277" width="0.2222%" height="15" fill="rgb(219,102,11)" fg:x="186" fg:w="1"/><text x="41.5833%" y="287.50"></text></g><g><title>std::sys::pal::unix::rand::hashmap_random_keys (1 samples, 0.22%)</title><rect x="41.3333%" y="261" width="0.2222%" height="15" fill="rgb(243,110,44)" fg:x="186" fg:w="1"/><text x="41.5833%" y="271.50"></text></g><g><title>__GI___getrandom (1 samples, 0.22%)</title><rect x="41.3333%" y="245" width="0.2222%" height="15" fill="rgb(222,74,54)" fg:x="186" fg:w="1"/><text x="41.5833%" y="255.50"></text></g><g><title>__GI___pthread_enable_asynccancel (1 samples, 0.22%)</title><rect x="41.3333%" y="229" width="0.2222%" height="15" fill="rgb(216,99,12)" fg:x="186" fg:w="1"/><text x="41.5833%" y="239.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (13 samples, 2.89%)</title><rect x="47.7778%" y="261" width="2.8889%" height="15" fill="rgb(226,22,26)" fg:x="215" fg:w="13"/><text x="48.0278%" y="271.50">pa..</text></g><g><title>__sched_yield (2 samples, 0.44%)</title><rect x="50.2222%" y="245" width="0.4444%" height="15" fill="rgb(217,163,10)" fg:x="226" fg:w="2"/><text x="50.4722%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="50.2222%" y="229" width="0.4444%" height="15" fill="rgb(213,25,53)" fg:x="226" fg:w="2"/><text x="50.4722%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="50.2222%" y="213" width="0.4444%" height="15" fill="rgb(252,105,26)" fg:x="226" fg:w="2"/><text x="50.4722%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="50.2222%" y="197" width="0.4444%" height="15" fill="rgb(220,39,43)" fg:x="226" fg:w="2"/><text x="50.4722%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="50.2222%" y="181" width="0.4444%" height="15" fill="rgb(229,68,48)" fg:x="226" fg:w="2"/><text x="50.4722%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="50.4444%" y="165" width="0.2222%" height="15" fill="rgb(252,8,32)" fg:x="227" fg:w="1"/><text x="50.6944%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="50.4444%" y="149" width="0.2222%" height="15" fill="rgb(223,20,43)" fg:x="227" fg:w="1"/><text x="50.6944%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="50.4444%" y="133" width="0.2222%" height="15" fill="rgb(229,81,49)" fg:x="227" fg:w="1"/><text x="50.6944%" y="143.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (5 samples, 1.11%)</title><rect x="50.6667%" y="261" width="1.1111%" height="15" fill="rgb(236,28,36)" fg:x="228" fg:w="5"/><text x="50.9167%" y="271.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (5 samples, 1.11%)</title><rect x="50.6667%" y="245" width="1.1111%" height="15" fill="rgb(249,185,26)" fg:x="228" fg:w="5"/><text x="50.9167%" y="255.50"></text></g><g><title>__vdso_clock_gettime (4 samples, 0.89%)</title><rect x="50.8889%" y="229" width="0.8889%" height="15" fill="rgb(249,174,33)" fg:x="229" fg:w="4"/><text x="51.1389%" y="239.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.22%)</title><rect x="51.7778%" y="261" width="0.2222%" height="15" fill="rgb(233,201,37)" fg:x="233" fg:w="1"/><text x="52.0278%" y="271.50"></text></g><g><title>syscall (2 samples, 0.44%)</title><rect x="52.0000%" y="261" width="0.4444%" height="15" fill="rgb(221,78,26)" fg:x="234" fg:w="2"/><text x="52.2500%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="52.2222%" y="245" width="0.2222%" height="15" fill="rgb(250,127,30)" fg:x="235" fg:w="1"/><text x="52.4722%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="52.2222%" y="229" width="0.2222%" height="15" fill="rgb(230,49,44)" fg:x="235" fg:w="1"/><text x="52.4722%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="52.2222%" y="213" width="0.2222%" height="15" fill="rgb(229,67,23)" fg:x="235" fg:w="1"/><text x="52.4722%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="52.2222%" y="197" width="0.2222%" height="15" fill="rgb(249,83,47)" fg:x="235" fg:w="1"/><text x="52.4722%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="52.2222%" y="181" width="0.2222%" height="15" fill="rgb(215,43,3)" fg:x="235" fg:w="1"/><text x="52.4722%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="52.2222%" y="165" width="0.2222%" height="15" fill="rgb(238,154,13)" fg:x="235" fg:w="1"/><text x="52.4722%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back (7 samples, 1.56%)</title><rect x="52.4444%" y="261" width="1.5556%" height="15" fill="rgb(219,56,2)" fg:x="236" fg:w="7"/><text x="52.6944%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (4 samples, 0.89%)</title><rect x="54.0000%" y="261" width="0.8889%" height="15" fill="rgb(233,0,4)" fg:x="243" fg:w="4"/><text x="54.2500%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::shutdown_core (1 samples, 0.22%)</title><rect x="54.8889%" y="261" width="0.2222%" height="15" fill="rgb(235,30,7)" fg:x="247" fg:w="1"/><text x="55.1389%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::shutdown (1 samples, 0.22%)</title><rect x="54.8889%" y="245" width="0.2222%" height="15" fill="rgb(250,79,13)" fg:x="247" fg:w="1"/><text x="55.1389%" y="255.50"></text></g><g><title>tokio::runtime::io::driver::Driver::shutdown (1 samples, 0.22%)</title><rect x="54.8889%" y="229" width="0.2222%" height="15" fill="rgb(211,146,34)" fg:x="247" fg:w="1"/><text x="55.1389%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (20 samples, 4.44%)</title><rect x="55.1111%" y="261" width="4.4444%" height="15" fill="rgb(228,22,38)" fg:x="248" fg:w="20"/><text x="55.3611%" y="271.50">tokio..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (18 samples, 4.00%)</title><rect x="55.5556%" y="245" width="4.0000%" height="15" fill="rgb(235,168,5)" fg:x="250" fg:w="18"/><text x="55.8056%" y="255.50">park..</text></g><g><title>syscall (14 samples, 3.11%)</title><rect x="56.4444%" y="229" width="3.1111%" height="15" fill="rgb(221,155,16)" fg:x="254" fg:w="14"/><text x="56.6944%" y="239.50">sys..</text></g><g><title>[unknown] (14 samples, 3.11%)</title><rect x="56.4444%" y="213" width="3.1111%" height="15" fill="rgb(215,215,53)" fg:x="254" fg:w="14"/><text x="56.6944%" y="223.50">[un..</text></g><g><title>[unknown] (14 samples, 3.11%)</title><rect x="56.4444%" y="197" width="3.1111%" height="15" fill="rgb(223,4,10)" fg:x="254" fg:w="14"/><text x="56.6944%" y="207.50">[un..</text></g><g><title>[unknown] (12 samples, 2.67%)</title><rect x="56.8889%" y="181" width="2.6667%" height="15" fill="rgb(234,103,6)" fg:x="256" fg:w="12"/><text x="57.1389%" y="191.50">[u..</text></g><g><title>[unknown] (10 samples, 2.22%)</title><rect x="57.3333%" y="165" width="2.2222%" height="15" fill="rgb(227,97,0)" fg:x="258" fg:w="10"/><text x="57.5833%" y="175.50">[..</text></g><g><title>[unknown] (10 samples, 2.22%)</title><rect x="57.3333%" y="149" width="2.2222%" height="15" fill="rgb(234,150,53)" fg:x="258" fg:w="10"/><text x="57.5833%" y="159.50">[..</text></g><g><title>[unknown] (9 samples, 2.00%)</title><rect x="57.5556%" y="133" width="2.0000%" height="15" fill="rgb(228,201,54)" fg:x="259" fg:w="9"/><text x="57.8056%" y="143.50">[..</text></g><g><title>[unknown] (7 samples, 1.56%)</title><rect x="58.0000%" y="117" width="1.5556%" height="15" fill="rgb(222,22,37)" fg:x="261" fg:w="7"/><text x="58.2500%" y="127.50"></text></g><g><title>[unknown] (6 samples, 1.33%)</title><rect x="58.2222%" y="101" width="1.3333%" height="15" fill="rgb(237,53,32)" fg:x="262" fg:w="6"/><text x="58.4722%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.89%)</title><rect x="58.6667%" y="85" width="0.8889%" height="15" fill="rgb(233,25,53)" fg:x="264" fg:w="4"/><text x="58.9167%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="59.1111%" y="69" width="0.4444%" height="15" fill="rgb(210,40,34)" fg:x="266" fg:w="2"/><text x="59.3611%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="59.1111%" y="53" width="0.4444%" height="15" fill="rgb(241,220,44)" fg:x="266" fg:w="2"/><text x="59.3611%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="59.1111%" y="37" width="0.4444%" height="15" fill="rgb(235,28,35)" fg:x="266" fg:w="2"/><text x="59.3611%" y="47.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (2 samples, 0.44%)</title><rect x="60.2222%" y="229" width="0.4444%" height="15" fill="rgb(210,56,17)" fg:x="271" fg:w="2"/><text x="60.4722%" y="239.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (14 samples, 3.11%)</title><rect x="60.2222%" y="245" width="3.1111%" height="15" fill="rgb(224,130,29)" fg:x="271" fg:w="14"/><text x="60.4722%" y="255.50">par..</text></g><g><title>syscall (12 samples, 2.67%)</title><rect x="60.6667%" y="229" width="2.6667%" height="15" fill="rgb(235,212,8)" fg:x="273" fg:w="12"/><text x="60.9167%" y="239.50">sy..</text></g><g><title>[unknown] (12 samples, 2.67%)</title><rect x="60.6667%" y="213" width="2.6667%" height="15" fill="rgb(223,33,50)" fg:x="273" fg:w="12"/><text x="60.9167%" y="223.50">[u..</text></g><g><title>[unknown] (12 samples, 2.67%)</title><rect x="60.6667%" y="197" width="2.6667%" height="15" fill="rgb(219,149,13)" fg:x="273" fg:w="12"/><text x="60.9167%" y="207.50">[u..</text></g><g><title>[unknown] (12 samples, 2.67%)</title><rect x="60.6667%" y="181" width="2.6667%" height="15" fill="rgb(250,156,29)" fg:x="273" fg:w="12"/><text x="60.9167%" y="191.50">[u..</text></g><g><title>[unknown] (11 samples, 2.44%)</title><rect x="60.8889%" y="165" width="2.4444%" height="15" fill="rgb(216,193,19)" fg:x="274" fg:w="11"/><text x="61.1389%" y="175.50">[u..</text></g><g><title>[unknown] (11 samples, 2.44%)</title><rect x="60.8889%" y="149" width="2.4444%" height="15" fill="rgb(216,135,14)" fg:x="274" fg:w="11"/><text x="61.1389%" y="159.50">[u..</text></g><g><title>[unknown] (7 samples, 1.56%)</title><rect x="61.7778%" y="133" width="1.5556%" height="15" fill="rgb(241,47,5)" fg:x="278" fg:w="7"/><text x="62.0278%" y="143.50"></text></g><g><title>[unknown] (6 samples, 1.33%)</title><rect x="62.0000%" y="117" width="1.3333%" height="15" fill="rgb(233,42,35)" fg:x="279" fg:w="6"/><text x="62.2500%" y="127.50"></text></g><g><title>[unknown] (5 samples, 1.11%)</title><rect x="62.2222%" y="101" width="1.1111%" height="15" fill="rgb(231,13,6)" fg:x="280" fg:w="5"/><text x="62.4722%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="63.1111%" y="85" width="0.2222%" height="15" fill="rgb(207,181,40)" fg:x="284" fg:w="1"/><text x="63.3611%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.22%)</title><rect x="63.3333%" y="245" width="0.2222%" height="15" fill="rgb(254,173,49)" fg:x="285" fg:w="1"/><text x="63.5833%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (4 samples, 0.89%)</title><rect x="63.5556%" y="245" width="0.8889%" height="15" fill="rgb(221,1,38)" fg:x="286" fg:w="4"/><text x="63.8056%" y="255.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (2 samples, 0.44%)</title><rect x="64.0000%" y="229" width="0.4444%" height="15" fill="rgb(206,124,46)" fg:x="288" fg:w="2"/><text x="64.2500%" y="239.50"></text></g><g><title>__sched_yield (1 samples, 0.22%)</title><rect x="64.2222%" y="213" width="0.2222%" height="15" fill="rgb(249,21,11)" fg:x="289" fg:w="1"/><text x="64.4722%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="64.2222%" y="197" width="0.2222%" height="15" fill="rgb(222,201,40)" fg:x="289" fg:w="1"/><text x="64.4722%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="64.2222%" y="181" width="0.2222%" height="15" fill="rgb(235,61,29)" fg:x="289" fg:w="1"/><text x="64.4722%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="64.2222%" y="165" width="0.2222%" height="15" fill="rgb(219,207,3)" fg:x="289" fg:w="1"/><text x="64.4722%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="64.2222%" y="149" width="0.2222%" height="15" fill="rgb(222,56,46)" fg:x="289" fg:w="1"/><text x="64.4722%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="64.2222%" y="133" width="0.2222%" height="15" fill="rgb(239,76,54)" fg:x="289" fg:w="1"/><text x="64.4722%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::release (12 samples, 2.67%)</title><rect x="64.6667%" y="213" width="2.6667%" height="15" fill="rgb(231,124,27)" fg:x="291" fg:w="12"/><text x="64.9167%" y="223.50">to..</text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (3 samples, 0.67%)</title><rect x="67.3333%" y="213" width="0.6667%" height="15" fill="rgb(249,195,6)" fg:x="303" fg:w="3"/><text x="67.5833%" y="223.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal (1 samples, 0.22%)</title><rect x="68.0000%" y="213" width="0.2222%" height="15" fill="rgb(237,174,47)" fg:x="306" fg:w="1"/><text x="68.2500%" y="223.50"></text></g><g><title>_ZN5tokio7runtime4task7harness20Harness$LT$T$C$S$GT$8complete17h3b524d8d3cde1320E.llvm.476534995031196281 (40 samples, 8.89%)</title><rect x="64.6667%" y="229" width="8.8889%" height="15" fill="rgb(206,201,31)" fg:x="291" fg:w="40"/><text x="64.9167%" y="239.50">_ZN5tokio7run..</text></g><g><title>tokio::util::sharded_list::ShardedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (24 samples, 5.33%)</title><rect x="68.2222%" y="213" width="5.3333%" height="15" fill="rgb(231,57,52)" fg:x="307" fg:w="24"/><text x="68.4722%" y="223.50">tokio::..</text></g><g><title>_ZN4core3ptr148drop_in_place$LT$tokio..runtime..task..core..Stage$LT$julia..generate_image_buffer..$u7b$$u7b$closure$u7d$$u7d$..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$17h67dc224f71b05a77E.llvm.16802669876056144474 (1 samples, 0.22%)</title><rect x="76.0000%" y="213" width="0.2222%" height="15" fill="rgb(248,177,22)" fg:x="342" fg:w="1"/><text x="76.2500%" y="223.50"></text></g><g><title>std::panicking::try (13 samples, 2.89%)</title><rect x="73.5556%" y="229" width="2.8889%" height="15" fill="rgb(215,211,37)" fg:x="331" fg:w="13"/><text x="73.8056%" y="239.50">st..</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.22%)</title><rect x="76.2222%" y="213" width="0.2222%" height="15" fill="rgb(241,128,51)" fg:x="343" fg:w="1"/><text x="76.4722%" y="223.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.89%)</title><rect x="77.7778%" y="213" width="0.8889%" height="15" fill="rgb(227,165,31)" fg:x="350" fg:w="4"/><text x="78.0278%" y="223.50"></text></g><g><title>hypot (25 samples, 5.56%)</title><rect x="84.6667%" y="197" width="5.5556%" height="15" fill="rgb(228,167,24)" fg:x="381" fg:w="25"/><text x="84.9167%" y="207.50">hypot</text></g><g><title>[libm.so.6] (28 samples, 6.22%)</title><rect x="91.5556%" y="181" width="6.2222%" height="15" fill="rgb(228,143,12)" fg:x="412" fg:w="28"/><text x="91.8056%" y="191.50">[libm.so..</text></g><g><title>pow (36 samples, 8.00%)</title><rect x="90.2222%" y="197" width="8.0000%" height="15" fill="rgb(249,149,8)" fg:x="406" fg:w="36"/><text x="90.4722%" y="207.50">pow</text></g><g><title>__pow_finite@plt (2 samples, 0.44%)</title><rect x="97.7778%" y="181" width="0.4444%" height="15" fill="rgb(243,35,44)" fg:x="440" fg:w="2"/><text x="98.0278%" y="191.50"></text></g><g><title>_ZN5julia21generate_image_buffer28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17ha5530c22d7fbe2e2E.llvm.16802669876056144474 (89 samples, 19.78%)</title><rect x="78.6667%" y="213" width="19.7778%" height="15" fill="rgb(246,89,9)" fg:x="354" fg:w="89"/><text x="78.9167%" y="223.50">_ZN5julia21generate_image_buffe..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.22%)</title><rect x="98.2222%" y="197" width="0.2222%" height="15" fill="rgb(233,213,13)" fg:x="442" fg:w="1"/><text x="98.4722%" y="207.50"></text></g><g><title>syscall (1 samples, 0.22%)</title><rect x="98.2222%" y="181" width="0.2222%" height="15" fill="rgb(233,141,41)" fg:x="442" fg:w="1"/><text x="98.4722%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="98.2222%" y="165" width="0.2222%" height="15" fill="rgb(239,167,4)" fg:x="442" fg:w="1"/><text x="98.4722%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="98.2222%" y="149" width="0.2222%" height="15" fill="rgb(209,217,16)" fg:x="442" fg:w="1"/><text x="98.4722%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="98.2222%" y="133" width="0.2222%" height="15" fill="rgb(219,88,35)" fg:x="442" fg:w="1"/><text x="98.4722%" y="143.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (100 samples, 22.22%)</title><rect x="76.4444%" y="229" width="22.2222%" height="15" fill="rgb(220,193,23)" fg:x="344" fg:w="100"/><text x="76.6944%" y="239.50">tokio::runtime::task::core::Core&lt;T,..</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.22%)</title><rect x="98.4444%" y="213" width="0.2222%" height="15" fill="rgb(230,90,52)" fg:x="443" fg:w="1"/><text x="98.6944%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (180 samples, 40.00%)</title><rect x="59.5556%" y="261" width="40.0000%" height="15" fill="rgb(252,106,19)" fg:x="268" fg:w="180"/><text x="59.8056%" y="271.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (158 samples, 35.11%)</title><rect x="64.4444%" y="245" width="35.1111%" height="15" fill="rgb(206,74,20)" fg:x="290" fg:w="158"/><text x="64.6944%" y="255.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (4 samples, 0.89%)</title><rect x="98.6667%" y="229" width="0.8889%" height="15" fill="rgb(230,138,44)" fg:x="444" fg:w="4"/><text x="98.9167%" y="239.50"></text></g><g><title>all (450 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="450"/><text x="0.2500%" y="495.50"></text></g><g><title>tokio-runtime-w (268 samples, 59.56%)</title><rect x="40.4444%" y="469" width="59.5556%" height="15" fill="rgb(242,16,51)" fg:x="182" fg:w="268"/><text x="40.6944%" y="479.50">tokio-runtime-w</text></g><g><title>clone3 (268 samples, 59.56%)</title><rect x="40.4444%" y="453" width="59.5556%" height="15" fill="rgb(248,9,4)" fg:x="182" fg:w="268"/><text x="40.6944%" y="463.50">clone3</text></g><g><title>start_thread (268 samples, 59.56%)</title><rect x="40.4444%" y="437" width="59.5556%" height="15" fill="rgb(210,31,22)" fg:x="182" fg:w="268"/><text x="40.6944%" y="447.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (268 samples, 59.56%)</title><rect x="40.4444%" y="421" width="59.5556%" height="15" fill="rgb(239,54,39)" fg:x="182" fg:w="268"/><text x="40.6944%" y="431.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (267 samples, 59.33%)</title><rect x="40.6667%" y="405" width="59.3333%" height="15" fill="rgb(230,99,41)" fg:x="183" fg:w="267"/><text x="40.9167%" y="415.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (267 samples, 59.33%)</title><rect x="40.6667%" y="389" width="59.3333%" height="15" fill="rgb(253,106,12)" fg:x="183" fg:w="267"/><text x="40.9167%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (267 samples, 59.33%)</title><rect x="40.6667%" y="373" width="59.3333%" height="15" fill="rgb(213,46,41)" fg:x="183" fg:w="267"/><text x="40.9167%" y="383.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (266 samples, 59.11%)</title><rect x="40.8889%" y="357" width="59.1111%" height="15" fill="rgb(215,133,35)" fg:x="184" fg:w="266"/><text x="41.1389%" y="367.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (266 samples, 59.11%)</title><rect x="40.8889%" y="341" width="59.1111%" height="15" fill="rgb(213,28,5)" fg:x="184" fg:w="266"/><text x="41.1389%" y="351.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (266 samples, 59.11%)</title><rect x="40.8889%" y="325" width="59.1111%" height="15" fill="rgb(215,77,49)" fg:x="184" fg:w="266"/><text x="41.1389%" y="335.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (265 samples, 58.89%)</title><rect x="41.1111%" y="309" width="58.8889%" height="15" fill="rgb(248,100,22)" fg:x="185" fg:w="265"/><text x="41.3611%" y="319.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (263 samples, 58.44%)</title><rect x="41.5556%" y="293" width="58.4444%" height="15" fill="rgb(208,67,9)" fg:x="187" fg:w="263"/><text x="41.8056%" y="303.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (263 samples, 58.44%)</title><rect x="41.5556%" y="277" width="58.4444%" height="15" fill="rgb(219,133,21)" fg:x="187" fg:w="263"/><text x="41.8056%" y="287.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::close_and_shutdown_all (2 samples, 0.44%)</title><rect x="99.5556%" y="261" width="0.4444%" height="15" fill="rgb(246,46,29)" fg:x="448" fg:w="2"/><text x="99.8056%" y="271.50"></text></g></svg></svg>